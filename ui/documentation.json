{
    "pipes": [
        {
            "name": "ComponentSearchPipe",
            "id": "pipe-ComponentSearchPipe-86642e2e6c88a1e2f68e00d9cf683cc8ae6fb264ab20da9fe1b9ae64aa531dc01ee1a4b54f31a837a66e905f996ff62d6739fcef96e1a25f9ead3c7969258cf9",
            "file": "src/app/shared/pipes/component-search.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "noTagPresent",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "componentSearch",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { intersection } from '@shared/tools/array-utils';\n\n@Pipe({\n    name: 'componentSearch'\n})\nexport class ComponentSearchPipe implements PipeTransform {\n\n    transform(input: any, tags: String[], noTag: boolean, all: boolean) {\n        return all ? input : input.filter((item: any) => {\n            return (this.tagPresent(tags, item) || this.noTagPresent(noTag, item));\n        });\n    }\n\n    private tagPresent(tags: String[], item: any): boolean {\n        return intersection(tags, item.tags).length > 0;\n    }\n\n    private noTagPresent(noTag: boolean, item: any): boolean {\n        return noTag && item.tags.length === 0;\n    }\n\n}\n"
        },
        {
            "name": "DataSetSearchPipe",
            "id": "pipe-DataSetSearchPipe-ffe52f3b33def820b423cd69f9beaaa6d14c8ca181d5f00728ea25b59ed92eb99996b5e5ea17a98282033e6cd4608d23840b88402fbf44cfb105a12fcded81a4",
            "file": "src/app/shared/pipes/dataset-search.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dataSetSearch",
            "sourceCode": "import { Dataset } from '@model';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { containsAll } from '@shared/tools/array-utils';\n\n@Pipe({\n    name: 'dataSetSearch'\n})\nexport class DataSetSearchPipe implements PipeTransform {\n\n    transform(input: any, tags: String[]) {\n        if (tags.length === 0) {\n            return input;\n        }\n\n        return input.filter((item: Dataset) => {\n            return (this.tagPresent(tags, item));\n        });\n    }\n\n    private tagPresent(tags: String[], dataset: Dataset): boolean {\n        return containsAll(tags, dataset.tags);\n    }\n}\n"
        },
        {
            "name": "DurationPipe",
            "id": "pipe-DurationPipe-80b2602a1775426768b6fbc04773bfe88ec1c06cfc62a6ee19ff3c6167fad61d127fa9c8ba8115e5ddd7b640e0f80a99d4a727d840738dbd1ea857ddbe9bcf38",
            "file": "src/app/shared/pipes/duration.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "buildFull",
                    "args": [
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "milliseconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "milliseconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildShort",
                    "args": [
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "milliseconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "milliseconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'full'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'full'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "duration",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'duration' })\nexport class DurationPipe implements PipeTransform {\n    transform(value: number, mode = 'full'): any {\n        const hours = Math.floor(value / 1000 / 60 / 60);\n        const minutes = Math.floor((value - hours * 1000 * 60 * 60) / 1000 / 60);\n        const seconds = Math.floor((value - hours * 1000 * 60 * 60 - minutes * 1000 * 60) / 1000);\n        const milliseconds = value - hours * 1000 * 60 * 60 - minutes * 1000 * 60 - seconds * 1000;\n\n        if (mode === 'full') {\n            return this.buildFull(hours, minutes, seconds, milliseconds);\n        } else if (mode === 'short') {\n            return this.buildShort(hours, minutes, seconds, milliseconds);\n        } else {\n            throw Error(`InvalidPipeArgument: mode : '${mode}' for pipe DurationPipe`);\n        }\n    }\n\n    buildFull(hours: number, minutes: number, seconds: number, milliseconds: number) {\n        let result = '';\n\n        if (hours > 0) {\n            result += hours + 'h ';\n        }\n        if (minutes > 0) {\n            result += minutes + 'm ';\n        }\n        if (seconds > 0) {\n            result += seconds + 's ';\n        }\n        if (milliseconds > 0) {\n            result += milliseconds + 'ms';\n        }\n        return result.trim();\n    }\n\n    buildShort(hours: number, minutes: number, seconds: number, milliseconds: number) {\n        if (hours > 0) {\n            return hours + ' h';\n        } else if (minutes > 0) {\n            return minutes + ' m';\n        } else if (seconds > 0) {\n            return seconds + ' s';\n        } else {\n            return milliseconds + ' ms';\n        }\n    }\n}\n"
        },
        {
            "name": "LinkifyPipe",
            "id": "pipe-LinkifyPipe-1b39e6cb5a6fa9066ff9f10f0b5d379a37671a0c8aaa481628705ec5a2e634a848f49d8ec1268ef0e4ce26efce0a7d73284ee5b8446921d21d3dc77eb4f21e7b",
            "file": "src/app/shared/pipes/linkify.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "applyOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "concat",
                    "args": [
                        {
                            "name": "chunks",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "chunks",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "linkify",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "slice",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "linkifiers",
                            "type": "Array<Linkifier>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "counter",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linkifiers",
                            "type": "Array<Linkifier>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "counter",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "linkify",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Linkifier } from '@model';\n\n@Pipe({name: 'linkify'})\nexport class LinkifyPipe implements PipeTransform {\n\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    transform(value: string, option?: string): SafeHtml {\n        const storedLinkifiers = sessionStorage.getItem('linkifiers');\n        if (value == null || storedLinkifiers == null) {\n            return value ? value : '';\n        }\n\n        const linkifiers: Array<Linkifier> = JSON.parse(storedLinkifiers);\n\n        const chunks = this.slice(value, linkifiers, 0);\n        const newValue = this.concat(chunks);\n\n        return this.linkify(this.applyOption(newValue, option));\n    }\n\n    private slice(value: string, linkifiers: Array<Linkifier>, counter: number): string[] {\n        if (value == null || value === '') {\n            // @ts-ignore\n            return '';\n        }\n\n        if (linkifiers[counter] == null) {\n            // @ts-ignore\n            return value;\n        }\n\n        let result;\n        let prevIndex = 0;\n        const chunks = [];\n        const regex = new RegExp(linkifiers[counter].pattern, 'g');\n        const regTmp = new RegExp(linkifiers[counter].pattern);\n\n        while ((result = regex.exec(value)) != null) {\n            const substr = value.substring(prevIndex, result.index);\n            if (substr !== '')  {\n                chunks.splice(prevIndex, 0, this.slice(substr, linkifiers, counter + 1));\n            }\n            prevIndex = regex.lastIndex;\n            const match = value.substring(result.index, regex.lastIndex);\n            chunks.push(match.replace(regTmp, '<a target=\"_blank\" href=\"' + linkifiers[counter].link + '\">' + result[0] + '</a>'));\n        }\n\n        chunks.push(this.slice(value.substring(prevIndex, value.length), linkifiers, counter + 1));\n\n        return chunks;\n    }\n\n    private concat(chunks: string[]): string {\n        if (typeof chunks === 'string' || chunks instanceof String) {\n            // @ts-ignore\n            return chunks;\n        }\n\n        let slice = '';\n        for (const chunk of chunks) {\n            // @ts-ignore\n            slice += this.concat(chunk);\n        }\n\n        return slice;\n    }\n\n    private applyOption(value: string, option: string) {\n        switch (option) {\n            case 'uppercase': return value.toUpperCase();\n            default: return value;\n        }\n    }\n\n    private linkify(value: string): SafeHtml {\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n    }\n}\n"
        },
        {
            "name": "ObjectAsEntryListPipe",
            "id": "pipe-ObjectAsEntryListPipe-0a595e79f0d235cc3ec39cd5b58b91bb94d47c4fe2a1707f581d4ea6447fc2268e7e082c6decd3007420bd2615c49f7481a549beafb072ae34eabce2f607034b",
            "file": "src/app/shared/pipes/objectAsEntryList.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "objectAsEntryList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'objectAsEntryList'})\nexport class ObjectAsEntryListPipe implements PipeTransform {\n  transform(value, args:string[]): any {\n    const keys = [];\n    for(const key of Object.getOwnPropertyNames(value)) {\n      keys.push({'key': key, value: value[key]});\n    }\n    return keys;\n  }\n}\n"
        },
        {
            "name": "PrettyPrintPipe",
            "id": "pipe-PrettyPrintPipe-cf7dfe140a39f33d866516f481a615f25134b7185e05d589844d7da2097181f9c441dc60d82d59cf444b016837b3f14cce6b61859aa776338e001abf8dc5d0b2",
            "file": "src/app/shared/pipes/prettyPrint.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "beautify",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "formatXml",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "escapeHtml",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "escapeHtml",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "prettyPrint",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { escapeHtml } from '@shared/tools/string-utils';\n\n@Pipe({ name: 'prettyPrint' })\nexport class PrettyPrintPipe implements PipeTransform {\n  transform(value, escapeHtml: boolean = false): any {\n    if (value instanceof Array) {\n      return value.map(v => this.beautify(v, escapeHtml)).join('<br/>');\n    } else {\n      return this.beautify(value, escapeHtml);\n    }\n  }\n\n  beautify = (content: string, escapeHtmlP: boolean = false) => {\n    let r = content;\n    try {\n      let json = JSON.parse(content);\n      if (typeof json === 'string') {\n        content = json;\n        throw new Error('');\n      } else if (Array.isArray(json)) {\n          let b = '[';\n          for (let i = 0 ; i < json.length ; i++) {\n              b += this.beautify(json[i]);\n              b += '\\n';\n          }\n          return b + ']';\n      }\n      return JSON.stringify(json, null, '  ');\n    } catch (error) {\n      if (content.startsWith('data:image')) {\n        return '<img src=\"' + content + '\" />';\n      }\n      if (content.startsWith('data:')) {\n        return '<a href=\"' + content + '\" >download information data</a>';\n      }\n      if (content.startsWith('<') || content.includes('<?xml')) {\n        r = this.formatXml(content, '  ');\n      }\n    }\n\n    return escapeHtmlP ? escapeHtml(r) : r;\n  };\n\n  formatXml = (input, indent) => {\n    indent = indent || '\\t'; //you can set/define other ident than tabs\n\n    //PART 1: Add \\n where necessary\n    const xmlString = input\n      .replace(/(<([a-zA-Z]+\\b)[^>]*>)(?!<\\/\\2>|[\\w\\s])/g, \"$1\\n\") //add \\n after tag if not followed by the closing tag of pair or text node\n      .replace(/(<\\/[a-zA-Z]+[^>]*>)/g, \"$1\\n\") //add \\n after closing tag\n      .replace(/>\\s+(.+?)\\s+<(?!\\/)/g, \">\\n$1\\n<\") //add \\n between sets of angled brackets and text node between them\n      .replace(/>(.+?)<([a-zA-Z])/g, \">\\n$1\\n<$2\") //add \\n between angled brackets and text node between them\n      .replace(/\\?></, \"?>\\n<\") //detect a header of XML\n\n    const xmlArr = xmlString.split('\\n');  //split it into an array (for analise each line separately)\n\n    //PART 2: indent each line appropriately\n    let tabs = '';  //store the current indentation\n    let start = 0;  //starting line\n\n    if (/^<[?]xml/.test(xmlArr[0])) start++;  //if the first line is a header, ignore it\n\n    for (let i = start; i < xmlArr.length; i++) //for each line\n    {\n      const line = xmlArr[i].replace(/^\\s+|\\s+$/g, '');  //trim it (just in case)\n\n      if (/^<[/]/.test(line))  //if the line is a closing tag\n      {\n        tabs = tabs.replace(indent, '');  //remove one indent from the store\n        xmlArr[i] = tabs + line;  //add the tabs at the beginning of the line\n      }\n      else if (/<.*>.*<\\/.*>|<.*[^>]\\/>/.test(line))  //if the line contains an entire node\n      {\n        //leave the store as is\n        xmlArr[i] = tabs + line; //add the tabs at the beginning of the line\n      }\n      else if (/<.*>/.test(line)) //if the line starts with an opening tag and does not contain an entire node\n      {\n        xmlArr[i] = tabs + line;  //add the tabs at the beginning of the line\n        tabs += indent;  //and add one indent to the store\n      }\n      else  //if the line contain a text node\n      {\n        xmlArr[i] = tabs + line;  // add the tabs at the beginning of the line\n      }\n    }\n\n    //PART 3: return formatted string (source)\n    return xmlArr.join('\\n');  //rejoin the array to a string and return it\n  };\n}\n"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-30696bbc7f320fb0154762c3fa32a863c450b74595b1641320f9d0ac2c881d7fd13afc49ec059bfdd8379eb192c99cf08d6e21bb5d827204092a85f97f5d307a",
            "file": "src/app/shared/pipes/safe.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n\n  constructor(protected sanitizer: DomSanitizer) {}\n\n  public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n    switch (type) {\n      case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n      case 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\n      case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default: throw new Error(`Invalid safe type specified: ${type}`);\n    }\n  }\n}\n"
        },
        {
            "name": "ScenarioCampaignSearchPipe",
            "id": "pipe-ScenarioCampaignSearchPipe-147deb6cbe0f90f47a95d7a381869243f624add29c4fd9ecf74cd3b46d93e205419e04ce384f6650af2bda20672c926e530c9a5920e14e9f678eafd8be8a9736",
            "file": "src/app/shared/pipes/scenario-search-campaign.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "scenarioCampaignSearch",
            "sourceCode": "import { ScenarioIndex } from '@model';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { containsAll } from '@shared/tools/array-utils';\n\n@Pipe({\n    name: 'scenarioCampaignSearch'\n})\nexport class ScenarioCampaignSearchPipe implements PipeTransform {\n\n    transform(input: any, tags: String[]) {\n        if (tags.length === 0) {\n            return input;\n        }\n\n        return input.filter((item: ScenarioIndex) => {\n            return (this.tagPresent(tags, item));\n        });\n    }\n\n    private tagPresent(tags: String[], scenario: ScenarioIndex): boolean {\n        return containsAll(tags, scenario.tags);\n    }\n}\n"
        },
        {
            "name": "ScenarioSearchPipe",
            "id": "pipe-ScenarioSearchPipe-217e850697be098119b6b5bf3b74213dae10ede2d24e4787711759758b439c0c5eefef0708682c26821c3a39ea5bad92ef279a873b773019775e95bc90b08a48",
            "file": "src/app/shared/pipes/scenario-search.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "noTagPresent",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scenarioTypePresent",
                    "args": [
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "all",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "scenarioSearch",
            "sourceCode": "import { ScenarioIndex, ScenarioType } from '@model';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { intersection } from '@shared/tools/array-utils';\n\n@Pipe({\n    name: 'scenarioSearch'\n})\nexport class ScenarioSearchPipe implements PipeTransform {\n\n    transform(input: any, tags: String[], scenarioTypes: ScenarioType[], noTag: boolean, all: boolean) {\n        return all ? input : input.filter((item: ScenarioIndex) => {\n            return (this.tagPresent(tags, item) || this.noTagPresent(noTag, item)) && this.scenarioTypePresent(scenarioTypes, item);\n        });\n    }\n\n    private tagPresent(tags: String[], scenario: ScenarioIndex): boolean {\n        return intersection(tags, scenario.tags).length > 0;\n    }\n\n    private noTagPresent(noTag: boolean, scenario: ScenarioIndex): boolean {\n        return noTag && scenario.tags.length === 0;\n    }\n\n    private scenarioTypePresent(scenarioTypes: ScenarioType[], scenario: ScenarioIndex): boolean {\n        return intersection(scenarioTypes, [scenario.type]).length > 0;\n    }\n}\n"
        },
        {
            "name": "SearchTextPipe",
            "id": "pipe-SearchTextPipe-08bcb2514a5f30389b02a8dd6bf5e54758260671bf91bee2b6b39296e3dbf9a2fcd2f4051b76336c808b07158abdb416fb5dea288aaa389ca110542aa125a86b",
            "file": "src/app/shared/pipes/search-text.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filtertext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtertext",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "searchTextPipe",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { filterOnTextContent } from '@shared/tools';\n\n@Pipe({\n    name: 'searchTextPipe'\n})\nexport class SearchTextPipe implements PipeTransform {\n\n    transform(input: any, filtertext: string, args: any[]) {\n        return filterOnTextContent(input, filtertext, args);\n    }\n\n}\n"
        },
        {
            "name": "SortByFieldPipe",
            "id": "pipe-SortByFieldPipe-75bbb3d45a8549771a097c080a933e92b6d68ead331800abde0444eb8c2d0347dfd567a33cce8090335402d8ed951522fe54fe5e6cb67ea387695707b92d76be",
            "file": "src/app/shared/pipes/sort-by-field.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Usage :\nFor example an object Scenario with field title\nTo order by title in desc order :\n*ngFor=&quot;let scenario of (scenarios |  sortByField : &#39;title&#39; : true)&quot;&gt;</p>\n",
            "rawdescription": "\n\nUsage :\nFor example an object Scenario with field title\nTo order by title in desc order :\n*ngFor=\"let scenario of (scenarios |  sortByField : 'title' : true)\">\n",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "path",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sortByField",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Usage :\n * For example an object Scenario with field title\n * To order by title in desc order :\n * *ngFor=\"let scenario of (scenarios |  sortByField : 'title' : true)\">\n */\n@Pipe({ name: 'sortByField' })\nexport class SortByFieldPipe implements PipeTransform {\n\n  transform(array: any[], field: string, reverse: boolean): any[] {\n    if (field != null && field !== '') {\n      array.sort((a: any, b: any) => {\n        const fieldA = this.resolve(field, a);\n        const fieldB = this.resolve(field, b);\n\n        if (fieldA == null && fieldB == null) {\n          return 0;\n        } else if (fieldB == null) {\n          return reverse ? -1 : 1;\n        } else if (fieldA == null) {\n          return reverse ? 1 : -1;\n        }\n        if (fieldA < fieldB) {\n          return reverse ? 1 : -1;\n        } else if (fieldA > fieldB) {\n          return reverse ? -1 : 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n    return array;\n  }\n\n  // Usage :\n  // resolve(\"style.width\", document.body)\n  // resolve(\"part.0.size\", someObject)\n  // returns null when intermediate properties are not defined\n  resolve(path, obj) {\n    return path.split('.').reduce(function (prev, curr) {\n      return prev ? prev[curr] : null;\n    }, obj || self);\n  }\n}\n"
        },
        {
            "name": "StringifyPipe",
            "id": "pipe-StringifyPipe-a8e6439e1e836404a2d4fc02c58378b352c971119d47ebcda9735a72fca864ca70c77a3c46681dacdf35faf1dbd95409e7ecca00c0598bcaf88912fbc200f24b",
            "file": "src/app/shared/pipes/stringify.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "stringify",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'stringify'\n})\nexport class StringifyPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return JSON.stringify(value);\n  }\n}\n"
        },
        {
            "name": "ThumbnailPipe",
            "id": "pipe-ThumbnailPipe-4a22d249dc79e79ee3d01d5ab514449c6d40241b04cefe89f88d6166cee1669aa9a62d82ebd2d8714a4e979e715b7278931ae29798b4f5fa50c37be4b53454a6",
            "file": "src/app/shared/pipes/thumbnail.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "SafeValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "SafeValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "thumbnail",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { SafeHtml, SafeValue } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'thumbnail'\n})\nexport class ThumbnailPipe implements PipeTransform {\n\n    constructor() {}\n\n    public transform(value: SafeValue): SafeHtml {\n        const doc = new DOMParser().parseFromString(value.toString(), 'text/html');\n        const imgElements = doc.getElementsByTagName('img');\n        for (let i = 0; i < imgElements.length; i++) {\n            const imgElement = imgElements.item(i);\n            imgElement.classList.add('thumbnail');\n            imgElement.insertAdjacentHTML('beforebegin', '<a href=\"' + imgElement.src + '\" target=\"_blank\">' + imgElement.outerHTML + '</a>');\n            imgElement.remove();\n        }\n        return doc.documentElement.innerHTML;\n    }\n}\n"
        },
        {
            "name": "TranslatePipeMock",
            "id": "pipe-TranslatePipeMock-41dc22fbb4e9697a2299fa43153bf204213806ee6dc6436f6f9c628d357519f25a9d5397e4891bef90cc82eefc95786a4405701916beba879a617ca2c3ef869f",
            "file": "src/app/testing/translate-testing.module.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "name",
                    "defaultValue": "'translate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translate",
            "sourceCode": "import { TranslateModule, TranslateLoader, TranslatePipe, TranslateService } from '@ngx-translate/core';\nimport { NgModule, PipeTransform, Pipe, Injectable, EventEmitter } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nconst TRANSLATIONS_EN = require('src/assets/i18n/en.json');\n\nexport class FakeLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of(TRANSLATIONS_EN);\n    }\n}\n\n@Pipe({\n    name: 'translate'\n})\nexport class TranslatePipeMock implements PipeTransform {\n    public name = 'translate';\n\n    public transform(query: string, ...args: any[]): any {\n        return fromKey(query);\n    }\n}\n\n@Injectable()\nexport class TranslateServiceStub {\n    public get(key: string): Observable<string> {\n        return of(fromKey(key));\n    }\n    public onLangChange: EventEmitter<any> = new EventEmitter();\n    public onTranslationChange: EventEmitter<any> = new EventEmitter();\n    public onDefaultLangChange: EventEmitter<any> = new EventEmitter();\n}\n\nfunction fromKey(key: string): string {\n    let r = TRANSLATIONS_EN;\n    key.split('.').forEach((s) => { if (r) r = r[s]; });\n    if (r) { return r; } else { return key; }\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipeMock\n    ],\n    providers: [\n        { provide: TranslateService, useClass: TranslateServiceStub },\n        { provide: TranslatePipe, useClass: TranslatePipeMock },\n    ],\n    imports: [\n        TranslateModule.forRoot({\n            loader: { provide: TranslateLoader, useClass: FakeLoader },\n        })\n    ],\n    exports: [\n        TranslatePipeMock,\n        TranslateModule\n    ]\n})\nexport class TranslateTestingModule {\n\n}\n"
        },
        {
            "name": "TruncatePipe",
            "id": "pipe-TruncatePipe-de9f8d57e455a4fb46a6a068fe41bbc0c23ff3e1ecafaf22d8438f2c322dd555f687fc7d4f69b2c82fa0fbd87449862d88596362f60953d5303c15bba23d8e96",
            "file": "src/app/shared/pipes/truncate.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "withTrail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withTrail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "truncate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncate'\n})\nexport class TruncatePipe implements PipeTransform {\n\n  transform(value: any, args?: any, withTrail = true): any {\n    const limit = args ? parseInt(args, 10) : 10;\n    let trail = '...';\n\n    if(!withTrail) {\n      trail = '';\n    }\n    return value.length > limit ? value.substring(0, limit) + trail : value;\n  }\n\n}\n"
        },
        {
            "name": "WithoutScenarioPipe",
            "id": "pipe-WithoutScenarioPipe-3351c1e4af776585b5d506f1835c1e6276c87c5509222b9bef2def50b726c8b5c71fa133c018d8a8901637f30519369b6fb77bb1657e2f7b2630b07e9a1a0894",
            "file": "src/app/shared/pipes/without-scenario-pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenarioToExclude",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenarioToExclude",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "withoutScenario",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ScenarioIndex } from '@model';\n\n@Pipe({\n    name: 'withoutScenario'\n})\nexport class WithoutScenarioPipe implements PipeTransform {\n\n    transform(input: Array<ScenarioIndex>, scenarioToExclude: Array<ScenarioIndex>) {\n        return input.filter((item) => {\n            return !scenarioToExclude === undefined || !scenarioToExclude.includes(item);\n        });\n    }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AgentNetworkService",
            "id": "injectable-AgentNetworkService-57f178e2abd1b1062311ec6bd4ee73736babb22d50a4f96b705cbec5799d37bff79c9296eda3e83c56d9dfe48b0aec80eb89b48f0e7bd6290f1c724246b934cc",
            "file": "src/app/core/services/agent-network.service.ts",
            "properties": [
                {
                    "name": "buildAgent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Build a real {@link Agent} object based on equivalent anonymous structure.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nBuild a real {@link Agent} object based on equivalent anonymous structure.\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1074,
                            "end": 1140,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1075,
                                "end": 1080,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>casted from anonymous object</p>\n",
                            "typeExpression": {
                                "pos": 1081,
                                "end": 1088,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 1082,
                                    "end": 1087,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 177,
                                    "typeName": {
                                        "pos": 1082,
                                        "end": 1087,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "Agent"
                                    }
                                }
                            },
                            "name": {
                                "pos": 1089,
                                "end": 1105,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "agentDescription"
                            },
                            "isNameFirst": false,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "buildTarget",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Build a real {@link TargetId} object based on equivalent anonymous structure.</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nBuild a real {@link TargetId} object based on equivalent anonymous structure.\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1446,
                            "end": 1516,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1447,
                                "end": 1452,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>casted from anonymous object</p>\n",
                            "typeExpression": {
                                "pos": 1453,
                                "end": 1463,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 1454,
                                    "end": 1462,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 177,
                                    "typeName": {
                                        "pos": 1454,
                                        "end": 1462,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "TargetId"
                                    }
                                }
                            },
                            "name": {
                                "pos": 1464,
                                "end": 1481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "targetDescription"
                            },
                            "isNameFirst": false,
                            "isBracketed": false
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AgentNetwork>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendAndSaveConfiguration",
                    "args": [
                        {
                            "name": "configuration",
                            "type": "NetworkConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "configuration",
                            "type": "NetworkConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { NetworkConfiguration, AgentNetwork, AgentGraphe, Agent, TargetId } from '@model';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AgentNetworkService {\n\n    constructor(private http: HttpClient) { }\n\n    sendAndSaveConfiguration(configuration: NetworkConfiguration): Observable<Object> {\n        return this.http.post(environment.backend + '/api/v1/agentnetwork/configuration', configuration);\n    }\n\n    getDescription(): Observable<AgentNetwork> {\n        return this.http.get(environment.backend + '/api/v1/description')\n            .pipe(map((res: any) => new AgentNetwork(\n                new AgentGraphe(res.agentsGraph.agents.map(this.buildAgent)),\n                res.networkConfiguration as NetworkConfiguration)\n            ));\n    }\n\n    /**\n     * Build a real {@link Agent} object based on equivalent anonymous structure.\n     * @param {Agent} agentDescription casted from anonymous object\n     */\n    private buildAgent = (agentDescription: Agent) => {\n        return new Agent(agentDescription.info, agentDescription.reachableAgents, agentDescription.reachableTargets.map(this.buildTarget));\n    }\n\n    /**\n     * Build a real {@link TargetId} object based on equivalent anonymous structure.\n     * @param {TargetId} targetDescription casted from anonymous object\n     */\n    private buildTarget = (targetDescription: TargetId) => {\n        return new TargetId(targetDescription.name);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AlertService",
            "id": "injectable-AlertService-1dd4f36de09d38227d003d59ab3e8bbe555d4901bf4261f562eeb4173da05e0eda0497667706958bf434c7e2aca3e98686bf198a8ae1a25ef61e97fbc2481af4",
            "file": "src/app/shared/alert.service.ts",
            "properties": [
                {
                    "name": "errorTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "infoTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "successTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "warningTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertService {\n\n  private successTitle: string = '';\n  private infoTitle: string = '';\n  private errorTitle: string = '';\n  private warningTitle: string = '';\n\n  constructor(\n    private toastr: ToastrService,\n    private translateService: TranslateService\n  ) {\n    this.initTranslation();\n  }\n\n  success(msg: string, config = {}) {\n    this.toastr.success(msg, this.successTitle, config);\n  }\n\n  info(msg: string, config = {}) {\n    this.toastr.info(msg, this.infoTitle, config);\n  }\n\n  error(msg: string, config = {}) {\n    this.toastr.error(msg, this.errorTitle, config);\n  }\n\n  warning(msg: string, config = {}) {\n    this.toastr.warning(msg, this.warningTitle, config);\n  }\n\n  private initTranslation() {\n    this.getTranslation();\n    this.translateService.onLangChange.subscribe(() => {\n        this.getTranslation();\n    });\n  }\n\n  private getTranslation() {\n    this.translateService.get('alert.success').subscribe((res: string) => {\n        this.successTitle = res;\n    });\n    this.translateService.get('alert.info').subscribe((res: string) => {\n        this.infoTitle = res;\n    });\n    this.translateService.get('alert.error').subscribe((res: string) => {\n        this.errorTitle = res;\n    });\n    this.translateService.get('alert.warning').subscribe((res: string) => {\n        this.warningTitle = res;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BackupsService",
            "id": "injectable-BackupsService-7012002cb4473bed8de1d8d940e997dc884878ec5f4de1e24cdf9889f374836c71d72f02ba437219141255efd94111322c7a3ec98a0162c1057f170c0b800b82",
            "file": "src/app/core/services/backups.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/v1/backups'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Backup>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Backup>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mapToBackup",
                    "args": [
                        {
                            "name": "dto",
                            "type": "BackupDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Backup",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "BackupDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToBackups",
                    "args": [
                        {
                            "name": "dtos",
                            "type": "BackupDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Backup[]",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dtos",
                            "type": "BackupDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "backup",
                            "type": "BackupDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<String>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "BackupDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Backup } from '@core/model/backups.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackupsService {\n\n    private url = '/api/v1/backups';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public list(): Observable<Array<Backup>> {\n        return this.http.get<Array<BackupDto>>(environment.backend + this.url).pipe(\n            map(dtos => this.mapToBackups(dtos))\n        );\n    }\n\n    public get(backup: Backup): Observable<Backup> {\n        return this.http.get<BackupDto>(\n            environment.backend + this.url + `/${backup.id()}`).pipe(\n            map(dto => this.mapToBackup(dto))\n        );\n    }\n\n    public delete(backup: Backup): Observable<void> {\n        return this.http.delete(environment.backend + this.url + `/${backup.id()}`)\n            .pipe(map(() => {}));\n    }\n\n    public download(backup: Backup): Observable<any> {\n        const options: any = {\n            responseType: 'arraybuffer'\n        };\n        return this.http.get(environment.backend + this.url + `/${backup.id()}` + '/download', options);\n    }\n\n    public save(backup: BackupDto): Observable<String> {\n        return this.http.post(environment.backend + this.url, backup, {responseType: 'text'});\n    }\n\n    private mapToBackup(dto: BackupDto): Backup {\n        return new Backup(dto.homePage, dto.agentsNetwork, dto.environments, dto.components, dto.globalVars, dto.jiraLinks, dto.time);\n    }\n\n    private mapToBackups(dtos: BackupDto[]): Backup[] {\n        return dtos.map(dto => this.mapToBackup(dto));\n    }\n}\n\nexport class BackupDto {\n    constructor(\n        public homePage: boolean,\n        public agentsNetwork: boolean,\n        public environments: boolean,\n        public components: boolean,\n        public globalVars: boolean,\n        public jiraLinks: boolean,\n        public time?: Date) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CampaignSchedulingService",
            "id": "injectable-CampaignSchedulingService-401780118bd4a460ff00aa7dc2b2b7728acbe8f13ba2431653cdb25b8da3e05c3e3d700f86f3277ab3893eb53767542d372693a7cec335b24f745b1f013fec8a",
            "file": "src/app/core/services/campaign-scheduling.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/ui/campaign/v1/scheduling'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "campaignScheduling",
                            "type": "CampaignScheduling",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CampaignScheduling>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignScheduling",
                            "type": "CampaignScheduling",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<CampaignScheduling>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { CampaignScheduling } from '@core/model/campaign/campaign-scheduling.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CampaignSchedulingService {\n\n    private resourceUrl = '/api/ui/campaign/v1/scheduling';\n\n    constructor(private http: HttpClient) { }\n\n\n    findAll(): Observable<Array<CampaignScheduling>> {\n        return this.http.get<Array<CampaignScheduling>>(environment.backend + this.resourceUrl).pipe(map((res: Array<CampaignScheduling>) => {\n            //res.sort((a, b) => a.executionScheduled < b.executionScheduled));\n            return res;\n        }));\n    }\n\n    create(campaignScheduling: CampaignScheduling): Observable<CampaignScheduling> {\n        return this.http.post<CampaignScheduling>(environment.backend + this.resourceUrl, campaignScheduling);\n    }\n\n    delete(id: number): Observable<Object> {\n        return this.http.delete(environment.backend + `${this.resourceUrl}/${id}`);\n    }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CampaignService",
            "id": "injectable-CampaignService-5c049502bc8449234f22696699c7aa30c129cf1270c2daf54c627ba1e336974664de13beded3b249cd4d43b87ce190a59fd53700819db91ff53a9a15f26705f7",
            "file": "src/app/core/services/campaign.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/ui/campaign/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ressourceUrlExecution",
                    "defaultValue": "'/api/ui/campaign/execution/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convert",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Campaign",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Campaign>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeCampaign",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CampaignExecutionReport>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "existRunningCampaignReport",
                    "args": [
                        {
                            "name": "lastCampaignReports",
                            "type": "Array<CampaignExecutionReport>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "lastCampaignReports",
                            "type": "Array<CampaignExecutionReport>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Campaign>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllCampaigns",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Campaign>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findAllCampaignsForScenario",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Campaign>>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllScenarios",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<ScenarioIndex>>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findLastCampaignReports",
                    "args": [
                        {
                            "name": "nbReports",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CampaignExecutionReport>>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nbReports",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replayFailedScenario",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopExecution",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Campaign>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport { Campaign, CampaignExecutionReport, ScenarioIndex } from '@model';\nimport { HttpClient } from '@angular/common/http';\nimport { distinct } from '@shared/tools';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CampaignService {\n\n    private resourceUrl = '/api/ui/campaign/v1';\n    private ressourceUrlExecution = '/api/ui/campaign/execution/v1';\n\n    constructor(private http: HttpClient) { }\n\n    public static existRunningCampaignReport(lastCampaignReports: Array<CampaignExecutionReport>): boolean {\n        return lastCampaignReports && distinct(lastCampaignReports.map(report => report.status)).includes('RUNNING');\n    }\n\n    findAllCampaigns(): Observable<Array<Campaign>> {\n        return this.http.get<Array<Campaign>>(environment.backend + this.resourceUrl).pipe(map((res: Array<Campaign>) => {\n            res.sort((a, b) => a.title.localeCompare(b.title));\n            return res;\n        }));\n    }\n\n    findLastCampaignReports(nbReports: number = 10): Observable<Array<CampaignExecutionReport>> {\n        return this.http.get<Array<CampaignExecutionReport>>(environment.backend + this.resourceUrl + `/lastexecutions/${nbReports}`);\n    }\n\n    findAllScenarios(id: number): Observable<Array<ScenarioIndex>> {\n        return this.http.get<Array<ScenarioIndex>>(environment.backend + this.resourceUrl + `/${id}/scenarios`)\n        .pipe(map((res: Array<any>) => {\n            return res.map(s => new ScenarioIndex(\n                s.metadata.id,\n                s.metadata.title,\n                s.metadata.description,\n                s.metadata.repositorySource,\n                s.metadata.creationDate,\n                s.metadata.tags,\n                s.metadata.executions\n            ));\n        }));\n    }\n\n    findAllCampaignsForScenario(id: number): Observable<Array<Campaign>> {\n        return this.http.get<Array<Campaign>>(environment.backend + this.resourceUrl + `/scenario/${id}`)\n            .pipe(map((res: Array<Campaign>) => {\n                return res;\n            }));\n    }\n\n    find(id: number): Observable<Campaign> {\n        return this.http.get<Campaign>(environment.backend + `${this.resourceUrl}/${id}`);\n    }\n\n    create(campaign: Campaign): Observable<Campaign> {\n        const copy = this.convert(campaign);\n        return this.http.post<Campaign>(environment.backend + this.resourceUrl, copy);\n    }\n\n    delete(id: number): Observable<Object> {\n        return this.http.delete(environment.backend + `${this.resourceUrl}/${id}`);\n    }\n\n    update(campaign: Campaign): Observable<Campaign> {\n        const copy = this.convert(campaign);\n        return this.http.put<Campaign>(environment.backend + this.resourceUrl, copy);\n    }\n\n    executeCampaign(campaignId: number, env: string): Observable<CampaignExecutionReport> {\n        return this.http.get<CampaignExecutionReport>(environment.backend + `${this.ressourceUrlExecution}/byID/${campaignId}/${env}`);\n    }\n\n    stopExecution(campaignId: number, executionId: number): Observable<void> {\n        return this.http.post(environment.backend +\n            `${this.ressourceUrlExecution}/${executionId}/stop`, {}).pipe(map((res: Response) => {\n        }));\n    }\n\n    replayFailedScenario(executionId: number): Observable<Object> {\n        return this.http.post<CampaignExecutionReport>(environment.backend + `${this.ressourceUrlExecution}/replay/${executionId}`, null);\n    }\n\n    private convert(campaign: Campaign): Campaign {\n        delete campaign.campaignExecutionReports;\n        return Object.assign({}, campaign);\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CanDeactivatePage",
            "id": "injectable-CanDeactivatePage-2d60881eda427b7ee49a0875a40958916ef7c08ecc2f4a6da2cbfff70c6890a5de815a68cdac6e7eada103e6fdd125970dbd4bb1737cc7d7ffbe001b9b986af2",
            "file": "src/app/core/guards/page.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canDeactivatePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "unloadNotification",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HostListener, Injectable } from '@angular/core';\n\n@Injectable()\nexport abstract class CanDeactivatePage {\n  abstract canDeactivatePage(): boolean;\n\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (!this.canDeactivatePage()) {\n      $event.returnValue = true;\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ComponentService",
            "id": "injectable-ComponentService-b3287a18de94c57dde2ff9099f84aa953b54f56e71f74ced4cd2f61a9cf99bb8c284b5a3c7c41bc28e9b83a207e996ee76c32b3eda7c59ee35d43f1c1373e22e",
            "file": "src/app/core/services/component.service.ts",
            "properties": [
                {
                    "name": "componentUrl",
                    "defaultValue": "'/api/scenario/component-edition'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/task/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stepExecutionUrl",
                    "defaultValue": "'/api/ui/component/execution/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stepUrl",
                    "defaultValue": "'/api/steps/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<Task>>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteComponentTestCase",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<ComponentTask>>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findAllTasks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Task>>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findComponentTestCase",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioComponent>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findComponentTestCaseExecutableParameters",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<KeyValue>>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findComponentTestCaseWithoutDeserializeImpl",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioComponent>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findParents",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapComponentTaskToDto",
                    "args": [
                        {
                            "name": "componentTask",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentTaskDto",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentTask",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapJsonToScenarioComponent",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "withDeserializeImplementation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioComponent",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withDeserializeImplementation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapScenarioComponentToDto",
                    "args": [
                        {
                            "name": "scenarioComponent",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCaseComponentDto",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioComponent",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToComponentTask",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "withDeserializeImplementation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentTask",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withDeserializeImplementation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToComponentTaskDto",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentTaskDto",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveComponentTestCase",
                    "args": [
                        {
                            "name": "scenarioComponent",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioComponent",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, publishReplay, refCount } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport {\n    ComponentTask,\n    Implementation,\n    InputTask,\n    KeyValue,\n    ScenarioComponent,\n    Strategy,\n    Task\n} from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComponentService {\n\n    private resourceUrl = '/api/task/v1';\n    private stepUrl = '/api/steps/v1';\n    private componentUrl = '/api/scenario/component-edition';\n    private stepExecutionUrl = '/api/ui/component/execution/v1';\n\n    private tasks: Observable<Array<Task>>;\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTasks(): Observable<Array<Task>> {\n        if (!this.tasks) {\n            this.tasks = this.httpClient.get<Array<Task>>(environment.backend + this.resourceUrl)\n                .pipe(\n                    map((res: Array<Task>) => {\n                        res = res.map(t => new Task(\n                            t.identifier,\n                            t.inputs.map(ti => new InputTask(ti.name, ti.type)),\n                            t.target\n                        ));\n                        res.sort((a, b) => a.identifier.localeCompare(b.identifier));\n                        return res;\n                    }),\n                    publishReplay(1),\n                    refCount()\n                );\n        }\n        return this.tasks;\n    }\n\n    findAllComponent(): Observable<Array<ComponentTask>> {\n        return this.httpClient.get<Array<ComponentTask>>(environment.backend + this.stepUrl + '/all')\n            .pipe(map((res: Array<ComponentTask>) => {\n                return res.map(c => this.mapToComponentTask(c, true));\n            }));\n    }\n\n    save(component: ComponentTask): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.stepUrl,\n            this.mapToComponentTaskDto(component), {responseType: 'text'}\n        );\n    }\n\n    delete(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + this.stepUrl + `/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    execute(component: ComponentTask, env: string): Observable<Object> {\n        return this.httpClient.post(environment.backend + `${this.stepExecutionUrl}/${component.id}/${env}`, '')\n            .pipe(map((res: Object) => {\n                return res;\n            }));\n    }\n\n    saveComponentTestCase(scenarioComponent: ScenarioComponent): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.componentUrl,\n            this.mapScenarioComponentToDto(scenarioComponent), {responseType: 'text'}\n        );\n    }\n\n    findComponentTestCase(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, true))\n        );\n    }\n\n    findComponentTestCaseExecutableParameters(id: string): Observable<Array<KeyValue>> {\n        return this.httpClient.get<Array<KeyValue>>(environment.backend + `${this.componentUrl}/${id}/executable/parameters`);\n    }\n\n    findComponentTestCaseWithoutDeserializeImpl(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}/executable`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, false))\n        );\n    }\n\n    deleteComponentTestCase(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + `${this.componentUrl}/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    findParents(id: string): Observable<any> {\n        return this.httpClient.get(environment.backend + `${this.stepUrl}/${id}/parents`);\n    }\n\n    private mapScenarioComponentToDto(scenarioComponent: ScenarioComponent): TestCaseComponentDto {\n        return new TestCaseComponentDto(scenarioComponent.id,\n            scenarioComponent.title,\n            scenarioComponent.description,\n            scenarioComponent.creationDate,\n            scenarioComponent.updateDate,\n            scenarioComponent.version,\n            scenarioComponent.author,\n            new ScenarioComponentDto(\n                scenarioComponent.componentSteps.map((componentTask: ComponentTask) => this.mapComponentTaskToDto(componentTask)),\n                scenarioComponent.parameters\n            ),\n            scenarioComponent.computedParameters,\n            scenarioComponent.tags,\n            scenarioComponent.datasetId\n        );\n    }\n\n    private mapComponentTaskToDto(componentTask: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            componentTask.id,\n            componentTask.name,\n            null,\n            null,\n            [],\n            componentTask.parameters,\n            componentTask.strategy,\n            componentTask.computedParameters);\n    }\n\n    private mapJsonToScenarioComponent(jsonObject: any, withDeserializeImplementation: boolean): ScenarioComponent {\n        return new ScenarioComponent(\n            jsonObject.id,\n            jsonObject.title,\n            jsonObject.description,\n            jsonObject.creationDate,\n            jsonObject.updateDate,\n            jsonObject.version,\n            jsonObject.author,\n            jsonObject.scenario.componentSteps.map((json: any) => this.mapToComponentTask(json, withDeserializeImplementation)),\n            jsonObject.scenario.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.datasetId\n        );\n    }\n\n    private mapToComponentTask(jsonObject: any, withDeserializeImplementation: boolean): ComponentTask {\n        let impl = Implementation.deserialize(JSON.parse(jsonObject.task));\n\n        if (jsonObject.task && !withDeserializeImplementation) {\n            impl =  JSON.parse(jsonObject.task);\n        }\n\n        return new ComponentTask(\n            jsonObject.name,\n            impl,\n            jsonObject.steps.map(c => this.mapToComponentTask(c, withDeserializeImplementation)),\n            jsonObject.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.strategy != null ? new Strategy(jsonObject.strategy.type, jsonObject.strategy.parameters) : null,\n            jsonObject.id\n        );\n\n    }\n\n    private mapToComponentTaskDto(component: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            component.id,\n            component.name,\n            null,\n            component.implementation != null ? JSON.stringify(component.implementation) : null,\n            component.children.map(c => this.mapToComponentTaskDto(c)),\n            component.parameters,\n            component.strategy,\n            component.computedParameters,\n            component.tags\n        );\n    }\n}\n\nexport class TestCaseComponentDto {\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public scenario: ScenarioComponentDto = new ScenarioComponentDto(),\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<string> = [],\n        public datasetId: string = null) {\n    }\n}\n\nexport class ScenarioComponentDto {\n    constructor(\n        public componentSteps: Array<ComponentTaskDto> = [],\n        public parameters: Array<KeyValue> = []) {\n    }\n}\n\nexport class ComponentTaskDto {\n    constructor(\n        public id: string,\n        public name: string,\n        public usage: string,\n        public task: string,\n        public steps: Array<ComponentTaskDto>,\n        public parameters: Array<KeyValue>,\n        public strategy: Strategy,\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = []) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DatabaseAdminService",
            "id": "injectable-DatabaseAdminService-58db01b9dcc6753848fab213c0459a3ec580bdfe8723d6733b427c0c35b36d7f19e28382919a8f50a1ca43f64d991df72c77342e904cbee1b262281ea0e6e098",
            "file": "src/app/core/services/database-admin.service.ts",
            "properties": [
                {
                    "name": "adminUrl",
                    "defaultValue": "'/api/v1/admin/database'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "statement",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "database",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'jdbc'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "statement",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "database",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'jdbc'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "statement",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "database",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'jdbc'"
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        },
                        {
                            "name": "elementPerPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "statement",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "database",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'jdbc'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elementPerPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseAdminService {\n\n  private adminUrl = '/api/v1/admin/database';\n\n  constructor(private http: HttpClient) { }\n\n  execute(statement: string, database: string = 'jdbc'): Observable<Object> {\n    return this.http.post(environment.backend + this.adminUrl + '/execute/' + database, statement);\n  }\n\n  paginate(statement: string, database: string = 'jdbc', pageNumber: number = 1, elementPerPage: number = 5): Observable<Object> {\n    return this.http.post(environment.backend + this.adminUrl + '/paginate/' + database,\n      {\n        pageNumber: pageNumber,\n        elementPerPage: elementPerPage,\n        wrappedRequest: statement\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataSetService",
            "id": "injectable-DataSetService-64081cec601cc331980b7466a61f122e97125be0bbf2f2b66212d597d6fb762df606c63f26772c55240f531d51b245c891e4c2cbeb83492f9874476897095b46",
            "file": "src/app/core/services/dataset.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/v1/datasets'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Dataset>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Dataset>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromDto",
                    "args": [
                        {
                            "name": "dto",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dataset",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Dataset>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport { Dataset, KeyValue } from '@model';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataSetService {\n\n    private resourceUrl = '/api/v1/datasets';\n\n    constructor(private httpClient: HttpClient) { }\n\n    findAll(): Observable<Array<Dataset>> {\n        return this.httpClient.get<Array<Dataset>>(environment.backend + this.resourceUrl)\n            .pipe(map((res: Array<any>) => {\n                res = res.map(dto => new Dataset(\n                    dto.name,\n                    dto.description,\n                    dto.tags,\n                    dto.lastUpdated,\n                    [],\n                    [],\n                    dto.version,\n                    dto.id\n                ));\n\n                return res;\n            }));\n    }\n\n    findById(id: string): Observable<Dataset> {\n        return this.httpClient.get<Dataset>(environment.backend + this.resourceUrl + '/' + id)\n            .pipe(\n                map(dto => this.fromDto(dto))\n            );\n    }\n\n    save(dataset: Dataset): Observable<Dataset> {\n        if (dataset.id && dataset.id.length > 0) {\n            return this.httpClient.put<Dataset>(environment.backend + this.resourceUrl, dataset)\n                .pipe(\n                    map(dto => this.fromDto(dto))\n                );\n        } else {\n            return this.httpClient.post<Dataset>(environment.backend + this.resourceUrl, dataset)\n                .pipe(\n                    map(dto => this.fromDto(dto))\n                );\n        }\n    }\n\n    delete(id: String): Observable<Object> {\n        return this.httpClient.delete(environment.backend + this.resourceUrl + '/' + id);\n    }\n\n    private fromDto(dto: any): Dataset {\n        return new Dataset(\n            dto.name,\n            dto.description,\n            dto.tags,\n            dto.lastUpdated,\n            dto.uniqueValues.map(o => new KeyValue(o.key, o.value)),\n            dto.multipleValues.map(l => l.map(o => new KeyValue(o.key, o.value))),\n            dto.version,\n            dto.id);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EditionService",
            "id": "injectable-EditionService-388ee3aee81c9c9a9c4475db4fe497506d666f4303b0ba6dcb386477dcf5be92cafef21a5d1ea5ece39c3819a9cc6ada87f5866261f9a458d019976d2d3cb68d",
            "file": "src/app/core/services/edition.service.ts",
            "properties": [
                {
                    "name": "resourceTestCaseUrl",
                    "defaultValue": "'/api/v1/editions/testcases'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "editTestCase",
                    "args": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TestCaseEdition>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endTestCaseEdition",
                    "args": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllTestCaseEditions",
                    "args": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<TestCaseEdition>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToTestCaseEdition",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCaseEdition",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToTestCaseEditionDto",
                    "args": [
                        {
                            "name": "testCaseEdition",
                            "type": "TestCaseEdition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCaseEditionDto",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "testCaseEdition",
                            "type": "TestCaseEdition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport { TestCaseEdition } from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EditionService {\n\n    private resourceTestCaseUrl = '/api/v1/editions/testcases';\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTestCaseEditions(testCaseId: string): Observable<Array<TestCaseEdition>> {\n        return this.httpClient.get<Array<TestCaseEdition>>(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`)\n            .pipe(map((res: Array<TestCaseEdition>) => {\n                return res.map(c => this.mapToTestCaseEdition(c));\n            }));\n    }\n\n    editTestCase(testCaseId: string): Observable<TestCaseEdition> {\n        return this.httpClient.post(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`, '')\n        .pipe(map((res: TestCaseEdition) => {\n            return this.mapToTestCaseEdition(res);\n        }));\n    }\n\n    endTestCaseEdition(testCaseId: string): Observable<void> {\n        return this.httpClient.delete(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`)\n            .pipe(map(() => {}));\n    }\n\n    private mapToTestCaseEdition(jsonObject: any): TestCaseEdition {\n        return new TestCaseEdition(\n            jsonObject.testCaseId,\n            jsonObject.testCaseVersion,\n            jsonObject.editionStartDate,\n            jsonObject.editionUser\n        );\n    }\n\n    private mapToTestCaseEditionDto(testCaseEdition: TestCaseEdition): TestCaseEditionDto {\n        return new TestCaseEditionDto(\n            testCaseEdition.testCaseId,\n            testCaseEdition.testCaseVersion,\n            testCaseEdition.editionStartDate,\n            testCaseEdition.editionUser\n        );\n    }\n}\n\nexport class TestCaseEditionDto {\n    constructor(\n        public testCaseId: string,\n        public testCaseVersion: number,\n        public editionStartDate: Date,\n        public editionUser: string) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EnvironmentAdminService",
            "id": "injectable-EnvironmentAdminService-a44dca882ec3dd118747e5139140100e70fe09179856d29523f4484e9e69743886698303c3260a3c0c05c7f01f091061c8ea8cac8c2a105aa45f5eafa2516a4b",
            "file": "src/app/core/services/environment-admin.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/v2/environment'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTarget",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEnvironment",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTarget",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportEnvironment",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Target>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportTarget",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listEnvironments",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<EnvironmentMetadata>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listEnvironmentsNames",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listTargets",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Target>>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "targets",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Target>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "targetsNames",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateEnvironment",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTarget",
                    "args": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { EnvironmentMetadata, Target } from '@model';\nimport { environment as server } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EnvironmentAdminService {\n\n    private baseUrl = '/api/v2/environment';\n\n    constructor(private http: HttpClient) {}\n\n    listEnvironments(): Observable<Array<EnvironmentMetadata>> {\n        return this.http.get<Array<EnvironmentMetadata>>(server.backend + this.baseUrl).pipe(map((res: Array<EnvironmentMetadata>) => {\n            return res.sort((t1, t2) => t1.name.toUpperCase() > t2.name.toUpperCase() ? 1 : 0);\n        }));\n    }\n\n    listEnvironmentsNames(): Observable<Array<string>> {\n        return this.http.get<Array<string>>(server.backend + this.baseUrl + '/names');\n    }\n\n    exportEnvironment(environmentName: string): Observable<Array<Target>> {\n        return this.http.get<Array<Target>>(server.backend + this.baseUrl + '/' + environmentName);\n    }\n\n    createEnvironment(environment: EnvironmentMetadata): Observable<Object> {\n        return this.http.post(server.backend + this.baseUrl, environment);\n    }\n\n    deleteEnvironment(environmentName: string): Observable<Object> {\n        return this.http.delete(server.backend + this.baseUrl + '/' + environmentName);\n    }\n\n    updateEnvironment(environmentName: string, environment: EnvironmentMetadata): Observable<Object> {\n        return this.http.put(server.backend + this.baseUrl + '/' + environmentName, environment);\n    }\n\n    listTargets(environmentName: string): Observable<Array<Target>> {\n        return this.http.get<Array<Target>>(server.backend + this.baseUrl + '/' + environmentName + '/target');\n    }\n\n    targets(): Observable<Array<Target>> {\n        return this.http.get<Array<Target>>(server.backend + this.baseUrl + '/target');\n    }\n\n    targetsNames(): Observable<Array<string>> {\n        return this.http.get<Array<string>>(server.backend + this.baseUrl + '/target/names');\n    }\n\n    updateTarget(environmentName: string, targetName: string, target: Target): Observable<Object> {\n        return this.http.put(server.backend + this.baseUrl + '/' + environmentName + '/target/' + targetName, target);\n    }\n\n    addTarget(environmentName: string, target: Target): Observable<Object> {\n        return this.http.post(server.backend + this.baseUrl + '/' + environmentName + '/target', target);\n    }\n\n    deleteTarget(environmentName: string, targetName: string): Observable<Object> {\n        return this.http.delete(server.backend + this.baseUrl + '/' + environmentName + '/target/' + targetName);\n    }\n\n    exportTarget(environmentName: string, targetName: string): Observable<Object> {\n        return this.http.get(server.backend + this.baseUrl + '/' + environmentName + '/target/' + targetName);\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventManagerService",
            "id": "injectable-EventManagerService-4f074be7c1b4f910814aba54c88788cb9abdeaffd26480a91c10622029c42d8f99a7fda80d40e253597d7d525fc42be0a883ad6eae8fda60dd120553dc2fa1ed",
            "file": "src/app/shared/event-manager.service.ts",
            "properties": [
                {
                    "name": "observable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "broadcast",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to broadcast the event to observer\n",
                    "description": "<p>Method to broadcast the event to observer</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [
                        {
                            "name": "subscriber",
                            "type": "Subscription",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to unsubscribe the subscription\n",
                    "description": "<p>Method to unsubscribe the subscription</p>\n",
                    "jsdoctags": [
                        {
                            "name": "subscriber",
                            "type": "Subscription",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to subscribe to an event with callback\n",
                    "description": "<p>Method to subscribe to an event with callback</p>\n",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, Observer, Subscription } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, share } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EventManagerService {\n\n    observable: Observable<any>;\n    observer: Observer<any>;\n\n    constructor() {\n        this.observable = Observable.create((observer: Observer<any>) => {\n            this.observer = observer;\n        }).pipe(share());\n    }\n\n    /**\n     * Method to broadcast the event to observer\n     */\n    broadcast(event) {\n        if (this.observer != null) {\n            this.observer.next(event);\n        }\n    }\n\n    /**\n     * Method to subscribe to an event with callback\n     */\n    subscribe(eventName, callback) {\n        return this.observable.pipe(filter((event) => {\n            return event.name === eventName;\n        })).subscribe(callback);\n    }\n\n    /**\n     * Method to unsubscribe the subscription\n     */\n    destroy(subscriber: Subscription) {\n        subscriber.unsubscribe();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "GitBackupService",
            "id": "injectable-GitBackupService-a9a32c7d0ed77f858676d3c4d44f88dfa64db9d5c04ba58b02429025b557c9bc4afa01eb0df528f82587d8a44201537540ccc11ba0313f3d5519c917b8a09ff4",
            "file": "src/app/core/services/git-backup.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/v1/backups/git/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "remoteConfig",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "remoteConfig",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "backupTo",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importFrom",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<GitRemoteConfig>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "remoteConfig",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "remoteConfig",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { GitRemoteConfig } from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GitBackupService {\n\n    private url = '/api/v1/backups/git/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public loadConfig(): Observable<Array<GitRemoteConfig>> {\n        return this.http.get<Array<GitRemoteConfig>>(environment.backend + this.url);\n    }\n\n    public add(remoteConfig: GitRemoteConfig): Observable<string> {\n        return this.http.post<string>(environment.backend + this.url, remoteConfig);\n    }\n\n    public backupTo(remote: GitRemoteConfig): Observable<string> {\n        return this.http.get<string>(environment.backend + this.url + remote.name + '/backup');\n    }\n\n    public importFrom(remote: GitRemoteConfig) {\n        return this.http.get<string>(environment.backend + this.url + remote.name + '/import');\n    }\n\n    public remove(remoteConfig: GitRemoteConfig): Observable<string> {\n        return this.http.delete<string>(environment.backend + this.url + remoteConfig.name);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalVariableService",
            "id": "injectable-GlobalVariableService-345a4c610e8a9f317efbd41eb2458d0e899e4fa3a26f36168395ca31f5dddae99672c73952886c3185041499be0697bdcbc8b9991ed3aeb094f060b38cddc446",
            "file": "src/app/core/services/global-var.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/ui/globalvar/v1/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GlobalVariableService {\n\n    private url = '/api/ui/globalvar/v1/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public get(fileName: string): Observable<string> {\n        return this.http.get<Object>(environment.backend + this.url + fileName).pipe(map((res: Object) => {\n            return res['message'];\n        }));\n    }\n\n    public save(fileName: string, content: string): Observable<Object> {\n        return this.http.post(environment.backend + this.url + fileName, {message: content}, {responseType: 'text'});\n    }\n\n    public list() {\n        return this.http.get<Object>(environment.backend + this.url).pipe(map((res: Object) => {\n            return res;\n        }));\n    }\n\n    delete(fileName: string) {\n        return this.http.delete<Object>(environment.backend + this.url + fileName);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HighLightJService",
            "id": "injectable-HighLightJService-22a499cabf14eff600fa19d81947a5786881dc590de6ca479110aaf0fcfdf34942a54e042637b993d188b63e64a9656a8e5fe204ab55aa5cf986a1c312810f41",
            "file": "src/app/shared/highlight/highlight.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "highlightElement",
                    "args": [
                        {
                            "name": "baseElement",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "codeSelectorAll",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'pre code'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "baseElement",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "codeSelectorAll",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'pre code'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport hljs from 'highlight.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighLightJService {\n\n  constructor() {\n  }\n\n  highlightElement(baseElement: Element, codeSelectorAll: string = 'pre code') {\n      const codes = baseElement.querySelectorAll(codeSelectorAll);\n      //TODO https://www.npmjs.com/package/ngx-highlightjs codes.forEach(code => hljs.highlightBlock(code));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "HjsonParserService",
            "id": "injectable-HjsonParserService-ec6cb9abb829f191e56d95449995639ef0826e603bf1cb1da2f1789cb25a2f67168095f8a3011f91dcecdd628c8c764a3b4bf445325cf619c023b4e416387e88",
            "file": "src/app/shared/hjson-parser/hjson-parser.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport * as hjson from 'hjson';\n\n@Injectable()\nexport class HjsonParserService {\n\n    parse(content: string): string {\n        return JSON.stringify(hjson.parse(content));\n    }\n}\n",
            "type": "injectable"
        },
        {
            "name": "HomePageService",
            "id": "injectable-HomePageService-583de4a059eb9d6f3ecba0f1458acaeba0a9e4919b48d8388c485efa9c81276212fcf13bf0ed9e7dc6a6203fb81e8e4c341137bbb3e70508c41dd1ef9a05f620",
            "file": "src/app/core/services/home-page.service.ts",
            "properties": [
                {
                    "name": "homeUrl",
                    "defaultValue": "'/home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/homepage/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleErrorObservable",
                    "args": [
                        {
                            "name": "error",
                            "type": "Response | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Response | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadHomePage",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<HomePage>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "homepage",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HomePage>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "homepage",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventManagerService } from '@shared/event-manager.service';\n\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HomePage } from '@model';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HomePageService {\n    private resourceUrl = '/api/homepage/v1';\n    private homeUrl = '/home';\n\n    private isLoaded = false;\n\n    constructor(private http: HttpClient, private eventManager: EventManagerService) { }\n\n    loadHomePage(): Observable<HomePage> {\n        this.isLoaded = true;\n        return this.http.get<HomePage>(environment.backend + this.homeUrl)\n            .pipe(map((res: HomePage) => {\n                return new HomePage(res.content);\n            }))\n            .pipe(catchError(this.handleErrorObservable));\n    }\n\n    save(homepage: HomePage): Observable<HomePage> {\n        return this.http.post<HomePage>(environment.backend + this.resourceUrl, homepage)\n            .pipe(map((res: HomePage) => {\n                const homePage: HomePage = new HomePage(res.content);\n                this.eventManager.broadcast({ name: 'homePageModified', content: homePage });\n                return homePage;\n            }))\n            .pipe(catchError(this.handleErrorObservable));\n    }\n\n    private handleErrorObservable(error: Response | any) {\n        console.error(error.message || error);\n        return throwError(error.message || error);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "JiraPluginConfigurationService",
            "id": "injectable-JiraPluginConfigurationService-156552f9820f24778a9f54776756cc742a0d1ee88bd759f7565ece667f583bbe00bda0e26f36ab9289218b41dd21adea26975a0f81e11ff37fd432d8c5d1a4c8",
            "file": "src/app/core/services/jira-plugin-configuration.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/ui/jira/v1/configuration'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<JiraPluginConfiguration>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "configuration",
                            "type": "JiraPluginConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<String>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "configuration",
                            "type": "JiraPluginConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@env/environment';\nimport { JiraPluginConfiguration } from '@core/model/jira-plugin-configuration.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JiraPluginConfigurationService {\n\n    private url = '/api/ui/jira/v1/configuration';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public get(): Observable<JiraPluginConfiguration> {\n        return this.http.get<JiraPluginConfiguration>(environment.backend + this.url);\n    }\n\n    public getUrl(): Observable<string> {\n        return this.http.get(environment.backend + this.url + '/url', {responseType: 'text'});\n    }\n\n    public save(configuration: JiraPluginConfiguration): Observable<String> {\n        return this.http.post(environment.backend + this.url, configuration, {responseType: 'text'});\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "JiraPluginService",
            "id": "injectable-JiraPluginService-75e47023602e101ba6247921f40ee2bf676e1209bc61814e4f53a65f997b9d8285aa1d0ba8637da0893e19c88b5cfc8ed36fdca6a5efb5b31d1e872d080f5b7e",
            "file": "src/app/core/services/jira-plugin.service.ts",
            "properties": [
                {
                    "name": "campaignUrl",
                    "defaultValue": "this.url + 'campaign'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarioUrl",
                    "defaultValue": "this.url + 'scenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "testExecUrl",
                    "defaultValue": "this.url + 'testexec'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "'/api/ui/jira/v1/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "findByCampaignId",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findByScenarioId",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findCampaigns",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Map<string, string>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "findScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Map<string, string>>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "findTestExecScenarios",
                    "args": [
                        {
                            "name": "testExecId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JiraScenario[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "testExecId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeForCampaign",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeForScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveForCampaign",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "jiraId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JiraScenario>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "jiraId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveForScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "jiraId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<JiraScenario>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "jiraId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScenarioStatus",
                    "args": [
                        {
                            "name": "testExecId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newStatus",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "testExecId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStatus",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JiraScenario } from '@model';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class JiraPluginService {\n\n    private url = '/api/ui/jira/v1/';\n    private scenarioUrl = this.url + 'scenario';\n    private campaignUrl = this.url + 'campaign';\n    private testExecUrl = this.url + 'testexec';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public findScenarios(): Observable<Map<string, string>> {\n        return this.http.get<any>(environment.backend + this.scenarioUrl )\n        .pipe(map((res: Object) => new Map(Object.entries(res))));\n    }\n\n    public findCampaigns(): Observable<Map<string, string>> {\n        return this.http.get<any>(environment.backend + this.campaignUrl )\n        .pipe(map((res: Object) => new Map(Object.entries(res))));\n    }\n\n    public findTestExecScenarios(testExecId: string): Observable<JiraScenario[]> {\n        return this.http.get<any>(environment.backend + this.testExecUrl + '/' + testExecId)\n        .pipe(map((res: JiraScenario[]) => res));\n    }\n\n    public findByScenarioId(scenarioId: string): Observable<string> {\n        return this.http.get<JiraScenario>(environment.backend + this.scenarioUrl + '/' + scenarioId)\n            .pipe(map((jiraDto: JiraScenario) => {\n                return jiraDto.id;\n            }));\n    }\n\n    public saveForScenario(scenarioId: string, jiraId: string): Observable<JiraScenario> {\n        return this.http.post<JiraScenario>(environment.backend + this.scenarioUrl, new JiraScenario(jiraId, scenarioId));\n    }\n\n    public removeForScenario(scenarioId: string) {\n        return this.http.delete<HttpResponse<any>>(environment.backend + this.scenarioUrl  + '/' + scenarioId);\n    }\n\n    public findByCampaignId(campaignId: number): Observable<string> {\n        return this.http.get<JiraScenario>(environment.backend + this.campaignUrl + '/' + campaignId)\n            .pipe(map((jiraDto: JiraScenario) => {\n                return jiraDto.id;\n            }));\n    }\n\n    public saveForCampaign(campaignId: number, jiraId: string): Observable<JiraScenario> {\n        return this.http.post<JiraScenario>(environment.backend + this.campaignUrl, new JiraScenario(jiraId, campaignId.toString()));\n    }\n\n    public removeForCampaign(campaignId: number) {\n        return this.http.delete<HttpResponse<any>>(environment.backend + this.campaignUrl + '/' + campaignId);\n    }\n\n    public updateScenarioStatus(testExecId: string, scenarioId: string, newStatus: string) {\n        return this.http.put<HttpResponse<any>>(environment.backend + this.testExecUrl + '/' + testExecId,\n                                                new JiraScenario('', scenarioId, newStatus));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LinkifierService",
            "id": "injectable-LinkifierService-ab2687920b1ac1e4ab771555353873fbacfe660a716df4f820456f64c4b64e07f485ae3ecadc713acaa38539e1fdbb9ab72bd64a3dbb6520050b4c9d772d9758",
            "file": "src/app/core/services/linkifier.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/v1/ui/plugins/linkifier/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<String>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadLinkifiers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<Linkifier>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<String>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSessionStorage",
                    "args": [
                        {
                            "name": "linkifiers",
                            "type": "Array<Linkifier>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<Linkifier>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "linkifiers",
                            "type": "Array<Linkifier>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { map } from 'rxjs/operators';\nimport { Linkifier } from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LinkifierService {\n\n    private url = '/api/v1/ui/plugins/linkifier/';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public loadLinkifiers(): Observable<Array<Linkifier>> {\n        return this.http.get<Array<Linkifier>>(environment.backend + this.url)\n            .pipe(\n                map(x => LinkifierService.updateSessionStorage(x))\n            );\n    }\n\n    private static updateSessionStorage(linkifiers: Array<Linkifier>): Array<Linkifier> {\n        sessionStorage.setItem('linkifiers', JSON.stringify(linkifiers));\n        return linkifiers;\n    }\n\n    public add(linkifier: Linkifier): Observable<String> {\n        return this.http.post(environment.backend + this.url, linkifier, {responseType: 'text'});\n    }\n\n    public remove(linkifier: Linkifier): Observable<String> {\n        return this.http.delete(environment.backend + this.url + linkifier.id, {responseType: 'text'});\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-b44c545bf9b72ed9071305c254cf92ce363ae9bd7c35b93ba11211bb61817272e4b252f075eb437038721c14373c7ca295154e3d9c25262e0b4db79885a32bb2",
            "file": "src/app/core/services/login.service.ts",
            "properties": [
                {
                    "name": "loginUrl",
                    "defaultValue": "this.url + '/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "NO_USER",
                    "defaultValue": "new User('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "'/api/v1/user'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "new BehaviorSubject(this.NO_USER)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "currentUser",
                    "args": [
                        {
                            "name": "skipInterceptor",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "skipInterceptor",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultForwardUrl",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasAuthorization",
                    "args": [
                        {
                            "name": "authorization",
                            "type": "Array<Authorization> | Authorization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "u",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authorization",
                            "type": "Array<Authorization> | Authorization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "u",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLogin",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoginUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateAfterLogin",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, BehaviorSubject} from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { User, Authorization } from '@model';\nimport { intersection, contains, isNullOrBlankString } from '@shared/tools';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private url = '/api/v1/user';\n  private loginUrl = this.url + '/login';\n  private NO_USER = new User('');\n  private user$: BehaviorSubject<User> = new BehaviorSubject(this.NO_USER);\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  initLogin(url?: string) {\n    this.currentUser(true).pipe(\n        tap(user => this.setUser(user))\n    ).subscribe(\n        () => this.navigateAfterLogin(url),\n        () => {\n            const queryParams: Object = isNullOrBlankString(url) ? {} : { queryParams: { url: url } };\n            this.router.navigate(['login'], queryParams);\n        }\n    );\n  }\n\n  login(username: string, password: string): Observable<User> {\n\n    if (isNullOrBlankString(username) && isNullOrBlankString(password)) {\n      return this.currentUser().pipe(\n        tap(user => this.setUser(user))\n      );\n    }\n\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n\n    const options = {\n      headers: new HttpHeaders()\n                .set('Content-Type', 'application/x-www-form-urlencoded')\n                .set('no-intercept-error', '')\n    };\n\n    return this.http.post<User>(environment.backend + this.loginUrl, body.toString(), options)\n      .pipe(\n        tap(user => this.setUser(user))\n      );\n  }\n\n  navigateAfterLogin(url?: string) {\n    if (this.isAuthenticated()) {\n        const user: User = this.user$.getValue();\n        this.router.navigateByUrl(url ? url : this.defaultForwardUrl(user));\n    }\n  }\n\n  logout() {\n    this.http.post(environment.backend + this.url + '/logout', null).pipe(\n        tap(() => this.setUser(this.NO_USER)),\n        delay(500)\n    ).subscribe(\n        () => {\n            this.router.navigateByUrl('/');\n        }\n    );\n  }\n\n  getUser(): Observable<User> {\n    return this.user$;\n  }\n\n  isAuthenticated(): boolean {\n    const user: User = this.user$.getValue();\n    return this.NO_USER !== user;\n  }\n\n  hasAuthorization(authorization: Array<Authorization> | Authorization = [], u: User = null): boolean {\n    const user: User = u || this.user$.getValue();\n    const auth = [].concat(authorization);\n    if (user != this.NO_USER) {\n        return auth.length == 0 || intersection(user.authorizations, auth).length > 0;\n    }\n    return false;\n  }\n\n  isLoginUrl(url: string): boolean {\n    return url.includes(this.loginUrl);\n  }\n\n  private setUser(user: User) {\n    this.user$.next(user);\n  }\n\n  private currentUser(skipInterceptor: boolean = false): Observable<User> {\n    const options = {\n      headers: { 'no-intercept-error': ''}\n    };\n    return this.http.get<User>(environment.backend + this.url, skipInterceptor ? options : {});\n  }\n\n  private defaultForwardUrl(user: User): string {\n    const authorizations = user.authorizations;\n    if (authorizations) {\n        if (contains(authorizations, Authorization.SCENARIO_READ)) return '/scenario';\n        if (contains(authorizations, Authorization.CAMPAIGN_READ)) return '/campaign';\n        if (contains(authorizations, Authorization.COMPONENT_READ)) return '/component';\n        if (contains(authorizations, Authorization.ENVIRONMENT_ACCESS)) return '/environmentAdmin';\n        if (contains(authorizations, Authorization.GLOBAL_VAR_READ)) return '/variable';\n        if (contains(authorizations, Authorization.DATASET_READ)) return '/dataset';\n        if (contains(authorizations, Authorization.ADMIN_ACCESS)) return '/';\n    }\n\n    return '/home';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RolesService",
            "id": "injectable-RolesService-397b068cf72fdbe9c7905c25a8f6d7761af3c14913aef149d9babe0d1312ef611bc72a3eabc7e5e10bc235fe45520605afce0fb0b660f9d6d843e35fe7310797",
            "file": "src/app/core/services/roles.service.ts",
            "properties": [
                {
                    "name": "url",
                    "defaultValue": "'/api/v1/authorizations'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "read",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "roles",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolesService {\n\n  private url = '/api/v1/authorizations';\n\n  constructor(private http: HttpClient) { }\n\n  read(): Observable<Object> {\n    return this.http.get(environment.backend + this.url);\n  }\n\n  save(roles: Object): Observable<Object> {\n    return this.http.post(environment.backend + this.url, roles);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScenarioExecutionService",
            "id": "injectable-ScenarioExecutionService-5a218c326cf73cd06df8629211569ffae150caaff8f153de3446322ffeb983e7f499d2600612c259277d54a68e8451e7ed98d2ba1c6c4834d9aa2520bb146c89",
            "file": "src/app/core/services/scenario-execution.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/ui/scenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildExecutionReport",
                    "args": [
                        {
                            "name": "jsonResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioExecutionReport",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildExecutionReportFromEvent",
                    "args": [
                        {
                            "name": "jsonResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioExecutionReport",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonResponse",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createScenarioExecutionObservable",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioExecutionReport>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeScenarioAsync",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "computedParameters",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "computedParameters",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findExecutionReport",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioExecutionReport>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findScenarioExecutions",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Execution>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeScenarioExecution",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioExecutionReport>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pauseScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resumeScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Execution, ScenarioExecutionReport, KeyValue } from '@model';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ScenarioExecutionService {\n\n    private resourceUrl = '/api/ui/scenario';\n\n    constructor(private http: HttpClient) {\n    }\n\n    findScenarioExecutions(scenarioId: string): Observable<Array<Execution>> {\n        return this.http.get<Array<Execution>>(environment.backend + `${this.resourceUrl}/${scenarioId}/execution/v1`)\n            .pipe(map((res: Array<Execution>) => {\n                return res.map((execution) => Execution.deserialize(execution));\n            }));\n    }\n\n    executeScenario(scenarioId: string): Observable<ScenarioExecutionReport> {\n        return this.http.post<ScenarioExecutionReport>(environment.backend + `${this.resourceUrl}/execution/v1/${scenarioId}`, {})\n            .pipe(map((res: ScenarioExecutionReport) => {\n                return this.buildExecutionReport(res);\n            }));\n    }\n\n    executeScenarioAsync(scenarioId: string, computedParameters: Array<KeyValue> = [], env: string): Observable<string> {\n        return this.http.post<string>(environment.backend + `${this.resourceUrl}/executionasync/v1/${scenarioId}/${env}`, computedParameters);\n    }\n\n    observeScenarioExecution(scenarioId: string, executionId: number): Observable<ScenarioExecutionReport> {\n        return this.createScenarioExecutionObservable(environment.backend +\n            `${this.resourceUrl}/executionasync/v1/${scenarioId}/execution/${executionId}`);\n    }\n\n    findExecutionReport(scenarioId: string, executionId: number): Observable<ScenarioExecutionReport> {\n        return this.http.get<ScenarioExecutionReport>(environment.backend + `${this.resourceUrl}/${scenarioId}/execution/${executionId}/v1`)\n            .pipe(map((res: Object) => {\n                if (res != null && res !== '') {\n                    return this.buildExecutionReport(res);\n                }\n                return null\n            }));\n    }\n\n    stopScenario(scenarioId: string, executionId: number): Observable<void> {\n        return this.http.post(environment.backend +\n            `${this.resourceUrl}/executionasync/v1/${scenarioId}/execution/${executionId}/stop`, {}).pipe(map((res: Response) => {\n            }));\n    }\n\n    pauseScenario(scenarioId: string, executionId: number): Observable<void> {\n        return this.http.post(environment.backend +\n            `${this.resourceUrl}/executionasync/v1/${scenarioId}/execution/${executionId}/pause`, {}).pipe(map((res: Response) => {\n            }));\n    }\n\n    resumeScenario(scenarioId: string, executionId: number): Observable<void> {\n        return this.http.post(environment.backend +\n            `${this.resourceUrl}/executionasync/v1/${scenarioId}/execution/${executionId}/resume`, {}).pipe(map((res: Response) => {\n            }));\n    }\n\n    private createScenarioExecutionObservable(url: string) {\n        return new Observable<ScenarioExecutionReport>(obs => {\n            let es;\n            try {\n                es = new EventSource(url);\n                es.onerror = () => obs.error('Error loading execution');\n                es.addEventListener('partial', (evt: any) => {\n                    obs.next(this.buildExecutionReportFromEvent(JSON.parse(evt.data)));\n                });\n                es.addEventListener('last', (evt: any) => {\n                    obs.next(this.buildExecutionReportFromEvent(JSON.parse(evt.data)));\n                    obs.complete();\n                });\n            } catch (error) {\n                obs.error('Error creating source event');\n            }\n\n            return () => {\n                if (es) {\n                    es.close();\n                }\n            };\n        });\n    }\n\n    private buildExecutionReport(jsonResponse: any): ScenarioExecutionReport {\n        return new ScenarioExecutionReport(\n            jsonResponse.executionId,\n            JSON.parse(jsonResponse.report).report,\n            jsonResponse.environment,\n            jsonResponse.user,\n            jsonResponse.testCaseTitle\n        );\n    }\n\n    private buildExecutionReportFromEvent(jsonResponse: any): ScenarioExecutionReport {\n        return new ScenarioExecutionReport(\n            jsonResponse.executionId,\n            jsonResponse.report,\n            jsonResponse.environment,\n            jsonResponse.user,\n            jsonResponse.scenarioName\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScenarioService",
            "id": "injectable-ScenarioService-ff2fded1a9aa9ea025711fe19009136c9eb2262db4792cf315321279a5f8d70a9d1df9307fd504b935e75cb5b879a688837f01a5579bb38a07c3bf989cedfec8",
            "file": "src/app/core/services/scenario.service.ts",
            "properties": [
                {
                    "name": "resourceUrl",
                    "defaultValue": "'/api/scenario/v2/raw'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resourceUrlV2",
                    "defaultValue": "'/api/scenario/v2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cleanTags",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convert",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCase",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertGwt",
                    "args": [
                        {
                            "name": "gwtTestCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "gwtTestCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createGwtTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOrUpdateGwtTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOrUpdateRawTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRawTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findRawTestCase",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TestCase>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findScenarioMetadata",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScenarioIndex>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<ScenarioIndex>>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findTestCase",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GwtTestCase>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapJsonScenario",
                    "args": [
                        {
                            "name": "res",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "textFilter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<ScenarioIndex>>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textFilter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGwtTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRawTestCase",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { GwtTestCase, ScenarioIndex, TestCase } from '@model';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ScenarioService {\n\n    private resourceUrl = '/api/scenario/v2/raw';\n    private resourceUrlV2 = '/api/scenario/v2';\n\n    private static convert(testCase: TestCase): TestCase {\n        const copy: TestCase = Object.assign({}, testCase);\n        ScenarioService.cleanTags(copy);\n        return copy;\n    }\n\n    private static convertGwt(gwtTestCase: GwtTestCase): any {\n        ScenarioService.cleanTags(gwtTestCase);\n        return gwtTestCase.serialize();\n    }\n\n    private static cleanTags(scenario: any) {\n        if (scenario.tags != null && scenario.tags.length > 0) {\n            scenario.tags = scenario.tags.map((tag) => tag.toLocaleUpperCase().trim())\n                .reduce((filteredTags, tag) => {\n                    if (filteredTags.indexOf(tag) < 0) {\n                        filteredTags.push(tag);\n                    }\n                    return filteredTags;\n                }, []);\n        }\n    }\n\n    constructor(private httpClient: HttpClient) {\n    }\n\n    findRawTestCase(id: string): Observable<TestCase> {\n        return this.httpClient.get(environment.backend + `${this.resourceUrl}/${id}`).pipe(map((res: TestCase) => {\n            return TestCase.fromRaw(res);\n        }));\n    }\n\n    createOrUpdateRawTestCase(testCase: TestCase): Observable<string> {\n        if (testCase.id === undefined) {\n            return this.createRawTestCase(testCase);\n        } else {\n            return this.updateRawTestCase(testCase);\n        }\n    }\n\n    createRawTestCase(testCase: TestCase): Observable<string> {\n        const copy = ScenarioService.convert(testCase);\n        return this.httpClient.post<string>(environment.backend + this.resourceUrl, copy);\n    }\n\n    updateRawTestCase(testCase: TestCase): Observable<string> {\n        const copy = ScenarioService.convert(testCase);\n        // an update should better use PUT :(\n        return this.httpClient.post<string>(environment.backend + this.resourceUrl, copy);\n    }\n\n    findScenarios(): Observable<Array<ScenarioIndex>> {\n        return this.httpClient.get<Array<ScenarioIndex>>(environment.backend + this.resourceUrlV2)\n        .pipe(map((res: Array<any>) => {\n            return this.mapJsonScenario(res);\n        }));\n    }\n\n    findScenarioMetadata(id: string): Observable<ScenarioIndex> {\n        return this.httpClient.get<ScenarioIndex>(environment.backend + `${this.resourceUrlV2}/${id}/metadata`)\n        .pipe(map((res: any) => {\n            return this.mapJsonScenario([res])[0];\n        }));\n    }\n\n    findTestCase(id: string): Observable<GwtTestCase> {\n        return this.httpClient.get<GwtTestCase>(environment.backend + `${this.resourceUrlV2}/${id}`).pipe(map((res: GwtTestCase) => {\n            return GwtTestCase.deserialize(res);\n        }));\n    }\n\n    createOrUpdateGwtTestCase(testCase: GwtTestCase): Observable<string> {\n        if (testCase.id === undefined) {\n            return this.createGwtTestCase(testCase);\n        } else {\n            return this.updateGwtTestCase(testCase);\n        }\n    }\n\n    createGwtTestCase(testCase: GwtTestCase): Observable<string> {\n        const gwtTestCaseJsonObject = ScenarioService.convertGwt(testCase);\n        return this.httpClient.post<string>(environment.backend + this.resourceUrlV2, gwtTestCaseJsonObject);\n    }\n\n    updateGwtTestCase(testCase: GwtTestCase): Observable<string> {\n        const gwtTestCaseJsonObject = ScenarioService.convertGwt(testCase);\n        return this.httpClient.patch<string>(environment.backend + this.resourceUrlV2, gwtTestCaseJsonObject);\n    }\n\n    delete(id: string): Observable<Object> {\n        return this.httpClient.delete(environment.backend + `${this.resourceUrlV2}/${id}`);\n    }\n\n    search(textFilter: any): Observable<Array<ScenarioIndex>>  {\n        return this.httpClient.get<Array<ScenarioIndex>>(environment.backend + `${this.resourceUrlV2}?textFilter=${textFilter}`)\n            .pipe(map((res: Array<any>) => {\n                return this.mapJsonScenario(res);\n            }));\n    }\n\n    private mapJsonScenario(res: Array<any>) {\n        return res.map(s => new ScenarioIndex(\n            s.metadata.id,\n            s.metadata.title,\n            s.metadata.description,\n            s.metadata.repositorySource,\n            s.metadata.creationDate,\n            s.metadata.updateDate,\n            s.metadata.version,\n            s.metadata.author,\n            s.metadata.tags,\n            s.metadata.executions\n        ));\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StateService",
            "id": "injectable-StateService-8550fef46b2895eaa8f25ad64c18f1513a5a8b4762c1a7ef732fa9685d3e6f6ca3ecfb22aad71082e4f275e65a054ee688101cb1cc9ec48e3bb33f19129b3571",
            "file": "src/app/shared/state/state.service.ts",
            "properties": [
                {
                    "name": "localStorageKey",
                    "defaultValue": "'CHUTNEY_STATE'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChutneyState",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "changeCampaignNoTag",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeCampaignTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeNoTag",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeScenarioType",
                    "args": [
                        {
                            "name": "scenarioTypes",
                            "type": "Array<ScenarioType>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioTypes",
                            "type": "Array<ScenarioType>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "Array<String>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCampaignNoTag",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCampaignTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<String>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getNoTag",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getScenarioType",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<String>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ChutneyState, ScenarioType } from '@model';\n\n@Injectable()\nexport class StateService {\n\n    private static localStorageKey = 'CHUTNEY_STATE';\n\n    state: ChutneyState;\n\n    constructor() {\n        const stateString = localStorage.getItem(StateService.localStorageKey) || '{}';\n        this.state = JSON.parse(stateString);\n    }\n\n    private save() {\n        localStorage.setItem(StateService.localStorageKey, JSON.stringify(this.state));\n    }\n\n    public changeTags(tags: Array<String>) {\n        this.state.tags = tags;\n        this.save();\n    }\n\n    public getTags(): Array<String> {\n        return this.state.tags;\n    }\n\n    public changeCampaignTags(tags: Array<String>) {\n        this.state.campaignTags = tags;\n        this.save();\n    }\n\n    public getCampaignTags(): Array<String> {\n        return this.state.campaignTags;\n    }\n\n    public getScenarioType() {\n        return this.state.scenarioTypes;\n    }\n\n    public changeScenarioType(scenarioTypes: Array<ScenarioType>)  {\n        this.state.scenarioTypes = scenarioTypes;\n        this.save();\n    }\n\n    public changeNoTag(noTag) {\n        this.state.noTag = noTag;\n        this.save();\n    }\n\n    public getNoTag() {\n        return this.state.noTag;\n    }\n\n    public changeCampaignNoTag(noTag) {\n        this.state.campaignNoTag = noTag;\n        this.save();\n    }\n\n    public getCampaignNoTag() {\n        return this.state.campaignNoTag;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "StepService",
            "id": "injectable-StepService-d85fd841391bbeb7b8ca69884d675b5fb2ad19627d8610fc73071ad4de4d04024349707d0b9a133a7b0977a727175683e760ff811f00b4ab6efd031a573bca60",
            "file": "src/app/core/services/step.service.ts",
            "properties": [
                {
                    "name": "stepUrl",
                    "defaultValue": "'/api/steps/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "findById",
                    "args": [
                        {
                            "name": "stepId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { isNullOrBlankString } from '@shared/tools';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StepService {\n\n  private stepUrl = '/api/steps/v1';\n\n  constructor(private http: HttpClient) {\n  }\n\n  findById(stepId: string): Observable<Object> {\n    return this.http.get(environment.backend + this.stepUrl + '/' + encodeURIComponent(stepId));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TranslateServiceStub",
            "id": "injectable-TranslateServiceStub-41dc22fbb4e9697a2299fa43153bf204213806ee6dc6436f6f9c628d357519f25a9d5397e4891bef90cc82eefc95786a4405701916beba879a617ca2c3ef869f",
            "file": "src/app/testing/translate-testing.module.ts",
            "properties": [
                {
                    "name": "onDefaultLangChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onLangChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTranslationChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { TranslateModule, TranslateLoader, TranslatePipe, TranslateService } from '@ngx-translate/core';\nimport { NgModule, PipeTransform, Pipe, Injectable, EventEmitter } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nconst TRANSLATIONS_EN = require('src/assets/i18n/en.json');\n\nexport class FakeLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of(TRANSLATIONS_EN);\n    }\n}\n\n@Pipe({\n    name: 'translate'\n})\nexport class TranslatePipeMock implements PipeTransform {\n    public name = 'translate';\n\n    public transform(query: string, ...args: any[]): any {\n        return fromKey(query);\n    }\n}\n\n@Injectable()\nexport class TranslateServiceStub {\n    public get(key: string): Observable<string> {\n        return of(fromKey(key));\n    }\n    public onLangChange: EventEmitter<any> = new EventEmitter();\n    public onTranslationChange: EventEmitter<any> = new EventEmitter();\n    public onDefaultLangChange: EventEmitter<any> = new EventEmitter();\n}\n\nfunction fromKey(key: string): string {\n    let r = TRANSLATIONS_EN;\n    key.split('.').forEach((s) => { if (r) r = r[s]; });\n    if (r) { return r; } else { return key; }\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipeMock\n    ],\n    providers: [\n        { provide: TranslateService, useClass: TranslateServiceStub },\n        { provide: TranslatePipe, useClass: TranslatePipeMock },\n    ],\n    imports: [\n        TranslateModule.forRoot({\n            loader: { provide: TranslateLoader, useClass: FakeLoader },\n        })\n    ],\n    exports: [\n        TranslatePipeMock,\n        TranslateModule\n    ]\n})\nexport class TranslateTestingModule {\n\n}\n",
            "type": "injectable"
        },
        {
            "name": "ValidationService",
            "id": "injectable-ValidationService-a6023577b7f8a7f86a6b88bc3cd3a2030c03c0058ec99f214a55e0774070cca75209df8e5beec5402fad1608d791d92659e119d2ed733e1712d8ceaba74a0a12",
            "file": "src/app/molecules/validation/validation.service.ts",
            "properties": [
                {
                    "name": "environmentNameRegex",
                    "defaultValue": "new RegExp('^[A-Z0-9_-]{3,20}$')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "patternRegex",
                    "defaultValue": "new RegExp('^(?:(?:[\\\\w\\\\-#_= /:]*|[+]|[!])(\\\\(\\\\?<\\\\w+>.+\\\\)))+$')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlRegex",
                    "defaultValue": "new RegExp('^[a-z]+:\\/\\/[^:]+(:[0-9]+)?.*$')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isNotEmpty",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidEnvironmentName",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidPattern",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidUrl",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class ValidationService {\n\n    private urlRegex = new RegExp('^[a-z]+:\\/\\/[^:]+(:[0-9]+)?.*$');\n    private environmentNameRegex = new RegExp('^[A-Z0-9_-]{3,20}$');\n    private patternRegex = new RegExp('^(?:(?:[\\\\w\\\\-#_= /:]*|[+]|[!])(\\\\(\\\\?<\\\\w+>.+\\\\)))+$');\n\n    constructor() { }\n\n    isNotEmpty(text: string): boolean {\n        return text != null && text !== '';\n    }\n\n    isValidUrl(text: string): boolean {\n        return this.urlRegex.test(text);\n    }\n\n    isValidEnvironmentName(text: string): boolean {\n      return this.environmentNameRegex.test(text);\n    }\n\n    isValidPattern(text: string) {\n        return this.patternRegex.test(text);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-2e90f38de9e37d3529aff83e658e1d516675bd8ebee7c152b1cc04e223ed97a7d22c3ced2d7905a48f08f4b50dc7df3f137af8af883bc28f5837d9ec2c18aa50",
            "file": "src/app/core/guards/auth.guard.ts",
            "properties": [
                {
                    "name": "unauthorizedMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "navigateToAppRootIfLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { LoginService } from '@core/services';\nimport { AlertService } from '@shared';\nimport { Authorization } from '@model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  private unauthorizedMessage: string = '';\n\n  public constructor(\n    private router: Router,\n    private loginService: LoginService,\n    private alertService: AlertService,\n    private translateService: TranslateService\n  ) {\n    this.initTranslation();\n  }\n\n  public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    const requestURL = state.url !== undefined ? state.url : '';\n\n    if (!this.loginService.isAuthenticated()) {\n        this.loginService.initLogin(requestURL);\n        return false;\n    }\n\n    const authorizations: Array<Authorization> = route.data['authorizations'] || [];\n    if (this.loginService.hasAuthorization(authorizations)) {\n        return true;\n    } else {\n        this.alertService.error(this.unauthorizedMessage, { timeOut: 0, extendedTimeOut: 0, closeButton: true });\n        this.navigateToAppRootIfLogin();\n        return false;\n    }\n  }\n\n  private initTranslation() {\n    this.getTranslation();\n    this.translateService.onLangChange.subscribe(() => {\n        this.getTranslation();\n    });\n  }\n\n  private getTranslation() {\n    this.translateService.get('login.unauthorized').subscribe((res: string) => {\n        this.unauthorizedMessage = res;\n    });\n  }\n\n  private navigateToAppRootIfLogin() {\n    this.router.routerState.root.firstChild.url.subscribe(u => {\n        if (u[0] && u[0].path == 'login') {\n            this.router.navigateByUrl('/');\n        }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "CanDeactivateGuard",
            "id": "injectable-CanDeactivateGuard-db7c1f994b46014ba7207c4f6437b576d553322a929f670c680badd172c9c12d23883f9f3fb6e35547a19b79351c84cdaecdf9de80b54eb5b4efd2bd484f8faa",
            "file": "src/app/core/guards/can-deactivate.guard.ts",
            "properties": [
                {
                    "name": "confirmationText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "page",
                            "type": "CanDeactivatePage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "CanDeactivatePage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { CanDeactivatePage } from './page';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanDeactivateGuard implements CanDeactivate<CanDeactivatePage> {\n  confirmationText: string;\n\n  constructor(private translate: TranslateService) {\n    this.initTranslation();\n  }\n\n  canDeactivate(page: CanDeactivatePage): boolean {\n    if (page && page.canDeactivatePage && !page.canDeactivatePage()) {\n      return confirm(this.confirmationText);\n    }\n    return true;\n  }\n\n  private initTranslation() {\n    this.getTranslation();\n    this.translate.onLangChange.subscribe(() => {\n        this.getTranslation();\n    });\n  }\n\n  private getTranslation() {\n    this.translate.get('global.confirm.page.deactivate').subscribe((res: string) => {\n      this.confirmationText = res;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-a6197764d9a426ad5e0bb526c4ceae26351e94bbdae793c84000457f35032b7c5d3c266d81ac14dd4c5f12deb055b65b39a35849b0b7b50ea311772eb6442218",
            "file": "src/app/shared/error-interceptor.service.ts",
            "properties": [
                {
                    "name": "sessionExpiredMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { LoginService } from '@core/services';\nimport { AlertService } from '@shared';\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class ErrorInterceptor implements HttpInterceptor {\n\n    private sessionExpiredMessage: string = '';\n\n    constructor(\n        private router: Router,\n        private loginService: LoginService,\n        private alertService: AlertService,\n        private translateService: TranslateService\n    ) {\n        this.initTranslation();\n    }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (request.headers.get('no-intercept-error') === '') {\n        const newHeaders = request.headers.delete('no-intercept-error')\n        const newRequest = request.clone({ headers: newHeaders });\n        return next.handle(newRequest);\n    } else {\n        return next.handle(request).pipe(\n            catchError(\n                (err: any) => {\n                    if (err instanceof HttpErrorResponse) {\n                        if (err.status === 401 || err.status === 403) {\n                            if (this.loginService.isAuthenticated()) {\n                                this.loginService.logout();\n                                this.alertService.error(this.sessionExpiredMessage, { timeOut: 0, extendedTimeOut: 0, closeButton: true });\n                            } else {\n                                const requestURL = this.router.url !== undefined ? this.router.url : '';\n                                this.loginService.initLogin(requestURL);\n                            }\n                            return EMPTY;\n                        }\n                    }\n                    return throwError(err);\n                }\n            )\n        );\n    }\n  }\n\n  private initTranslation() {\n    this.getTranslation();\n    this.translateService.onLangChange.subscribe(() => {\n        this.getTranslation();\n    });\n  }\n\n  private getTranslation() {\n    this.translateService.get('login.expired').subscribe((res: string) => {\n        this.sessionExpiredMessage = res;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "ActivatedRouteStub",
            "id": "class-ActivatedRouteStub-dec355f76fc6eb5c8b7507ced956db92fae379e1af64ce9502b897313da0404f75eb1157205f6953fbff586ec009d19df702547a98ab509e944cbfb89ab73854",
            "file": "src/app/testing/activated-route-stub.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { of } from 'rxjs';\nimport { convertToParamMap } from '@angular/router';\n\nexport class ActivatedRouteStub {\n\n    params = of({});\n    queryParams = of({});\n\n    snapshot = {\n        queryParamMap: {},\n        _lastPathIndex: 0\n    };\n\n    constructor() {\n    }\n\n    setParamMap(params?: Object) {\n        this.params = of(params);\n        this.queryParams = of(params);\n    }\n\n    setSnapshotQueryParamMap(params?: Object) {\n        this.snapshot.queryParamMap = convertToParamMap(params);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "properties": [
                {
                    "name": "params",
                    "defaultValue": "of({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "queryParams",
                    "defaultValue": "of({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "snapshot",
                    "defaultValue": "{\n        queryParamMap: {},\n        _lastPathIndex: 0\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "setParamMap",
                    "args": [
                        {
                            "name": "params",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSnapshotQueryParamMap",
                    "args": [
                        {
                            "name": "params",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Agent",
            "id": "class-Agent-cfe84f1726233ed4698b3d02e9e658c1d74495099084df4eba09e55a8b14f6e688cc3f09dca498bd804d3ce3233f54f99014976d19e369bdf681e8ec7e54a307",
            "file": "src/app/core/model/agent-network/agent-graphe.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AgentInfo, TargetId } from '.';\n\nexport class AgentGraphe {\n    constructor(\n        public agents: Array<Agent>,\n    ) { }\n}\n\nexport class Agent {\n    constructor(\n        public info: AgentInfo,\n        public reachableAgents: Array<string>,\n        public reachableTargets: Array<TargetId>,\n    ) { }\n\n    public reachableSize() {\n        return this.reachableAgents.length + this.reachableTargets.length;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "info",
                        "type": "AgentInfo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reachableAgents",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reachableTargets",
                        "type": "Array<TargetId>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "info",
                        "type": "AgentInfo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reachableAgents",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reachableTargets",
                        "type": "Array<TargetId>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentInfo",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reachableAgents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reachableTargets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TargetId>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "reachableSize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AgentGraphe",
            "id": "class-AgentGraphe-cfe84f1726233ed4698b3d02e9e658c1d74495099084df4eba09e55a8b14f6e688cc3f09dca498bd804d3ce3233f54f99014976d19e369bdf681e8ec7e54a307",
            "file": "src/app/core/model/agent-network/agent-graphe.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AgentInfo, TargetId } from '.';\n\nexport class AgentGraphe {\n    constructor(\n        public agents: Array<Agent>,\n    ) { }\n}\n\nexport class Agent {\n    constructor(\n        public info: AgentInfo,\n        public reachableAgents: Array<string>,\n        public reachableTargets: Array<TargetId>,\n    ) { }\n\n    public reachableSize() {\n        return this.reachableAgents.length + this.reachableTargets.length;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agents",
                        "type": "Array<Agent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "agents",
                        "type": "Array<Agent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "agents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Agent>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AgentInfo",
            "id": "class-AgentInfo-06168430a9591fb4592f1f39fd3a841f298aba5923b10fbc20863323cb45b4b820a266e794f982fb48a2cd4ee5db20da1295517eb4305b1edf7c3041328c6aa5",
            "file": "src/app/core/model/agent-network/agent-info.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AgentInfo {\n    constructor(\n        public name: string,\n        public host: string,\n        public port: number,\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "host",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "port",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "host",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "port",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "port",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AgentNetwork",
            "id": "class-AgentNetwork-91f7d75f6023b26f2a02e8ac3f06315854aa3ff303086dcfe09413cc980c6adedf1abdadc082fb73e217642dcbd6d0c19e7e714fe6f0eae944e947e82ee159ee",
            "file": "src/app/core/model/agent-network/agent-network.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AgentGraphe, NetworkConfiguration } from '.';\n\nexport class AgentNetwork {\n    constructor(\n        readonly graphe: AgentGraphe,\n        readonly networkConfiguration: NetworkConfiguration\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "graphe",
                        "type": "AgentGraphe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "networkConfiguration",
                        "type": "NetworkConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "graphe",
                        "type": "AgentGraphe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "networkConfiguration",
                        "type": "NetworkConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Backup",
            "id": "class-Backup-511ea828892225daaebb1771522c4a5c8924e708a190ac72d354fa987574f8fd4f620d6f6cf38b5dd13a0ec98fbe0eb90ad2ad4b5d85937eb20bbc7840474e25",
            "file": "src/app/core/model/backups.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { formatDate } from '@angular/common';\n\nexport class Backup {\n    constructor(\n        public homePage: boolean,\n        public agentsNetwork: boolean,\n        public environments: boolean,\n        public components: boolean,\n        public globalVars: boolean,\n        public jiraLinks: boolean,\n        public time?: Date) {\n    }\n\n    public id(): string {\n        return formatDate(this.time, 'yyyyMMddHHmmss', 'fr-FR');\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homePage",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "agentsNetwork",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environments",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "components",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalVars",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinks",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "homePage",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "agentsNetwork",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environments",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "components",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalVars",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinks",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "agentsNetwork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "globalVars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "homePage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "jiraLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "id",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BackupDto",
            "id": "class-BackupDto-7012002cb4473bed8de1d8d940e997dc884878ec5f4de1e24cdf9889f374836c71d72f02ba437219141255efd94111322c7a3ec98a0162c1057f170c0b800b82",
            "file": "src/app/core/services/backups.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\nimport { Backup } from '@core/model/backups.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackupsService {\n\n    private url = '/api/v1/backups';\n\n    constructor(private http: HttpClient) {\n    }\n\n    public list(): Observable<Array<Backup>> {\n        return this.http.get<Array<BackupDto>>(environment.backend + this.url).pipe(\n            map(dtos => this.mapToBackups(dtos))\n        );\n    }\n\n    public get(backup: Backup): Observable<Backup> {\n        return this.http.get<BackupDto>(\n            environment.backend + this.url + `/${backup.id()}`).pipe(\n            map(dto => this.mapToBackup(dto))\n        );\n    }\n\n    public delete(backup: Backup): Observable<void> {\n        return this.http.delete(environment.backend + this.url + `/${backup.id()}`)\n            .pipe(map(() => {}));\n    }\n\n    public download(backup: Backup): Observable<any> {\n        const options: any = {\n            responseType: 'arraybuffer'\n        };\n        return this.http.get(environment.backend + this.url + `/${backup.id()}` + '/download', options);\n    }\n\n    public save(backup: BackupDto): Observable<String> {\n        return this.http.post(environment.backend + this.url, backup, {responseType: 'text'});\n    }\n\n    private mapToBackup(dto: BackupDto): Backup {\n        return new Backup(dto.homePage, dto.agentsNetwork, dto.environments, dto.components, dto.globalVars, dto.jiraLinks, dto.time);\n    }\n\n    private mapToBackups(dtos: BackupDto[]): Backup[] {\n        return dtos.map(dto => this.mapToBackup(dto));\n    }\n}\n\nexport class BackupDto {\n    constructor(\n        public homePage: boolean,\n        public agentsNetwork: boolean,\n        public environments: boolean,\n        public components: boolean,\n        public globalVars: boolean,\n        public jiraLinks: boolean,\n        public time?: Date) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homePage",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "agentsNetwork",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environments",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "components",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalVars",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinks",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "homePage",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "agentsNetwork",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environments",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "components",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalVars",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinks",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "agentsNetwork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "globalVars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "homePage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "jiraLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Campaign",
            "id": "class-Campaign-e65dda924096e343d62a50d1735be4d4b9abc0341f1162b5b8e218ec15492f39fd84f262974b24e8f57999e9a9ab7f2d1e657a95eb7fda25d9eb4d9cf154de28",
            "file": "src/app/core/model/campaign/campaign.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CampaignExecutionReport } from '.';\n\nexport class Campaign {\n\n    constructor(public id?: number,\n        public title: string = '',\n        public description: string = '',\n        public scenarioIds: Array<string> = [],\n        public campaignExecutionReports: Array<CampaignExecutionReport> = [],\n        public computedParameters: Map<string, string> = new Map(),\n        public environment: string = '',\n        public parallelRun?: false,\n        public retryAuto?: false,\n        public datasetId?: string,\n        public tags: Array<string> = []) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "scenarioIds",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "campaignExecutionReports",
                        "type": "Array<CampaignExecutionReport>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "computedParameters",
                        "type": "Map<string | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Map()"
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "parallelRun",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "retryAuto",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioIds",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignExecutionReports",
                        "type": "Array<CampaignExecutionReport>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Map<string | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Map()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parallelRun",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "retryAuto",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "campaignExecutionReports",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CampaignExecutionReport>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "computedParameters",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "environment",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parallelRun",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "retryAuto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CampaignExecutionReport",
            "id": "class-CampaignExecutionReport-09c60af3e76c8ebe85d406e030d38f6a051480f74d4fc44b34f7d9677401866227f7061a1c8d8e3101482744bcf73958b3f1d5e0348bf9dae5169e71264ee09f",
            "file": "src/app/core/model/campaign/campaign-execution-report.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ScenarioExecutionReportOutline } from '.';\n\nexport class CampaignExecutionReport {\n    constructor(\n        public executionId?: number,\n        public scenarioExecutionReports: Array<ScenarioExecutionReportOutline> = [],\n        public status?: string,\n        public duration?: string,\n        public startDate?: string,\n        public campaignName?: string,\n        public partialExecution?: boolean,\n        public executionEnvironment?: string) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "scenarioExecutionReports",
                        "type": "Array<ScenarioExecutionReportOutline>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "duration",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "campaignName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "partialExecution",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "executionEnvironment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioExecutionReports",
                        "type": "Array<ScenarioExecutionReportOutline>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "duration",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "partialExecution",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executionEnvironment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "campaignName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionEnvironment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "partialExecution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioExecutionReports",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioExecutionReportOutline>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CampaignReport",
            "id": "class-CampaignReport-8b5bc82f2720c4c16a2fee06edfe82e8061c1b689faba60d42025faba367572e3ca1f666c3b663d6a672149a14ee540672685603ed5132de6c074c8711bd0c73",
            "file": "src/app/modules/campaign/components/execution/execution-campaign.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FileSaverService } from 'ngx-filesaver';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\n\nimport { combineLatest, Observable, Subscription, timer } from 'rxjs';\n\nimport * as JSZip from 'jszip';\n\nimport {\n    Campaign,\n    CampaignExecutionReport,\n    ScenarioExecutionReportOutline,\n    ScenarioIndex,\n    TestCase,\n    Authorization,\n    JiraScenario,\n    XrayStatus\n} from '@model';\nimport {\n    CampaignService,\n    EnvironmentAdminService,\n    ScenarioService,\n    JiraPluginService,\n    LoginService,\n    JiraPluginConfigurationService\n} from '@core/services';\nimport { newInstance, sortByAndOrder } from '@shared/tools';\n\n@Component({\n    selector: 'chutney-execution-campaign',\n    providers: [Location],\n    templateUrl: './execution-campaign.component.html',\n    styleUrls: ['./execution-campaign.component.scss']\n})\nexport class CampaignExecutionComponent implements OnInit, OnDestroy {\n\n    TIMER = 2000;\n\n    deletionConfirmationTextPrefix: string;\n    deletionConfirmationTextSuffix: string;\n    executionError: String;\n\n    campaign: Campaign;\n    scenarios: Array<ScenarioIndex> = [];\n    orderedScenarios: Array<ScenarioIndex> = [];\n\n    last: CampaignReport;\n    current: CampaignReport;\n    stopRequested = false;\n\n    currentCampaignExecutionReport: CampaignExecutionReport;\n    currentScenariosReportsOutlines: Array<ScenarioExecutionReportOutline> = [];\n    campaignSub: Subscription;\n\n    environments: Array<string>;\n\n    orderBy: any;\n    reverseOrder: any;\n\n    @ViewChildren(NgbDropdown)\n    private executeDropDown: QueryList<NgbDropdown>;\n\n    running = false;\n    errorMessage: any;\n\n    private subscriptionLoadCampaign: Subscription;\n\n    Authorization = Authorization;\n\n    // Jira\n    testExecutionId: string;\n    jiraScenarios: JiraScenario[] = [];\n    jiraUrl = '';\n    UNSUPPORTED = 'UNSUPPORTED';\n    selectedStatusByScenarioId: Map<string, string> = new Map();\n\n    constructor(private campaignService: CampaignService,\n                private environmentAdminService: EnvironmentAdminService,\n                private fileSaverService: FileSaverService,\n                private jiraPluginConfigurationService: JiraPluginConfigurationService,\n                private jiraLinkService: JiraPluginService,\n                private route: ActivatedRoute,\n                private router: Router,\n                private scenarioService: ScenarioService,\n                private translate: TranslateService,\n                private loginService: LoginService,\n                private location: Location,\n    ) {\n        translate.get('campaigns.confirm.deletion.prefix').subscribe((res: string) => {\n            this.deletionConfirmationTextPrefix = res;\n        });\n        translate.get('campaigns.confirm.deletion.suffix').subscribe((res: string) => {\n            this.deletionConfirmationTextSuffix = res;\n        });\n    }\n\n    ngOnInit() {\n        this.subscriptionLoadCampaign = this.route.params.subscribe((params) => {\n            this.loadCampaign(params['id'], true, params['execId']);\n            this.loadScenarios(params['id']);\n        });\n        if (this.loginService.hasAuthorization(Authorization.CAMPAIGN_EXECUTE)) {\n            this.environmentAdminService.listEnvironmentsNames().subscribe(\n                (res) => this.environments = res\n            );\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscriptionLoadCampaign) {\n            this.subscriptionLoadCampaign.unsubscribe();\n        }\n        this.unsubscribeCampaign();\n    }\n\n    private loadCampaign(campaignId: number, selectLast: boolean, executionId: number = null) {\n        this.campaignService.find(campaignId).subscribe(\n            (campaign) => {\n                if (campaign) {\n                    this.campaign = campaign;\n                    this.loadReports(this.campaign, selectLast, executionId);\n                    this.initJiraTestExecutionId();\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    private loadReports(campaign: Campaign, selectLast: boolean, executionId: number = null) {\n        if (this.campaign.campaignExecutionReports.length > 0) {\n            this.sortCurrentCampaignReports();\n            if (selectLast) {\n                this.selectReport(campaign.campaignExecutionReports[0]);\n            }\n            if (executionId) {\n                const execution = campaign.campaignExecutionReports.filter((r) => r.executionId === executionId);\n                if (execution.length === 1) {\n                    this.selectReport(execution[0]);\n                }\n            }\n            this.running = CampaignService.existRunningCampaignReport(this.campaign.campaignExecutionReports);\n            if (this.running) {\n                this.unsubscribeCampaign();\n                this.campaignSub = timer(this.TIMER).subscribe(() => {\n                        this.updateRunningReport();\n                    }\n                );\n            }\n            this.last = this.getLastCompleteReport();\n        }\n    }\n\n    selectLastCompleteExecution() {\n        this.currentCampaignExecutionReport = null;\n        this.updateLocation('last');\n    }\n\n    private updateRunningReport() {\n        this.campaignService.find(this.campaign.id).subscribe(\n            (campaign) => {\n                const sortedReports = campaign.campaignExecutionReports.sort((a, b) => b.executionId - a.executionId);\n                if (this.campaign.campaignExecutionReports[0] &&\n                    this.campaign.campaignExecutionReports[0].executionId !== sortedReports[0].executionId) {\n                    // Add new running report\n                    this.campaign.campaignExecutionReports.unshift(sortedReports[0]);\n                    this.selectReport(sortedReports[0]);\n                } else {\n                    // Update running report\n                    this.campaign.campaignExecutionReports[0] = sortedReports[0];\n                    if (this.currentCampaignExecutionReport &&\n                        this.currentCampaignExecutionReport.executionId === sortedReports[0].executionId) {\n                        this.currentCampaignExecutionReport = sortedReports[0];\n                        this.currentScenariosReportsOutlines = newInstance(sortedReports[0].scenarioExecutionReports);\n                    }\n                }\n                this.unsubscribeCampaign();\n                if (sortedReports[0].status === 'RUNNING') {\n                    this.campaignSub = timer(this.TIMER).subscribe(() => {\n                            this.updateRunningReport();\n                        }\n                    );\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    private getLastCompleteReport() {\n        for (const report of this.campaign.campaignExecutionReports) {\n            const campaignReport = new CampaignReport(report);\n            if (!campaignReport.isRunning() && !report.partialExecution &&\n                !campaignReport.hasNotExecuted() && !campaignReport.hasStopped()) {\n                return campaignReport;\n            }\n        }\n        return null;\n    }\n\n    private loadScenarios(campaignId) {\n        this.campaignService.findAllScenarios(campaignId).subscribe(\n            (scenarios) => {\n                this.scenarios = scenarios;\n                this.orderedScenarios = newInstance(scenarios);\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    sortCurrentBy(property) {\n        this.sortBy(this.currentScenariosReportsOutlines, property);\n    }\n\n    sortLastBy(property) {\n        this.sortBy(this.orderedScenarios, property);\n    }\n\n    sortBy(collection: any, property) {\n        if (this.orderBy === property) {\n            this.reverseOrder = !this.reverseOrder;\n        }\n        this.orderBy = property;\n\n        return sortByAndOrder(\n            collection,\n            this.getKeyExtractorBy(property),\n            this.reverseOrder\n        );\n    }\n\n    private getKeyExtractorBy(property: string) {\n        if (property === 'title') {\n            return i => i[property] == null ? '' : i[property].toLowerCase();\n        }\n        if (property === 'creationDate') {\n            const now = Date.now();\n            return i => i[property] == null ? now - 1491841324 /*2017-04-10T16:22:04*/ : now - Date.parse(i[property]);\n        } else {\n            return i => i[property] == null ? '' : i[property];\n        }\n    }\n\n    executeCampaign(env: string) {\n        this.running = true;\n        this.stopRequested = false;\n        this.campaignService.executeCampaign(this.campaign.id, env).subscribe(\n            () => {\n                // Do nothing\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            },\n            () => this.running = false\n        );\n        this.campaignSub = timer(this.TIMER).subscribe(() => {\n            this.loadCampaign(this.campaign.id, true);\n        });\n    }\n\n    executeCampaignOnToggle() {\n        if (this.environments.length === 1) {\n            this.executeDropDown.first.close();\n            this.executeCampaign(this.environments[0]);\n        }\n    }\n\n    selectReport(campaignExecutionReport: CampaignExecutionReport) {\n        this.resetOrdering();\n        this.current = new CampaignReport(campaignExecutionReport);\n        this.currentCampaignExecutionReport = campaignExecutionReport;\n        this.currentScenariosReportsOutlines = newInstance(campaignExecutionReport.scenarioExecutionReports);\n        this.updateLocation(this.currentCampaignExecutionReport.executionId);\n    }\n\n    private resetOrdering() {\n        this.orderBy = '';\n        this.reverseOrder = false;\n        this.orderedScenarios = newInstance(this.scenarios);\n    }\n\n    editCampaign(campaign: Campaign) {\n        const url = '/campaign/' + campaign.id + '/edition';\n        this.router.navigateByUrl(url);\n    }\n\n    deleteCampaign(campaignId: number, title: string) {\n        if (confirm(this.deletionConfirmationTextPrefix + title + this.deletionConfirmationTextSuffix)) {\n            this.campaignService.delete(campaignId).subscribe(\n                (response) => {\n                    this.removeJiraLink(campaignId);\n                    this.router.navigateByUrl('/campaign');\n                },\n                (error) => {\n                    this.errorMessage = error.error;\n                }\n            );\n        }\n    }\n\n    isOlderThan(date: string, durationInHours: number) {\n        if (date) {\n            return new Date().getTime() - new Date(date).getTime() > durationInHours * 60 * 60 * 1000;\n        }\n        return false;\n    }\n\n    exportScenarioByCampaign() {\n\n        const rawTestCaseContent: Array<Observable<TestCase>> = [];\n\n        for (const testCase of this.scenarios) {\n            if (!TestCase.isComposed(testCase.id)) {\n                rawTestCaseContent.push(this.scenarioService.findRawTestCase(testCase.id));\n            } else {\n                this.errorMessage = 'La campagne possede des scénarios component qui ne sont pas exportables';\n            }\n        }\n\n        const zip = new JSZip();\n        const campaignTitle = this.campaign.title;\n\n        combineLatest(rawTestCaseContent).subscribe(results => {\n                results.forEach(testCase => {\n                    const fileName = `${testCase.id}-${testCase.title}.chutney.hjson`;\n                    zip.file(fileName, testCase.content);\n                });\n\n                zip\n                    .generateAsync({type: 'blob'})\n                    .then(blob => this.fileSaverService.save(blob, campaignTitle));\n            }\n        );\n    }\n\n    stopScenario() {\n        this.campaignService.stopExecution(this.campaign.id, this.currentCampaignExecutionReport.executionId).subscribe(() => {\n            this.stopRequested = true;\n        }, error => {\n            this.executionError = 'Cannot stop campaign : ' + error.status + ' ' + error.statusText + ' ' + error.error;\n        }, () => {\n        });\n    }\n\n    replayFailed() {\n        this.running = true;\n        this.campaignService.replayFailedScenario(this.currentCampaignExecutionReport.executionId).subscribe(\n            () => {\n                // Do nothing\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            },\n            () => this.running = false\n        );\n        this.campaignSub = timer(this.TIMER).subscribe(() => {\n            this.updateRunningReport();\n        });\n    }\n\n    selectedUpdateStatus(scenarioId: string, event: any) {\n        this.selectedStatusByScenarioId.set(scenarioId, event.target.value);\n    }\n\n    updateStatus(scenarioId: string) {\n        const newStatus = this.selectedStatusByScenarioId.get(scenarioId);\n        if (newStatus === XrayStatus.PASS || newStatus === XrayStatus.FAIL) {\n            this.jiraLinkService.updateScenarioStatus(this.testExecutionId, scenarioId, newStatus).subscribe(\n                () => {},\n                (error) => {\n                    console.log(error);\n                    this.errorMessage = 'Cannot update jira status. \\n' + error.error;\n                }\n            );\n        }\n    }\n\n    scenarioStatus(scenarioId: String): string {\n        const jiraScenario = this.jiraScenarios.filter(s => s.chutneyId === scenarioId);\n        if  (jiraScenario.length > 0) {\n            if (jiraScenario[0].executionStatus === XrayStatus.PASS || jiraScenario[0].executionStatus === XrayStatus.FAIL) {\n                return jiraScenario[0].executionStatus;\n            }\n        }\n        return this.UNSUPPORTED;\n    }\n\n    initJiraTestExecutionId() {\n\n        this.jiraPluginConfigurationService.getUrl()\n        .subscribe((r) => {\n            if (r !== '') {\n                this.jiraUrl = r;\n            }\n        });\n        this.jiraLinkService.findByCampaignId(this.campaign.id).subscribe(\n            (jiraId) => {\n                this.testExecutionId = jiraId;\n                if(jiraId) {\n                    this.jiraLinkService.findTestExecScenarios(this.testExecutionId)\n                    .subscribe(\n                        (result) => {\n                            this.jiraScenarios = result;\n                        }\n                    );\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n\n    }\n\n    getJiraLink(chutneyId: string) {\n        const foundScenario = this.jiraScenarios.find(s => s.chutneyId === chutneyId);\n        if (foundScenario) {\n            return this.jiraUrl + '/browse/' + foundScenario.id;\n        } else {\n            return null;\n        }\n    }\n\n    xrayStatuses(): Array<string> {\n        const keys = Object.keys(XrayStatus);\n        return keys.slice();\n    }\n\n    private sortCurrentCampaignReports() {\n        this.campaign.campaignExecutionReports.sort((a, b) => b.executionId - a.executionId);\n    }\n\n    private unsubscribeCampaign() {\n        if (this.campaignSub) {\n            this.campaignSub.unsubscribe();\n        }\n    }\n\n    private removeJiraLink(campaignId: number) {\n        this.jiraLinkService.removeForCampaign(campaignId).subscribe(\n            () => {},\n            (error) => { console.log(error); }\n        );\n    }\n\n    hasAuthorization(authorizations: Array<Authorization>): boolean {\n        return this.loginService.hasAuthorization(authorizations);\n    }\n\n    private updateLocation(executionId) {\n        this.location.replaceState('/campaign/' + this.campaign.id + '/execution/' + executionId);\n    }\n}\n\nclass CampaignReport {\n    private report: CampaignExecutionReport;\n\n    passed: number;\n    failed: number;\n    stopped: number;\n    notexecuted: number;\n    total: number;\n\n    constructor(report: CampaignExecutionReport) {\n        this.report = report;\n        this.passed = this.countScenarioByStatus('SUCCESS', report);\n        this.failed = this.countScenarioByStatus('FAILURE', report);\n        this.stopped = this.countScenarioByStatus('STOPPED', report);\n        this.notexecuted = this.countScenarioByStatus('NOT_EXECUTED', report);\n        this.total = this.passed + this.failed + this.stopped + this.notexecuted;\n    }\n\n    private countScenarioByStatus(status: String, report: CampaignExecutionReport) {\n        return report.scenarioExecutionReports.filter(s => s.status === status).length;\n    }\n\n    allPassed() {\n        return !this.hasStopped() && !this.hasStopped();\n    }\n\n    hasPassed() {\n        return this.passed > 0;\n    }\n\n    hasFailure() {\n        return this.failed > 0;\n    }\n\n    hasStopped() {\n        return this.stopped > 0;\n    }\n\n    hasNotExecuted() {\n        return this.notexecuted > 0;\n    }\n\n    isRunning() {\n        return 'RUNNING' === this.report.status;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "report",
                        "type": "CampaignExecutionReport",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 469,
                "jsdoctags": [
                    {
                        "name": "report",
                        "type": "CampaignExecutionReport",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "failed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 466
                },
                {
                    "name": "notexecuted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 468
                },
                {
                    "name": "passed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 465
                },
                {
                    "name": "report",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CampaignExecutionReport",
                    "optional": false,
                    "description": "",
                    "line": 463,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stopped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 467
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 469
                }
            ],
            "methods": [
                {
                    "name": "allPassed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 484,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "countScenarioByStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "report",
                            "type": "CampaignExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 480,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "report",
                            "type": "CampaignExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFailure",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasNotExecuted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasPassed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 488,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasStopped",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 496,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isRunning",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 504,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CampaignScheduling",
            "id": "class-CampaignScheduling-d376a7971cc99e7711cc2a14fda61a4955ec02cc432a7cf22462f47759653b75331dbe0dc72a613a6d3f6afd6c7f6ff45d4bad76fed9f77403e6ca5bc83dbd6f",
            "file": "src/app/core/model/campaign/campaign-scheduling.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FREQUENCY } from '@core/model/campaign/FREQUENCY';\n\n\nexport class CampaignScheduling {\n\n    constructor(\n        public campaignId: number,\n        public campaignTitle: string,\n        public schedulingDate: Date,\n        public frequency?: FREQUENCY,\n        public id?: number\n    ) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "campaignTitle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "schedulingDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "frequency",
                        "type": "FREQUENCY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "campaignId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignTitle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "schedulingDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "frequency",
                        "type": "FREQUENCY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "campaignId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "campaignTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "frequency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FREQUENCY",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "schedulingDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChutneyState",
            "id": "class-ChutneyState-a88e0c213525a07d6860206ab95816c93e90338828a94a79dc9c05bc46d9757ba03a135b7376ba563144da8100a1753f417f3890eff73cf793ad482e9fb04b8a",
            "file": "src/app/core/model/chutney-state.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ScenarioType } from '@model';\n\nexport class ChutneyState {\n  constructor(\n    public tags: Array<String> = [],\n    public campaignTags: Array<String> = [],\n    public scenarioTypes: Array<ScenarioType> = [],\n    public noTag: boolean,\n    public campaignNoTag: boolean\n  ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "campaignTags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "scenarioTypes",
                        "type": "Array<ScenarioType>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "noTag",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "campaignNoTag",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignTags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioTypes",
                        "type": "Array<ScenarioType>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "noTag",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignNoTag",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "campaignNoTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "campaignTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "noTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioType>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Clonable",
            "id": "class-Clonable-df77c70f2d4219580854cfda314601b1f81347b3bcfa82fc34b987ff2d8854c62cc3c9125786e13ba4e8fa0063f668c8c2c262a14aa98316ac14dd932e98f3e4",
            "file": "src/app/shared/clonable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class Clonable<T> {\n    abstract clone(): T;\n}\n\n// Unlike classes, interfaces exist only at compile-time. It is not possible to do a common instanceof check\nexport function instanceOfClonable<T>(obj: any): obj is Clonable<T> {\n    return 'clone' in obj;\n}\n\nexport function cloneAsPossible(val: any): any {\n    if (val == null) return val;\n\n    if (typeof val === 'object') {\n        if (val instanceof Array) {\n            const result = [];\n            val.forEach((child) => {\n                result.push(cloneAsPossible(child));\n            });\n            return result;\n        }\n        if (val instanceof Map) {\n            const result = new Map();\n            val.forEach((value, key) => {\n                result.set(cloneAsPossible(key), cloneAsPossible(value));\n            });\n            return result;\n        }\n\n        if (instanceOfClonable(val)) return val.clone();\n    }\n\n    return val;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ComponentTask",
            "id": "class-ComponentTask-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "implementation",
                        "type": "Implementation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "children",
                        "type": "Array<ComponentTask>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "implementation",
                        "type": "Implementation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "children",
                        "type": "Array<ComponentTask>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "computedParameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "implementation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Implementation",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "strategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Strategy",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentTask",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "ComponentTaskDto",
            "id": "class-ComponentTaskDto-b3287a18de94c57dde2ff9099f84aa953b54f56e71f74ced4cd2f61a9cf99bb8c284b5a3c7c41bc28e9b83a207e996ee76c32b3eda7c59ee35d43f1c1373e22e",
            "file": "src/app/core/services/component.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, publishReplay, refCount } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport {\n    ComponentTask,\n    Implementation,\n    InputTask,\n    KeyValue,\n    ScenarioComponent,\n    Strategy,\n    Task\n} from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComponentService {\n\n    private resourceUrl = '/api/task/v1';\n    private stepUrl = '/api/steps/v1';\n    private componentUrl = '/api/scenario/component-edition';\n    private stepExecutionUrl = '/api/ui/component/execution/v1';\n\n    private tasks: Observable<Array<Task>>;\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTasks(): Observable<Array<Task>> {\n        if (!this.tasks) {\n            this.tasks = this.httpClient.get<Array<Task>>(environment.backend + this.resourceUrl)\n                .pipe(\n                    map((res: Array<Task>) => {\n                        res = res.map(t => new Task(\n                            t.identifier,\n                            t.inputs.map(ti => new InputTask(ti.name, ti.type)),\n                            t.target\n                        ));\n                        res.sort((a, b) => a.identifier.localeCompare(b.identifier));\n                        return res;\n                    }),\n                    publishReplay(1),\n                    refCount()\n                );\n        }\n        return this.tasks;\n    }\n\n    findAllComponent(): Observable<Array<ComponentTask>> {\n        return this.httpClient.get<Array<ComponentTask>>(environment.backend + this.stepUrl + '/all')\n            .pipe(map((res: Array<ComponentTask>) => {\n                return res.map(c => this.mapToComponentTask(c, true));\n            }));\n    }\n\n    save(component: ComponentTask): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.stepUrl,\n            this.mapToComponentTaskDto(component), {responseType: 'text'}\n        );\n    }\n\n    delete(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + this.stepUrl + `/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    execute(component: ComponentTask, env: string): Observable<Object> {\n        return this.httpClient.post(environment.backend + `${this.stepExecutionUrl}/${component.id}/${env}`, '')\n            .pipe(map((res: Object) => {\n                return res;\n            }));\n    }\n\n    saveComponentTestCase(scenarioComponent: ScenarioComponent): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.componentUrl,\n            this.mapScenarioComponentToDto(scenarioComponent), {responseType: 'text'}\n        );\n    }\n\n    findComponentTestCase(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, true))\n        );\n    }\n\n    findComponentTestCaseExecutableParameters(id: string): Observable<Array<KeyValue>> {\n        return this.httpClient.get<Array<KeyValue>>(environment.backend + `${this.componentUrl}/${id}/executable/parameters`);\n    }\n\n    findComponentTestCaseWithoutDeserializeImpl(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}/executable`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, false))\n        );\n    }\n\n    deleteComponentTestCase(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + `${this.componentUrl}/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    findParents(id: string): Observable<any> {\n        return this.httpClient.get(environment.backend + `${this.stepUrl}/${id}/parents`);\n    }\n\n    private mapScenarioComponentToDto(scenarioComponent: ScenarioComponent): TestCaseComponentDto {\n        return new TestCaseComponentDto(scenarioComponent.id,\n            scenarioComponent.title,\n            scenarioComponent.description,\n            scenarioComponent.creationDate,\n            scenarioComponent.updateDate,\n            scenarioComponent.version,\n            scenarioComponent.author,\n            new ScenarioComponentDto(\n                scenarioComponent.componentSteps.map((componentTask: ComponentTask) => this.mapComponentTaskToDto(componentTask)),\n                scenarioComponent.parameters\n            ),\n            scenarioComponent.computedParameters,\n            scenarioComponent.tags,\n            scenarioComponent.datasetId\n        );\n    }\n\n    private mapComponentTaskToDto(componentTask: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            componentTask.id,\n            componentTask.name,\n            null,\n            null,\n            [],\n            componentTask.parameters,\n            componentTask.strategy,\n            componentTask.computedParameters);\n    }\n\n    private mapJsonToScenarioComponent(jsonObject: any, withDeserializeImplementation: boolean): ScenarioComponent {\n        return new ScenarioComponent(\n            jsonObject.id,\n            jsonObject.title,\n            jsonObject.description,\n            jsonObject.creationDate,\n            jsonObject.updateDate,\n            jsonObject.version,\n            jsonObject.author,\n            jsonObject.scenario.componentSteps.map((json: any) => this.mapToComponentTask(json, withDeserializeImplementation)),\n            jsonObject.scenario.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.datasetId\n        );\n    }\n\n    private mapToComponentTask(jsonObject: any, withDeserializeImplementation: boolean): ComponentTask {\n        let impl = Implementation.deserialize(JSON.parse(jsonObject.task));\n\n        if (jsonObject.task && !withDeserializeImplementation) {\n            impl =  JSON.parse(jsonObject.task);\n        }\n\n        return new ComponentTask(\n            jsonObject.name,\n            impl,\n            jsonObject.steps.map(c => this.mapToComponentTask(c, withDeserializeImplementation)),\n            jsonObject.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.strategy != null ? new Strategy(jsonObject.strategy.type, jsonObject.strategy.parameters) : null,\n            jsonObject.id\n        );\n\n    }\n\n    private mapToComponentTaskDto(component: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            component.id,\n            component.name,\n            null,\n            component.implementation != null ? JSON.stringify(component.implementation) : null,\n            component.children.map(c => this.mapToComponentTaskDto(c)),\n            component.parameters,\n            component.strategy,\n            component.computedParameters,\n            component.tags\n        );\n    }\n}\n\nexport class TestCaseComponentDto {\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public scenario: ScenarioComponentDto = new ScenarioComponentDto(),\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<string> = [],\n        public datasetId: string = null) {\n    }\n}\n\nexport class ScenarioComponentDto {\n    constructor(\n        public componentSteps: Array<ComponentTaskDto> = [],\n        public parameters: Array<KeyValue> = []) {\n    }\n}\n\nexport class ComponentTaskDto {\n    constructor(\n        public id: string,\n        public name: string,\n        public usage: string,\n        public task: string,\n        public steps: Array<ComponentTaskDto>,\n        public parameters: Array<KeyValue>,\n        public strategy: Strategy,\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = []) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "usage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "steps",
                        "type": "Array<ComponentTaskDto>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 219,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "usage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "steps",
                        "type": "Array<ComponentTaskDto>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<String>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "computedParameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 228,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 221,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 222,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 226,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTaskDto>",
                    "optional": false,
                    "description": "",
                    "line": 225,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "strategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Strategy",
                    "optional": false,
                    "description": "",
                    "line": 227,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<String>",
                    "optional": false,
                    "description": "",
                    "line": 229,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "usage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 223,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Dataset",
            "id": "class-Dataset-cc45e465c954ad0632723131e99c02a28eeb366b20f3fb0a2c575ae8ac3a2907be45b46e4dc6a6d0da26cc89ccf31725382d562b3769977bae60eef68b11447e",
            "file": "src/app/core/model/dataset.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { KeyValue } from './component-task.model';\nimport { areEquals } from '@shared';\n\nexport class Dataset {\n    constructor(\n        public name: string = '',\n        public description: string = '',\n        public tags: Array<string> = [],\n        public lastUpdated: Date,\n        public uniqueValues: Array<KeyValue>,\n        public multipleValues: Array<Array<KeyValue>>,\n        public version?: number,\n        public id?: string) {\n    }\n\n    getMultipleValueHeader(): Array<string> {\n        if (this.multipleValues.length > 0) {\n            return this.multipleValues[0].map(v => v.key);\n        }\n        return [];\n    }\n\n    public equals(obj: Dataset): boolean {\n        return obj\n            && areEquals(this.name, obj.name)\n            && areEquals(this.description, obj.description)\n            && areEquals(this.tags, obj.tags)\n            && areEquals(this.uniqueValues, obj.uniqueValues)\n            && areEquals(this.multipleValues, obj.multipleValues);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "lastUpdated",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "uniqueValues",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "multipleValues",
                        "type": "Array<Array<KeyValue>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastUpdated",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uniqueValues",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "multipleValues",
                        "type": "Array<Array<KeyValue>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "multipleValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<KeyValue>>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "uniqueValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMultipleValueHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultMissingTranslationHandler",
            "id": "class-DefaultMissingTranslationHandler-b9ced6179a2b768fc0a9cc55176bfaa14743a52ff92c0025cacaeb0e299e5423ce9198e3aec110bc94d4faa068562027702bfb16983b6445d282c6eec4e96f90",
            "file": "src/app/app.translate.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClient } from '@angular/common/http';\nimport { MissingTranslationHandler, MissingTranslationHandlerParams } from '@ngx-translate/core';\n\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\nexport class DefaultMissingTranslationHandler implements MissingTranslationHandler {\n    handle(params: MissingTranslationHandlerParams) {\n        return params.key + '*';\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "handle",
                    "args": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "MissingTranslationHandlerParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "MissingTranslationHandler"
            ]
        },
        {
            "name": "Entry",
            "id": "class-Entry-7dd6b7ffa5267cbc16c375ceb0c8e53e9061adf607a66fc15fd6391a61adb9ed34ca7b4db2845dce76bac668d5594783d3bea8ac22c013fb95ab2c52f75b1045",
            "file": "src/app/core/model/entry.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Entry {\n    constructor(\n        public key: string,\n        public value: string\n    ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EnvironmentMetadata",
            "id": "class-EnvironmentMetadata-50fb796dda9562f36db06047487d90fd684fffa26ac2781a26beda355700a41e37ec60340972106785484551c44cad181efe0fe04e4f5f506d780b0407213900",
            "file": "src/app/core/model/environment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Entry } from './entry.model';\n\nexport class EnvironmentMetadata {\n    constructor(\n        public name: string,\n        public description: string,\n        public targets: Array<Target> = []) { }\n}\n\nexport class Target {\n    constructor(\n        public name: string,\n        public url: string,\n        public properties: Array<Entry> = []\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "targets",
                        "type": "Array<Target>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targets",
                        "type": "Array<Target>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "targets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Target>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Equals",
            "id": "class-Equals-0bdd0d098f4cfc25ce3e652c934e56891b0acfccee15db97d0f124491e0d159cdb3c32a075baadb63439862998c124395da713665d4684c5927626f2e6633bbe",
            "file": "src/app/shared/equals.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class Equals<T> {\n  abstract equals(obj: T): boolean;\n}\n\n// Unlike classes, interfaces exist only at compile-time. It is not possible to do a common instanceof check\nexport function instanceOfEquals<T>(obj: any): obj is Equals<T> {\n  return 'equals' in obj;\n}\n\nexport function areEquals(val1: any, val2: any): boolean {\n  // NaN === NaN --> false\n  // isNaN(undefined) --> true\n  if (isNaN(val1) && isNaN(val2) && typeof val1 === 'number' && typeof val2 === 'number') return true;\n\n  if (val1 === val2) return true;\n\n  if (typeof val1 === 'object') {\n    if (val1 == null) return false;\n    if (val2 == null) return false;\n\n    if ((val1 instanceof Array) && (val2 instanceof Array)) {\n      if (val1.length != val2.length) return false;\n      for (const idx in val1) {\n        if (!areEquals(val1[idx], val2[idx])) return false;\n      }\n\n      return true;\n    }\n\n    if (instanceOfEquals(val1) && instanceOfEquals(val2)) {\n      return val1.equals(val2);\n    }\n\n    return val1 == val2;\n  }\n\n  return false;\n}\n\nexport function isNotEmpty(value: string): boolean {\n  return value && value !== '';\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExampleParameter",
            "id": "class-ExampleParameter-215c540e2dfe8b2b97b52ad99d0f7d9ee32b23c6e17fd95c6652f3be0fac3fc85b5df9619f7ef4376cda73b6a8dba04c340c54bbaea28b49a0d5a30dd8efaa8a",
            "file": "src/app/core/model/scenario/example-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Equals, areEquals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\n\nexport class ExampleParameter implements Equals<ExampleParameter>, Clonable<ExampleParameter> {\n  constructor(\n    public name: string,\n    public value: any\n  ) { }\n\n  public equals(obj: ExampleParameter): boolean {\n    return obj && areEquals(this.name, obj.name) && areEquals(this.value, obj.value);\n  }\n\n  public clone(): ExampleParameter {\n    return new ExampleParameter(\n      cloneAsPossible(this.name),\n      cloneAsPossible(this.value)\n    );\n  }\n}\n\nexport class ExampleParameters implements Equals<ExampleParameters>, Clonable<ExampleParameters> {\n\n  constructor(\n    public params: ExampleParameter[] = []\n  ) { }\n\n  static deserialize(jsonObject: any): ExampleParameters {\n    if (jsonObject === undefined) {\n      return new ExampleParameters();\n    }\n\n    const exampleParameters = new ExampleParameters();\n\n    Object.keys(jsonObject).forEach(k => {\n      exampleParameters.params.push(new ExampleParameter(k, jsonObject[k]));\n    });\n\n    exampleParameters.orderParams();\n    return exampleParameters;\n  }\n\n  serialize(): any {\n    const paramJsonObject = {};\n    this.params.forEach(param => {\n      paramJsonObject[param.name] = (param.value != null ? param.value : '');\n    });\n    return paramJsonObject;\n  }\n\n  private orderParams() {\n    this.params.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  public equals(obj: ExampleParameters): boolean {\n    return obj && areEquals(this.params, obj.params);\n  }\n\n  public clone(): ExampleParameters {\n    return new ExampleParameters(cloneAsPossible(this.params));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ExampleParameter",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "ExampleParameter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "ExampleParameter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "ExampleParameters",
            "id": "class-ExampleParameters-215c540e2dfe8b2b97b52ad99d0f7d9ee32b23c6e17fd95c6652f3be0fac3fc85b5df9619f7ef4376cda73b6a8dba04c340c54bbaea28b49a0d5a30dd8efaa8a",
            "file": "src/app/core/model/scenario/example-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Equals, areEquals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\n\nexport class ExampleParameter implements Equals<ExampleParameter>, Clonable<ExampleParameter> {\n  constructor(\n    public name: string,\n    public value: any\n  ) { }\n\n  public equals(obj: ExampleParameter): boolean {\n    return obj && areEquals(this.name, obj.name) && areEquals(this.value, obj.value);\n  }\n\n  public clone(): ExampleParameter {\n    return new ExampleParameter(\n      cloneAsPossible(this.name),\n      cloneAsPossible(this.value)\n    );\n  }\n}\n\nexport class ExampleParameters implements Equals<ExampleParameters>, Clonable<ExampleParameters> {\n\n  constructor(\n    public params: ExampleParameter[] = []\n  ) { }\n\n  static deserialize(jsonObject: any): ExampleParameters {\n    if (jsonObject === undefined) {\n      return new ExampleParameters();\n    }\n\n    const exampleParameters = new ExampleParameters();\n\n    Object.keys(jsonObject).forEach(k => {\n      exampleParameters.params.push(new ExampleParameter(k, jsonObject[k]));\n    });\n\n    exampleParameters.orderParams();\n    return exampleParameters;\n  }\n\n  serialize(): any {\n    const paramJsonObject = {};\n    this.params.forEach(param => {\n      paramJsonObject[param.name] = (param.value != null ? param.value : '');\n    });\n    return paramJsonObject;\n  }\n\n  private orderParams() {\n    this.params.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  public equals(obj: ExampleParameters): boolean {\n    return obj && areEquals(this.params, obj.params);\n  }\n\n  public clone(): ExampleParameters {\n    return new ExampleParameters(cloneAsPossible(this.params));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "params",
                        "type": "ExampleParameter[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "ExampleParameter[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "params",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExampleParameter[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ExampleParameters",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExampleParameters",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "ExampleParameters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "ExampleParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "Execution",
            "id": "class-Execution-58685a9f31c75617cdabecafa5f6189010f77874f0a055e02645b8e877768ba998d425cbbbc23e194fbd798a53327fc0763a11974f7a756820c3607a16fb52d1",
            "file": "src/app/core/model/scenario/execution.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Execution {\n\n  public static NO_EXECUTION: Execution = new Execution(null, null, null, null, null, null, null);\n\n  constructor(\n    public duration: number,\n    public status: string,\n    public report: string,\n    public executionId: number,\n    public time: Date,\n    public environment: string,\n    public user: string,\n    public info?: string,\n    public error?: string,\n  ) { }\n\n  static deserializeExecutions(jsonObject: any): Execution[] {\n    return jsonObject.map(execution => Execution.deserialize(execution));\n  }\n\n  static deserialize(jsonObject: any): Execution {\n    return new Execution(\n      jsonObject.duration,\n      jsonObject.status,\n      jsonObject.report,\n      jsonObject.executionId,\n      new Date(jsonObject.time),\n      jsonObject.environment,\n      jsonObject.user,\n      jsonObject.info,\n      jsonObject.error\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "duration",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "report",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "user",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "info",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "duration",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "report",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "info",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "NO_EXECUTION",
                    "defaultValue": "new Execution(null, null, null, null, null, null, null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Execution",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "report",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Execution",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deserializeExecutions",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Execution[]",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FakeLoader",
            "id": "class-FakeLoader-41dc22fbb4e9697a2299fa43153bf204213806ee6dc6436f6f9c628d357519f25a9d5397e4891bef90cc82eefc95786a4405701916beba879a617ca2c3ef869f",
            "file": "src/app/testing/translate-testing.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TranslateModule, TranslateLoader, TranslatePipe, TranslateService } from '@ngx-translate/core';\nimport { NgModule, PipeTransform, Pipe, Injectable, EventEmitter } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nconst TRANSLATIONS_EN = require('src/assets/i18n/en.json');\n\nexport class FakeLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of(TRANSLATIONS_EN);\n    }\n}\n\n@Pipe({\n    name: 'translate'\n})\nexport class TranslatePipeMock implements PipeTransform {\n    public name = 'translate';\n\n    public transform(query: string, ...args: any[]): any {\n        return fromKey(query);\n    }\n}\n\n@Injectable()\nexport class TranslateServiceStub {\n    public get(key: string): Observable<string> {\n        return of(fromKey(key));\n    }\n    public onLangChange: EventEmitter<any> = new EventEmitter();\n    public onTranslationChange: EventEmitter<any> = new EventEmitter();\n    public onDefaultLangChange: EventEmitter<any> = new EventEmitter();\n}\n\nfunction fromKey(key: string): string {\n    let r = TRANSLATIONS_EN;\n    key.split('.').forEach((s) => { if (r) r = r[s]; });\n    if (r) { return r; } else { return key; }\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipeMock\n    ],\n    providers: [\n        { provide: TranslateService, useClass: TranslateServiceStub },\n        { provide: TranslatePipe, useClass: TranslatePipeMock },\n    ],\n    imports: [\n        TranslateModule.forRoot({\n            loader: { provide: TranslateLoader, useClass: FakeLoader },\n        })\n    ],\n    exports: [\n        TranslatePipeMock,\n        TranslateModule\n    ]\n})\nexport class TranslateTestingModule {\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "TranslateLoader"
            ]
        },
        {
            "name": "FunctionalStep",
            "id": "class-FunctionalStep-aa6f35409b64b9856818ac07ecb4be0664ddedf6068f0df839f8cfa4605686b2b96ef2f1030c72f7fc32dfd1d9cd60f86e6f05e0e1a34909872ab8c20778a339",
            "file": "src/app/core/model/scenario/functional-step.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { addOptionalParam } from '@shared/tools/object-utils';\nimport { areEquals, Equals } from '@shared/equals';\nimport { Clonable, cloneAsPossible } from '@shared/clonable';\nimport { getStepParamRegExp } from '@shared/tools/function-step-utils';\nimport { TechnicalStep } from '@core/model/scenario/technical-step.model';\nimport { Strategy } from '@core/model/scenario/strategy.model';\nimport { ReferentialStep } from '@core/model/referential-step.model';\n\nexport class FunctionalStep implements Equals<FunctionalStep>, Clonable<FunctionalStep> {\n\n  constructor(\n    public id: string, // transient\n    public sentence = '',\n    public implementation?: TechnicalStep,\n    public strategy?: Strategy,\n    public subSteps: Array<FunctionalStep> = []\n  ) { }\n\n  static deserialize(jsonObject: any): FunctionalStep {\n    const sentence = jsonObject['sentence'];\n    const implementation = jsonObject['implementation'];\n    const strategy = jsonObject['strategy'];\n    const subSteps = jsonObject['subSteps'];\n\n    return new FunctionalStep(\n      '',\n      sentence ? sentence : '',\n      implementation ? new TechnicalStep(implementation.task) : null,\n      strategy ? new Strategy(strategy.type, strategy.parameters) : null,\n      subSteps ? subSteps.map(subStep => FunctionalStep.deserialize(subStep)) : []\n    );\n  }\n\n  serialize(): any {\n    const jsonObject = {};\n\n    jsonObject['sentence'] = this.sentence;\n    addOptionalParam(jsonObject, 'implementation', this.implementation);\n    addOptionalParam(jsonObject, 'strategy', this.strategy);\n    jsonObject['subSteps'] = this.subSteps.map(subStep => subStep.serialize());\n\n    return jsonObject;\n  }\n\n  containsStepParam(stepParamName: string): boolean {\n    const regExp = getStepParamRegExp(stepParamName);\n    return this.sentence.search(regExp) >= 0 || (this.implementation == null ? false : this.implementation.task.search(regExp) >= 0);\n  }\n\n  public equals(obj: FunctionalStep): boolean {\n    return obj\n      && areEquals(this.sentence, obj.sentence)\n      && areEquals(this.implementation, obj.implementation)\n      && areEquals(this.strategy, obj.strategy)\n      && areEquals(this.subSteps, obj.subSteps);\n  }\n\n  public clone(): FunctionalStep {\n    return new FunctionalStep(\n      cloneAsPossible(this.id),\n      cloneAsPossible(this.sentence),\n      cloneAsPossible(this.implementation),\n      cloneAsPossible(this.strategy),\n      cloneAsPossible(this.subSteps)\n    );\n  }\n}\n\nexport function mapReferentialStepToFunctionalStep(refStep: ReferentialStep) {\n  const step: FunctionalStep = new FunctionalStep(refStep.id, refStep.name);\n\n  if (refStep.task) {\n    try {\n      const task = JSON.parse(refStep.task);\n      if (task.name) {\n        step.sentence = task.name;\n        delete task.name;\n      }\n      step.implementation = new TechnicalStep(JSON.stringify(task));\n    } catch (error) {\n      step.implementation = new TechnicalStep(refStep.task);\n    }\n  }\n\n  if (refStep.steps) {\n    refStep.steps.forEach(\n      subStep => step.subSteps.push(mapReferentialStepToFunctionalStep(subStep))\n    );\n  }\n\n  return step;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sentence",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "implementation",
                        "type": "TechnicalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "subSteps",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sentence",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "implementation",
                        "type": "TechnicalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "strategy",
                        "type": "Strategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subSteps",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "implementation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TechnicalStep",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sentence",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "strategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Strategy",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subSteps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<FunctionalStep>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "FunctionalStep",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "containsStepParam",
                    "args": [
                        {
                            "name": "stepParamName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepParamName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FunctionalStep",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "GitRemoteConfig",
            "id": "class-GitRemoteConfig-11afbe90a340857f6fe5755eb84acb8e35db86afa81443a087163e416691de25de7a4c01687163ce99c9e8ec9a6458fed170de248eccce70987ab6164313da7e",
            "file": "src/app/core/model/git-remote-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GitRemoteConfig {\n    constructor(\n      public name: string,\n      public url: string,\n      public branch: string,\n      public privateKeyPath: string,\n      public privateKeyPassphrase: string,\n    ) { }\n  }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "branch",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "privateKeyPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "privateKeyPassphrase",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "branch",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "privateKeyPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "privateKeyPassphrase",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "branch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "privateKeyPassphrase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "privateKeyPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GitRepository",
            "id": "class-GitRepository-5b3e0ae1aa9c49c88a54bc867e5a05f01659d2619e4b4eba5a12cf838768a9ff323ee737ef739679ad30d2610def8e1cf9b54cc60ae8398e1970894f7e69abfe",
            "file": "src/app/core/model/git-repository.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GitRepository {\n    constructor(\n      public id: number,\n      public url: string,\n      public sourceDirectory: string,\n      public name: string,\n    ) { }\n\n    static deserializeGitRepositories(jsonObject: any): GitRepository[] {\n      return jsonObject.map(execution => GitRepository.deserialize(execution));\n    }\n\n    static deserialize(jsonObject: any): GitRepository {\n      return new GitRepository(\n        jsonObject.id,\n        jsonObject.url,\n        jsonObject.sourceDirectory,\n        jsonObject.name\n      );\n    }\n  }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sourceDirectory",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sourceDirectory",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sourceDirectory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GitRepository",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deserializeGitRepositories",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GitRepository[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GwtTestCase",
            "id": "class-GwtTestCase-7095f6bebedaed2ddfe003266eaecca187a59d67aa14c19d26841dfa11528b78e381ad8b1c6b0c483c94997272e8b8a86b958a4c669a06cdae305e45f8cc081c",
            "file": "src/app/core/model/scenario/gwt-test-case.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { addOptionalParam } from '@shared/tools/object-utils';\nimport { areEquals, Equals } from '@shared/equals';\nimport { Clonable, cloneAsPossible } from '@shared/clonable';\nimport { ExampleParameters } from '@core/model/scenario/example-parameters.model';\nimport { Execution } from '@core/model/scenario/execution.model';\nimport { Scenario } from '@core/model/scenario/scenario.model';\n\nexport class GwtTestCase implements Equals<GwtTestCase>, Clonable<GwtTestCase> {\n\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public repositorySource?: string,\n        public executions: Array<Execution> = [],\n        public tags?: Array<string>,\n        public scenario: Scenario = new Scenario(),\n        public wrappedParams: ExampleParameters = new ExampleParameters()\n    ) {\n    }\n\n    static deserialize(jsonObject: any): GwtTestCase {\n        return new GwtTestCase(\n            jsonObject.id,\n            jsonObject.title || 'Title',\n            jsonObject.description || 'Description',\n            jsonObject.creationDate,\n            jsonObject.updateDate,\n            jsonObject.version,\n            jsonObject.author,\n            jsonObject.repositorySource,\n            Execution.deserializeExecutions(jsonObject.executions),\n            jsonObject.tags,\n            Scenario.deserialize(jsonObject.scenario),\n            ExampleParameters.deserialize(jsonObject.computedParameters)\n        );\n    }\n\n    serialize(): any {\n        const jsonObject = {};\n\n        addOptionalParam(jsonObject, 'id', this.id);\n        jsonObject['title'] = this.title;\n        jsonObject['description'] = this.description;\n        addOptionalParam(jsonObject, 'creationDate', this.creationDate);\n        addOptionalParam(jsonObject, 'updateDate', this.updateDate);\n        addOptionalParam(jsonObject, 'version', this.version);\n        addOptionalParam(jsonObject, 'author', this.author);\n        addOptionalParam(jsonObject, 'repositorySource', this.repositorySource);\n        jsonObject['executions'] = this.executions;\n        addOptionalParam(jsonObject, 'tags', this.tags);\n        jsonObject['scenario'] = this.scenario.serialize();\n        addOptionalParam(jsonObject, 'computedParameters', this.wrappedParams.serialize());\n        return jsonObject;\n    }\n\n    public equals(obj: GwtTestCase): boolean {\n        return obj\n            && areEquals(this.title, obj.title)\n            && areEquals(this.description, obj.description)\n            && areEquals(this.tags, obj.tags)\n            && areEquals(this.scenario, obj.scenario)\n            && areEquals(this.wrappedParams, obj.wrappedParams);\n    }\n\n    public clone(): GwtTestCase {\n        return new GwtTestCase(\n            null,\n            cloneAsPossible(this.title),\n            cloneAsPossible(this.description),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.scenario),\n            cloneAsPossible(this.wrappedParams)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'"
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "scenario",
                        "type": "Scenario",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Scenario()"
                    },
                    {
                        "name": "wrappedParams",
                        "type": "ExampleParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new ExampleParameters()"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenario",
                        "type": "Scenario",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Scenario()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "wrappedParams",
                        "type": "ExampleParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new ExampleParameters()",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "'Description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Execution>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "repositorySource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenario",
                    "defaultValue": "new Scenario()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "wrappedParams",
                    "defaultValue": "new ExampleParameters()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExampleParameters",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "GwtTestCase",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GwtTestCase",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "GwtTestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "HomePage",
            "id": "class-HomePage-67dfaa662a993595d196842c690187737f127f0fe222f26d24b0ab31f96c4059ac4f09e320135fc9b62e433c7c3d87325bd7827a79bd36e5ef1177aa2b53608a",
            "file": "src/app/core/model/home-page.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class HomePage {\n    constructor(\n        public content: string = ''\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "content",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "content",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Implementation",
            "id": "class-Implementation-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "identifier",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasTarget",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mapInputs",
                        "type": "Array<MapInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "listInputs",
                        "type": "Array<ListInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "inputs",
                        "type": "Array<SimpleInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "outputs",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validations",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "identifier",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasTarget",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapInputs",
                        "type": "Array<MapInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listInputs",
                        "type": "Array<ListInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputs",
                        "type": "Array<SimpleInput>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outputs",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validations",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hasTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "identifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SimpleInput>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listInputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ListInput>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mapInputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<MapInput>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "validations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "Implementation",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Implementation",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "InputTask",
            "id": "class-InputTask-4efd96fa00ce328b722abb1fba51b52c666cbea6d886f176ded8d4a9ae9a613bd35cc2dacb62c5304631b3776b0ed172d331fa3cf179282281c5ee15f2210032",
            "file": "src/app/core/model/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Task {\n\n  constructor(\n    public identifier: string,\n    public inputs: Array<InputTask> = [],\n    public target: boolean\n  ) { }\n\n}\n\nexport class InputTask {\n\n    constructor(\n      public name: string,\n      public type: string,\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "JiraPluginConfiguration",
            "id": "class-JiraPluginConfiguration-fe7008c100abf5ad81861101e5139b7ff458fb77d492b7222baf3ff0560295af6e88948757148af4a3b1def9f9168cfc425b439036da4b66da422b0ecf98bb29",
            "file": "src/app/core/model/jira-plugin-configuration.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class JiraPluginConfiguration {\n    constructor(\n        public url: string,\n        public username: string,\n        public password: string) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "username",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "JiraScenario",
            "id": "class-JiraScenario-4edd69ecdf19a807ca1cf98f5fd8a83bd4d5ca487fd479db1cb9ab72cd15d73327e968042890efdaba46de091d52225fc1228230feae9c0d6e5e9606c962b1c1",
            "file": "src/app/core/model/jira-scenario.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class JiraScenario {\n    constructor(\n        public id: string,\n        public chutneyId: string,\n        public executionStatus?: string) {\n    }\n}\n\nexport enum XrayStatus {\n    PASS = 'PASS',\n    FAIL = 'FAIL'\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chutneyId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executionStatus",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chutneyId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executionStatus",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "chutneyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "KeyValue",
            "id": "class-KeyValue-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "KeyValue",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "KeyValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "KeyValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "Linkifier",
            "id": "class-Linkifier-bddd5ac17596d264aa363b20d79e615f91e9170df77276c254581bcdf0b09cf254a1d6927555e5473703e6b37b6e8201bcedc44b56903606da22cab70cb14453",
            "file": "src/app/core/model/linkifier.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Linkifier {\n    constructor(public pattern: string,\n                public link: string,\n                public id?: string) {\n        if (this.id == null) {\n            this.id = this.hash(pattern) + this.hash(link);\n        }\n    }\n\n    hash(s: string) {\n        for (var i = 0, h = 0; i < s.length; i++) {\n            h = Math.imul(31, h) + s.charCodeAt(i) | 0;\n        }\n        return h.toString();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pattern",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "pattern",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hash",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ListInput",
            "id": "class-ListInput-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "values",
                        "type": "Array<Object>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 114,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "type": "Array<Object>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Object>",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ListInput",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "MapInput",
            "id": "class-MapInput-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "values",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 129,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "MapInput",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "NetworkConfiguration",
            "id": "class-NetworkConfiguration-d710b368db1cd519f9c16c95a2fdccedfffca04dcecc42b56c11ed1ccecf515581fefde2005f87d898a71163a32fe09f3232cfd880b9adbf1f645d9515cd550c",
            "file": "src/app/core/model/agent-network/network-configuration.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AgentInfo } from '.';\n\nexport class NetworkConfiguration {\n    constructor(\n        public agentNetworkConfiguration: Array<AgentInfo>\n    ) {\n\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentNetworkConfiguration",
                        "type": "Array<AgentInfo>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "agentNetworkConfiguration",
                        "type": "Array<AgentInfo>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "agentNetworkConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<AgentInfo>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParameterDefinition",
            "id": "class-ParameterDefinition-cd5d9b2c72b1e88e4171e6546c3c5a800d4cfe3c8c2bd176169d847aa8bedbb7bbc7a32f88b96aa1d53b1bab4c35b6f1f02e61373815ccc57e31137e82885c87",
            "file": "src/app/core/model/scenario/strategy-parameter-definition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\n\nexport class ParameterDefinition implements Equals<ParameterDefinition>, Clonable<ParameterDefinition> {\n    constructor(\n        public name: string,\n        public type: string\n    ) {\n    }\n\n    public equals(obj: ParameterDefinition): boolean {\n        return obj\n            && areEquals(this.name, obj.name)\n            && areEquals(this.type, obj.type);\n    }\n\n    public clone(): ParameterDefinition {\n        return new ParameterDefinition(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ParameterDefinition",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "ParameterDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "ParameterDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "ReferentialStep",
            "id": "class-ReferentialStep-c05b55153d35211a7d46199afb61e75cf6fdce3718636ed8e2afee373133c753310c849c93e8c296212317bf8b39a9c78a158aa4d0aea2aaf1797f4790413081",
            "file": "src/app/core/model/referential-step.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ReferentialStep {\n\n  constructor(public id: string,\n    public name: string,\n    public usage: string,\n    public steps?: Array<ReferentialStep>,\n    public task?: string\n  ) { }\n\n}\n\nexport function stepsFromObjects(fromJsonObjects: Array<Object>) {\n  return fromJsonObjects.map(value => stepFromObject(value));\n}\n\nexport function stepFromObject(fromJsonObject: Object) {\n  return new ReferentialStep(fromJsonObject['id'],\n    fromJsonObject['name'],\n    fromJsonObject['usage'],\n    fromJsonObject['steps'],\n    fromJsonObject['task']\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "usage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "steps",
                        "type": "Array<ReferentialStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "usage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "steps",
                        "type": "Array<ReferentialStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ReferentialStep>",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "usage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Row",
            "id": "class-Row-b812cf5f999ada2aadb73ca5fd25946dd0ec5c54a43bf97c6ce8f3ad57dbc680cca4fe77f70d0a6b121919a74ce08a3efd9cb09a00f52fb0c620757fe0671221",
            "file": "src/app/core/model/table.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Table {\n    constructor(public columnNames: Array<string>,\n        public rows: Array<Row>) { }\n}\n\nexport class Row {\n    constructor(public values: Array<string>) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "values",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "values",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Scenario",
            "id": "class-Scenario-c5db4b016086035f3e4fbbae41368cba7a919640034a51a301c65cd8eaede15b8adf072e1d24e9a5a31151a47f68744a786210be90fe83b25faf645113648693",
            "file": "src/app/core/model/scenario/scenario.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\nimport { FunctionalStep } from '@core/model/scenario/functional-step.model';\n\nexport class Scenario implements Equals<Scenario>, Clonable<Scenario> {\n\n    constructor(\n        public givens: Array<FunctionalStep> = [new FunctionalStep('', '')],\n        public when: FunctionalStep = new FunctionalStep('', ''),\n        public thens: Array<FunctionalStep> = [new FunctionalStep('', '')]\n    ) { }\n\n    static deserialize(jsonObject: any): Scenario {\n        const givensJsonObject = jsonObject.givens;\n        const whenJsonObject = jsonObject.when;\n        const thensJsonObject = jsonObject.thens;\n\n        return new Scenario(\n            givensJsonObject ? givensJsonObject.map(givenJsonObject => FunctionalStep.deserialize(givenJsonObject)) : [],\n            whenJsonObject ? FunctionalStep.deserialize(whenJsonObject) : new FunctionalStep('', ''),\n            thensJsonObject ? thensJsonObject.map(thenJsonObject => FunctionalStep.deserialize(thenJsonObject)) : [new FunctionalStep('', '')]\n        );\n    }\n\n    serialize(): any {\n        const jsonObject = {};\n        jsonObject['givens'] = this.givens.map(functionalStep => functionalStep.serialize());\n        jsonObject['when'] = this.when.serialize();\n        jsonObject['thens'] = this.thens.map(functionalStep => functionalStep.serialize());\n        return jsonObject;\n    }\n\n    public equals(obj: Scenario): boolean {\n        return obj\n            && areEquals(this.givens, obj.givens)\n            && areEquals(this.when, obj.when)\n            && areEquals(this.thens, obj.thens);\n    }\n\n    public clone(): Scenario {\n        return new Scenario(\n            cloneAsPossible(this.givens),\n            cloneAsPossible(this.when),\n            cloneAsPossible(this.thens)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "givens",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new FunctionalStep('', '')]"
                    },
                    {
                        "name": "when",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FunctionalStep('', '')"
                    },
                    {
                        "name": "thens",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new FunctionalStep('', '')]"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "givens",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new FunctionalStep('', '')]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "when",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new FunctionalStep('', '')",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "thens",
                        "type": "Array<FunctionalStep>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[new FunctionalStep('', '')]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "givens",
                    "defaultValue": "[new FunctionalStep('', '')]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<FunctionalStep>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "thens",
                    "defaultValue": "[new FunctionalStep('', '')]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<FunctionalStep>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "when",
                    "defaultValue": "new FunctionalStep('', '')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FunctionalStep",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "jsonObject",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "ScenarioComponent",
            "id": "class-ScenarioComponent-9ece91419e4ad8311d0516c1b60317930b8e1a2f22d0a8e6f040e0747319d3e08e91faff95f4752dd04d12aa887a10168dff3fd22ad897d720efb3735cf57603",
            "file": "src/app/core/model/scenario/scenario-component.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { Clonable, cloneAsPossible } from '@shared/clonable';\nimport { ComponentTask, KeyValue } from '../component-task.model';\n\nexport class ScenarioComponent implements Equals<ScenarioComponent>, Clonable<ScenarioComponent> {\n\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public componentSteps: Array<ComponentTask> = [],\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<string> = [],\n        public datasetId: string = null\n    ) {\n    }\n\n    public equals(obj: ScenarioComponent): boolean {\n        return obj\n            && areEquals(this.title, obj.title)\n            && areEquals(this.description, obj.description)\n            && areEquals(this.componentSteps, obj.componentSteps)\n            && areEquals(this.parameters, obj.parameters)\n            && areEquals(this.tags, obj.tags)\n            && areEquals(this.computedParameters, obj.computedParameters)\n            && areEquals(this.datasetId, obj.datasetId);\n    }\n\n    public clone(): ScenarioComponent {\n        return new ScenarioComponent(\n            cloneAsPossible(this.id), // TODO - Is cloning id is a good idea ?\n            cloneAsPossible(this.title),\n            cloneAsPossible(this.description),\n            cloneAsPossible(this.creationDate),\n            cloneAsPossible(this.updateDate),\n            cloneAsPossible(this.version),\n            cloneAsPossible(this.author),\n            cloneAsPossible(this.componentSteps),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.datasetId)\n        );\n    }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'"
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "componentSteps",
                        "type": "Array<ComponentTask>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentSteps",
                        "type": "Array<ComponentTask>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "componentSteps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "computedParameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasetId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "'Description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "ScenarioComponent",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "ScenarioComponentDto",
            "id": "class-ScenarioComponentDto-b3287a18de94c57dde2ff9099f84aa953b54f56e71f74ced4cd2f61a9cf99bb8c284b5a3c7c41bc28e9b83a207e996ee76c32b3eda7c59ee35d43f1c1373e22e",
            "file": "src/app/core/services/component.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, publishReplay, refCount } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport {\n    ComponentTask,\n    Implementation,\n    InputTask,\n    KeyValue,\n    ScenarioComponent,\n    Strategy,\n    Task\n} from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComponentService {\n\n    private resourceUrl = '/api/task/v1';\n    private stepUrl = '/api/steps/v1';\n    private componentUrl = '/api/scenario/component-edition';\n    private stepExecutionUrl = '/api/ui/component/execution/v1';\n\n    private tasks: Observable<Array<Task>>;\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTasks(): Observable<Array<Task>> {\n        if (!this.tasks) {\n            this.tasks = this.httpClient.get<Array<Task>>(environment.backend + this.resourceUrl)\n                .pipe(\n                    map((res: Array<Task>) => {\n                        res = res.map(t => new Task(\n                            t.identifier,\n                            t.inputs.map(ti => new InputTask(ti.name, ti.type)),\n                            t.target\n                        ));\n                        res.sort((a, b) => a.identifier.localeCompare(b.identifier));\n                        return res;\n                    }),\n                    publishReplay(1),\n                    refCount()\n                );\n        }\n        return this.tasks;\n    }\n\n    findAllComponent(): Observable<Array<ComponentTask>> {\n        return this.httpClient.get<Array<ComponentTask>>(environment.backend + this.stepUrl + '/all')\n            .pipe(map((res: Array<ComponentTask>) => {\n                return res.map(c => this.mapToComponentTask(c, true));\n            }));\n    }\n\n    save(component: ComponentTask): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.stepUrl,\n            this.mapToComponentTaskDto(component), {responseType: 'text'}\n        );\n    }\n\n    delete(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + this.stepUrl + `/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    execute(component: ComponentTask, env: string): Observable<Object> {\n        return this.httpClient.post(environment.backend + `${this.stepExecutionUrl}/${component.id}/${env}`, '')\n            .pipe(map((res: Object) => {\n                return res;\n            }));\n    }\n\n    saveComponentTestCase(scenarioComponent: ScenarioComponent): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.componentUrl,\n            this.mapScenarioComponentToDto(scenarioComponent), {responseType: 'text'}\n        );\n    }\n\n    findComponentTestCase(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, true))\n        );\n    }\n\n    findComponentTestCaseExecutableParameters(id: string): Observable<Array<KeyValue>> {\n        return this.httpClient.get<Array<KeyValue>>(environment.backend + `${this.componentUrl}/${id}/executable/parameters`);\n    }\n\n    findComponentTestCaseWithoutDeserializeImpl(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}/executable`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, false))\n        );\n    }\n\n    deleteComponentTestCase(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + `${this.componentUrl}/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    findParents(id: string): Observable<any> {\n        return this.httpClient.get(environment.backend + `${this.stepUrl}/${id}/parents`);\n    }\n\n    private mapScenarioComponentToDto(scenarioComponent: ScenarioComponent): TestCaseComponentDto {\n        return new TestCaseComponentDto(scenarioComponent.id,\n            scenarioComponent.title,\n            scenarioComponent.description,\n            scenarioComponent.creationDate,\n            scenarioComponent.updateDate,\n            scenarioComponent.version,\n            scenarioComponent.author,\n            new ScenarioComponentDto(\n                scenarioComponent.componentSteps.map((componentTask: ComponentTask) => this.mapComponentTaskToDto(componentTask)),\n                scenarioComponent.parameters\n            ),\n            scenarioComponent.computedParameters,\n            scenarioComponent.tags,\n            scenarioComponent.datasetId\n        );\n    }\n\n    private mapComponentTaskToDto(componentTask: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            componentTask.id,\n            componentTask.name,\n            null,\n            null,\n            [],\n            componentTask.parameters,\n            componentTask.strategy,\n            componentTask.computedParameters);\n    }\n\n    private mapJsonToScenarioComponent(jsonObject: any, withDeserializeImplementation: boolean): ScenarioComponent {\n        return new ScenarioComponent(\n            jsonObject.id,\n            jsonObject.title,\n            jsonObject.description,\n            jsonObject.creationDate,\n            jsonObject.updateDate,\n            jsonObject.version,\n            jsonObject.author,\n            jsonObject.scenario.componentSteps.map((json: any) => this.mapToComponentTask(json, withDeserializeImplementation)),\n            jsonObject.scenario.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.datasetId\n        );\n    }\n\n    private mapToComponentTask(jsonObject: any, withDeserializeImplementation: boolean): ComponentTask {\n        let impl = Implementation.deserialize(JSON.parse(jsonObject.task));\n\n        if (jsonObject.task && !withDeserializeImplementation) {\n            impl =  JSON.parse(jsonObject.task);\n        }\n\n        return new ComponentTask(\n            jsonObject.name,\n            impl,\n            jsonObject.steps.map(c => this.mapToComponentTask(c, withDeserializeImplementation)),\n            jsonObject.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.strategy != null ? new Strategy(jsonObject.strategy.type, jsonObject.strategy.parameters) : null,\n            jsonObject.id\n        );\n\n    }\n\n    private mapToComponentTaskDto(component: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            component.id,\n            component.name,\n            null,\n            component.implementation != null ? JSON.stringify(component.implementation) : null,\n            component.children.map(c => this.mapToComponentTaskDto(c)),\n            component.parameters,\n            component.strategy,\n            component.computedParameters,\n            component.tags\n        );\n    }\n}\n\nexport class TestCaseComponentDto {\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public scenario: ScenarioComponentDto = new ScenarioComponentDto(),\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<string> = [],\n        public datasetId: string = null) {\n    }\n}\n\nexport class ScenarioComponentDto {\n    constructor(\n        public componentSteps: Array<ComponentTaskDto> = [],\n        public parameters: Array<KeyValue> = []) {\n    }\n}\n\nexport class ComponentTaskDto {\n    constructor(\n        public id: string,\n        public name: string,\n        public usage: string,\n        public task: string,\n        public steps: Array<ComponentTaskDto>,\n        public parameters: Array<KeyValue>,\n        public strategy: Strategy,\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = []) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentSteps",
                        "type": "Array<ComponentTaskDto>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 212,
                "jsdoctags": [
                    {
                        "name": "componentSteps",
                        "type": "Array<ComponentTaskDto>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "componentSteps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTaskDto>",
                    "optional": false,
                    "description": "",
                    "line": 214,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 215,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScenarioExecutionReport",
            "id": "class-ScenarioExecutionReport-67271f5fe34a3302a72bbd23fa3178da9e6f3149080504c69306d533e940c3de2f6734355743c638bb48afd9603e86ffbb5bde7bd707c0752977efd799768d8d",
            "file": "src/app/core/model/scenario/scenario-execution-report.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { StepExecutionReport } from '@core/model/scenario/step-execution-report.model';\n\nexport class ScenarioExecutionReport {\n    constructor(\n        public executionId: string,\n        public report: StepExecutionReport,\n        public environment: string,\n        public user: string,\n        public scenarioName?: string\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "executionId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "report",
                        "type": "StepExecutionReport",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "user",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "executionId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "report",
                        "type": "StepExecutionReport",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environment",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "report",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepExecutionReport",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScenarioExecutionReportOutline",
            "id": "class-ScenarioExecutionReportOutline-56f0bd31b5e720d9925e8b6916fb01d085b3f9db69df4c88d6b264d413dd978c3f221e2516879cc486cfe1541d933ff74c0124404c0e06448c74964c7899cf5f",
            "file": "src/app/core/model/campaign/scenario-execution-report-outline.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ScenarioExecutionReportOutline {\n    constructor(\n        public scenarioId?: string,\n        public executionId?: number,\n        public duration?: number,\n        public scenarioName?: string,\n        public status?: string,\n        public startDate?: Date,\n        public info: Array<string> = [],\n        public error: Array<string> = []\n    ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scenarioId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "duration",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "scenarioName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "info",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "error",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "scenarioId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "duration",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "info",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "error",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "info",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenarioName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScenarioIndex",
            "id": "class-ScenarioIndex-65e4326db2d1f5dae5617e6744b74176650f96a7bf3f702300347a1e07a002c55db015b48bec44d734abddfe934b5effa4e2d915889b1e3c075ba89a0af9a887",
            "file": "src/app/core/model/scenario/scenario-index.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Execution } from '@core/model/scenario/execution.model';\nimport { TestCase } from '@core/model/scenario/test-case.model';\n\nexport class ScenarioIndex {\n\n    public status;\n    public lastExecution;\n    public executionCount;\n    public isComposed;\n    public type;\n\n    constructor(\n        public id?: string,\n        public title?: string,\n        public description?: string,\n        public repositorySource?: string,\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public tags: Array<string> = [],\n        public executions?: Array<Execution>,\n        public jiraId?: string\n    ) {\n        this.status = this.findStatus();\n        this.lastExecution = this.lastTimeExec();\n        this.executionCount = this.countExecutions();\n        this.isComposed = this.findIfComposed();\n        this.type = this.setType();\n    }\n\n    private findStatus() {\n        if (this.executions && this.executions.length > 0) {\n            return this.executions[0].status;\n        } else {\n            return 'NOT_EXECUTED';\n        }\n    }\n\n    private lastTimeExec() {\n        if (this.executions && this.executions.length > 0) {\n            return this.executions[0].time;\n        } else {\n            return null;\n        }\n    }\n\n    private countExecutions() {\n        if (this.executions && this.executions.length > 0) {\n            return this.executions.length;\n        } else {\n            return 0;\n        }\n    }\n\n    private findIfComposed(): boolean {\n        return TestCase.isComposed(this.id);\n    }\n\n    private setType(): ScenarioType {\n        return this.isComposed ? ScenarioType.COMPOSED : ScenarioType.FORM;\n    }\n}\n\nexport enum ScenarioType {\n    FORM = 'FORM',\n    COMPOSED = 'COMPOSED'\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "jiraId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executionCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Execution>",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isComposed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "jiraId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastExecution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "repositorySource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "countExecutions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findIfComposed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lastTimeExec",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setType",
                    "args": [],
                    "optional": false,
                    "returnType": "ScenarioType",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectableTags",
            "id": "class-SelectableTags-223e22b085edd28aad8304340dbe34c72d62e4278acf4c49aea7d0cbd3e9eecfde3db574eef174a25b49fe0e5e0b2ae47644d223000b221d1f7dff59250d5527",
            "file": "src/app/core/model/scenario/selectable-tags.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { contains, newInstance } from '@shared/tools/array-utils';\n\nexport class SelectableTags<T> {\n    private allTags: Array<T> = [];\n    private selectedTags: Array<T> = [];\n    private noTag = true;\n\n    initialize(allItems: Array<T>) {\n        this.allTags = allItems;\n        this.selectAll();\n    }\n\n    selected(): Array<T> {\n        return this.selectedTags;\n    }\n\n    all(): Array<T> {\n        return this.allTags;\n    }\n\n    selectAll() {\n        this.selectedTags = newInstance(this.allTags);\n        this.noTag = true;\n    }\n\n    deselectAll() {\n        this.selectedTags = [];\n        this.noTag = false;\n    }\n\n    isSelected(item: T) {\n        return contains(this.selectedTags, item);\n    }\n\n    toggleSelect(item: T) {\n        if (this.selectedTags.length === this.allTags.length) {\n            this.selectedTags = [item];\n            this.noTag = false;\n        } else {\n            if (this.isSelected(item)) {\n                this.selectedTags.splice(this.selectedTags.indexOf(item), 1);\n                this.selectedTags = newInstance(this.selectedTags);\n            } else {\n                this.selectedTags.push(item);\n                this.selectedTags = newInstance(this.selectedTags);\n            }\n        }\n    }\n\n    selectTags(items: Array<T>) {\n        this.selectedTags = items;\n    }\n\n    setNoTag(noTag) {\n        this.noTag = noTag;\n    }\n\n    toggleNoTag() {\n        this.noTag = !this.noTag;\n    }\n\n    isSelectAll() {\n        return this.noTag && this.all().length === this.selected().length;\n    }\n\n    isNoTagSelected() {\n        return this.noTag;\n    }\n}\n",
            "properties": [
                {
                    "name": "allTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "noTag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "all",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "allItems",
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "allItems",
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNoTagSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selected",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTags",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNoTag",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNoTag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SimpleInput",
            "id": "class-SimpleInput-116f13e8d68a5ea35672fc95d358cd17dff0937cb3639900ebacee06b195d3f276c56e0825f29ab0b0edef3b46525ac3c16b03da420e1107f43b19cd4c24f33c",
            "file": "src/app/core/model/component-task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Clonable, cloneAsPossible } from 'src/app/shared/clonable';\nimport { Strategy } from '@core/model/scenario';\nimport { areEquals } from '@shared';\n\nexport class ComponentTask implements Clonable<ComponentTask> {\n    constructor(\n        public name: string,\n        public implementation: Implementation,\n        public children: Array<ComponentTask>,\n        public parameters: Array<KeyValue> = [],\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = [],\n        public strategy: Strategy,\n        public id?: string,\n    ) {\n    }\n\n    public clone(): ComponentTask {\n        return new ComponentTask(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.implementation),\n            cloneAsPossible(this.children),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.computedParameters),\n            cloneAsPossible(this.tags),\n            cloneAsPossible(this.strategy),\n            cloneAsPossible(this.id));\n    }\n}\n\nexport class Implementation implements Clonable<Implementation> {\n\n    static deserialize(jsonObject: any): Implementation {\n        if (jsonObject && jsonObject.identifier != null) {\n            return new Implementation(\n                jsonObject.identifier,\n                jsonObject.target,\n                jsonObject.hasTarget,\n                jsonObject.mapInputs ? jsonObject.mapInputs : [],\n                jsonObject.listInputs ? jsonObject.listInputs : [],\n                jsonObject.inputs ? jsonObject.inputs : [],\n                jsonObject.outputs ? jsonObject.outputs : [],\n                jsonObject.validations ? jsonObject.validations : [],\n            );\n        }\n        return null;\n    }\n\n    constructor(\n        public identifier: string,\n        public target: string,\n        public hasTarget: boolean,\n        public mapInputs: Array<MapInput> = [],\n        public listInputs: Array<ListInput> = [],\n        public inputs: Array<SimpleInput> = [],\n        public outputs: Array<KeyValue>,\n        public validations: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): Implementation {\n        return new Implementation(\n            cloneAsPossible(this.identifier),\n            cloneAsPossible(this.target),\n            cloneAsPossible(this.hasTarget),\n            cloneAsPossible(this.mapInputs),\n            cloneAsPossible(this.listInputs),\n            cloneAsPossible(this.inputs),\n            cloneAsPossible(this.outputs),\n            cloneAsPossible(this.validations)\n        );\n    }\n}\n\nexport class KeyValue implements Clonable<KeyValue> {\n\n    constructor(\n        public key: string,\n        public value: any\n    ) {\n    }\n\n    public clone(): KeyValue {\n        return new KeyValue(\n            cloneAsPossible(this.key),\n            cloneAsPossible(this.value)\n        );\n    }\n\n    public equals(obj: KeyValue): boolean {\n        return obj\n            && areEquals(this.key, obj.key)\n            && areEquals(this.value, obj.value);\n    }\n}\n\nexport class SimpleInput implements Clonable<SimpleInput> {\n    constructor(\n        public name: string,\n        public value: string,\n        public type?\n    ) {\n    }\n\n    public clone(): SimpleInput {\n        return new SimpleInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.value),\n            cloneAsPossible(this.type)\n        );\n    }\n}\n\nexport class ListInput implements Clonable<ListInput> {\n    constructor(\n        public name: string,\n        public values: Array<Object>,\n    ) {\n    }\n\n    public clone(): ListInput {\n        return new ListInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n\nexport class MapInput implements Clonable<MapInput> {\n    constructor(\n        public name: string,\n        public values: Array<KeyValue>\n    ) {\n    }\n\n    public clone(): MapInput {\n        return new MapInput(\n            cloneAsPossible(this.name),\n            cloneAsPossible(this.values)\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "SimpleInput",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Clonable"
            ]
        },
        {
            "name": "Sqlresult",
            "id": "class-Sqlresult-eb9898fc77adcf9cff958b4517c42fd8b43e4ac3b4e4b59913fa4d0ea9fb0ccd40571aa2d5f9755889afd056a0e5d1a463039525aca09908b787da169aa492d0",
            "file": "src/app/core/model/sql-result.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Table } from './table.model';\n\nexport class Sqlresult {\n    constructor(public updatedRows?: number,\n        public error?: string,\n        public table?: Table) {\n\n    }\n}\n\nexport function sqlResultFromObject(fromJsonObject: Object) {\n    return new Sqlresult(\n        fromJsonObject['updatedRows'],\n        fromJsonObject['error'],\n        fromJsonObject['table']\n    );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "updatedRows",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "table",
                        "type": "Table",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "updatedRows",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "table",
                        "type": "Table",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Table",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updatedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Step",
            "id": "class-Step-cd9529179e64ef9b7124f82136f57e32bfc27acdbd5598806ad27a3010480854403449a893fe98bb2b3184c772259e41a55973e47e645a598b7a5156c0117225",
            "file": "src/app/core/model/scenario/step.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Step {\n\n    constructor(\n        public name?: string,\n        public target?: string,\n        public type?: string,\n        public inputs?: Map<string, Object>,\n        public steps?: Step[]\n    ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "inputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "steps",
                        "type": "Step[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "steps",
                        "type": "Step[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Object>",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Step[]",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StepExecutionReport",
            "id": "class-StepExecutionReport-f8783cd885f3acffebf3104435ab6b586765b8f1e9957eefa6ed2a6937cc30ae994e7505e8feb0a86c4ddd4ec907d0f2682c209e33df43865ca073af9a532bcc",
            "file": "src/app/core/model/scenario/step-execution-report.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class StepExecutionReport {\n    constructor(\n        public duration: string,\n        public status: string,\n        public startDate: string,\n        public information: string[],\n        public errors: string[],\n        public type: string,\n        public strategy: string,\n        public targetName: string,\n        public targetUrl: string,\n        public evaluatedInputs: Map<string, Object>,\n        public steps: Array<StepExecutionReport>,\n        public stepOutputs: Map<string, Object>,\n        public name?: string,\n        ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "duration",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "information",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "strategy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "targetName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "targetUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "evaluatedInputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "steps",
                        "type": "Array<StepExecutionReport>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepOutputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "duration",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "status",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startDate",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "information",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "strategy",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targetName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "targetUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "evaluatedInputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "steps",
                        "type": "Array<StepExecutionReport>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepOutputs",
                        "type": "Map<string | Object>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "evaluatedInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Object>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "information",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stepOutputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Object>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StepExecutionReport>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "strategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "targetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "targetUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Strategy",
            "id": "class-Strategy-cf343007d43cbc4cdcaf36237209ecfc428358c7a934846f6206657ab900552f23a6d51abbfeb57cf11db7546e76e54556b55d8ec5c5cea8851557061b14ab23",
            "file": "src/app/core/model/scenario/strategy.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\n\nexport class Strategy implements Equals<Strategy>, Clonable<Strategy> {\n\n  constructor(\n    public type: string,\n    public parameters: Object\n  ) {\n  }\n\n  public equals(obj: Strategy): boolean {\n    return obj && areEquals(this.type, obj.type) && areEquals(this.parameters, obj.parameters);\n  }\n\n  public clone(): Strategy {\n    return new Strategy(\n      cloneAsPossible(this.type),\n      cloneAsPossible(this.parameters)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parameters",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "Strategy",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Strategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Strategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "StrategyDefinition",
            "id": "class-StrategyDefinition-66358a870fd51bbf029256d92afae1bfe8b29661b5fda654f9cb647c82211d1f5b404558305aa165cbab9a6d66b1320ca8ad2d871d4a9bd1aeadf066de91dee4",
            "file": "src/app/core/model/scenario/strategy-definition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\nimport { ParameterDefinition } from '@core/model/scenario/strategy-parameter-definition.model';\n\nexport class StrategyDefinition implements Equals<StrategyDefinition>, Clonable<StrategyDefinition> {\n\n    constructor(\n        public type: string,\n        public parameters: ParameterDefinition[],\n        public isDefault: boolean\n    ) {\n    }\n\n    public equals(obj: StrategyDefinition): boolean {\n        return obj\n            && areEquals(this.type, obj.type)\n            && areEquals(this.parameters, obj.parameters)\n            && areEquals(this.isDefault, obj.isDefault);\n    }\n\n    public clone(): StrategyDefinition {\n        return new StrategyDefinition(\n            cloneAsPossible(this.type),\n            cloneAsPossible(this.parameters),\n            cloneAsPossible(this.isDefault)\n        );\n    }\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parameters",
                        "type": "ParameterDefinition[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isDefault",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "ParameterDefinition[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isDefault",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "StrategyDefinition",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "StrategyDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "StrategyDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "Table",
            "id": "class-Table-b812cf5f999ada2aadb73ca5fd25946dd0ec5c54a43bf97c6ce8f3ad57dbc680cca4fe77f70d0a6b121919a74ce08a3efd9cb09a00f52fb0c620757fe0671221",
            "file": "src/app/core/model/table.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Table {\n    constructor(public columnNames: Array<string>,\n        public rows: Array<Row>) { }\n}\n\nexport class Row {\n    constructor(public values: Array<string>) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "columnNames",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rows",
                        "type": "Array<Row>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "columnNames",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rows",
                        "type": "Array<Row>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "columnNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Row>",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Target",
            "id": "class-Target-50fb796dda9562f36db06047487d90fd684fffa26ac2781a26beda355700a41e37ec60340972106785484551c44cad181efe0fe04e4f5f506d780b0407213900",
            "file": "src/app/core/model/environment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Entry } from './entry.model';\n\nexport class EnvironmentMetadata {\n    constructor(\n        public name: string,\n        public description: string,\n        public targets: Array<Target> = []) { }\n}\n\nexport class Target {\n    constructor(\n        public name: string,\n        public url: string,\n        public properties: Array<Entry> = []\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "properties",
                        "type": "Array<Entry>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "properties",
                        "type": "Array<Entry>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "properties",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Entry>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TargetId",
            "id": "class-TargetId-49116dc9c1bf55a31e0bba6cf10fa69eb8a239e6f509a4b713b6cc582ca5892ef9348571887f60ccd86a81373a48bc44ab69327a0b927f9e370a5137b478d321",
            "file": "src/app/core/model/agent-network/server.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TargetId {\n    constructor(\n        public name: string\n    ) {\n    }\n\n    public asId() {\n        return this.name;\n    }\n\n    public htmlDisplay() {\n        return '<b>' + this.name + '</b>';\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "asId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "htmlDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Task",
            "id": "class-Task-4efd96fa00ce328b722abb1fba51b52c666cbea6d886f176ded8d4a9ae9a613bd35cc2dacb62c5304631b3776b0ed172d331fa3cf179282281c5ee15f2210032",
            "file": "src/app/core/model/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Task {\n\n  constructor(\n    public identifier: string,\n    public inputs: Array<InputTask> = [],\n    public target: boolean\n  ) { }\n\n}\n\nexport class InputTask {\n\n    constructor(\n      public name: string,\n      public type: string,\n    ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "identifier",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inputs",
                        "type": "Array<InputTask>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "target",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "identifier",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputs",
                        "type": "Array<InputTask>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "identifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<InputTask>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TechnicalStep",
            "id": "class-TechnicalStep-2b1322a01a90df453b5e67b2dcbe590334d33df45b17e9b3b77db3596568ca9aaa9992b608eade49a84abda1de99b7df78b93bf97e50ad961c4d80ea6778113a",
            "file": "src/app/core/model/scenario/technical-step.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { cloneAsPossible, Clonable } from '@shared/clonable';\n\nexport class TechnicalStep implements Equals<TechnicalStep>, Clonable<TechnicalStep> {\n\n  constructor(public task: string = '') { }\n\n  public equals(obj: TechnicalStep): boolean {\n    return obj && areEquals(this.task, obj.task);\n  }\n\n  public clone(): TechnicalStep {\n    return new TechnicalStep(cloneAsPossible(this.task));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "task",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "task",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "TechnicalStep",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "TechnicalStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "TechnicalStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "TestCase",
            "id": "class-TestCase-529048a4d5ae63e1aed03eb0d47580b1777824727006d7618085053df95e4fe8dc16aec25f6ae1839975e597d3673ecbaf50782b8decb44325c0e14a167e14c6",
            "file": "src/app/core/model/scenario/test-case.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { areEquals, Equals } from '@shared/equals';\nimport { Clonable, cloneAsPossible } from '@shared/clonable';\n\nimport { KeyValue } from '@core/model/component-task.model';\nimport { Execution } from '@core/model/scenario/execution.model';\nimport { ScenarioComponent } from '@core/model/scenario/scenario-component.model';\n\nexport class TestCase implements Equals<TestCase>, Clonable<TestCase> {\n\n    constructor(\n        public id?: string,\n        public title?: string,\n        public description?: string,\n        public content?: string,\n        public repositorySource?: string,\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public tags: Array<string> = [],\n        public executions?: Array<Execution>,\n        public computedParameters?: Array<KeyValue>\n    ) {\n    }\n\n    public equals(obj: TestCase): boolean {\n        return obj\n            && areEquals(this.title, obj.title)\n            && areEquals(this.description, obj.description)\n            && areEquals(this.content, obj.content)\n            && areEquals(this.tags, obj.tags)\n            && areEquals(this.computedParameters, obj.computedParameters);\n    }\n\n    public clone(): TestCase {\n        return new TestCase(\n            null,\n            cloneAsPossible(this.title),\n            cloneAsPossible(this.description),\n            cloneAsPossible(this.content),\n            null,\n            null,\n            null,\n            null,\n            null,\n            cloneAsPossible(this.tags),\n            null,\n            cloneAsPossible(this.computedParameters)\n        );\n    }\n\n    hasParameters(): boolean {\n        return (this.computedParameters && this.computedParameters.length > 0);\n    }\n\n    static isComposed(testCaseOrId: TestCase | string): boolean {\n        let id: string;\n        if (testCaseOrId instanceof TestCase) {\n            id = testCaseOrId.id;\n        } else {\n            id = testCaseOrId;\n        }\n        return (id && id.indexOf('-') > 0);\n    }\n\n    static fromRaw(raw: any): TestCase {\n        return new TestCase(\n            raw.id,\n            raw.title,\n            raw.description,\n            raw.content,\n            'local',\n            raw.creationDate,\n            raw.updateDate,\n            raw.version,\n            raw.author,\n            raw.tags,\n            raw.executions,\n            raw.computedParameters\n        );\n    }\n\n    static fromComponent(testCase: ScenarioComponent) {\n        return new TestCase(\n            testCase.id,\n            testCase.title,\n            testCase.description,\n            '',\n            'local',\n            testCase.creationDate,\n            testCase.updateDate,\n            testCase.version,\n            testCase.author,\n            [],\n            null,\n            testCase.computedParameters\n        );\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "content",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "content",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "repositorySource",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executions",
                        "type": "Array<Execution>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "computedParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "executions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Execution>",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "repositorySource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [],
                    "optional": false,
                    "returnType": "TestCase",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "TestCase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromComponent",
                    "args": [
                        {
                            "name": "testCase",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCase",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "testCase",
                            "type": "ScenarioComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromRaw",
                    "args": [
                        {
                            "name": "raw",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TestCase",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isComposed",
                    "args": [
                        {
                            "name": "testCaseOrId",
                            "type": "TestCase | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "testCaseOrId",
                            "type": "TestCase | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Equals",
                "Clonable"
            ]
        },
        {
            "name": "TestCaseComponentDto",
            "id": "class-TestCaseComponentDto-b3287a18de94c57dde2ff9099f84aa953b54f56e71f74ced4cd2f61a9cf99bb8c284b5a3c7c41bc28e9b83a207e996ee76c32b3eda7c59ee35d43f1c1373e22e",
            "file": "src/app/core/services/component.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, publishReplay, refCount } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport {\n    ComponentTask,\n    Implementation,\n    InputTask,\n    KeyValue,\n    ScenarioComponent,\n    Strategy,\n    Task\n} from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ComponentService {\n\n    private resourceUrl = '/api/task/v1';\n    private stepUrl = '/api/steps/v1';\n    private componentUrl = '/api/scenario/component-edition';\n    private stepExecutionUrl = '/api/ui/component/execution/v1';\n\n    private tasks: Observable<Array<Task>>;\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTasks(): Observable<Array<Task>> {\n        if (!this.tasks) {\n            this.tasks = this.httpClient.get<Array<Task>>(environment.backend + this.resourceUrl)\n                .pipe(\n                    map((res: Array<Task>) => {\n                        res = res.map(t => new Task(\n                            t.identifier,\n                            t.inputs.map(ti => new InputTask(ti.name, ti.type)),\n                            t.target\n                        ));\n                        res.sort((a, b) => a.identifier.localeCompare(b.identifier));\n                        return res;\n                    }),\n                    publishReplay(1),\n                    refCount()\n                );\n        }\n        return this.tasks;\n    }\n\n    findAllComponent(): Observable<Array<ComponentTask>> {\n        return this.httpClient.get<Array<ComponentTask>>(environment.backend + this.stepUrl + '/all')\n            .pipe(map((res: Array<ComponentTask>) => {\n                return res.map(c => this.mapToComponentTask(c, true));\n            }));\n    }\n\n    save(component: ComponentTask): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.stepUrl,\n            this.mapToComponentTaskDto(component), {responseType: 'text'}\n        );\n    }\n\n    delete(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + this.stepUrl + `/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    execute(component: ComponentTask, env: string): Observable<Object> {\n        return this.httpClient.post(environment.backend + `${this.stepExecutionUrl}/${component.id}/${env}`, '')\n            .pipe(map((res: Object) => {\n                return res;\n            }));\n    }\n\n    saveComponentTestCase(scenarioComponent: ScenarioComponent): Observable<any> {\n        return this.httpClient.post(\n            environment.backend + this.componentUrl,\n            this.mapScenarioComponentToDto(scenarioComponent), {responseType: 'text'}\n        );\n    }\n\n    findComponentTestCase(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, true))\n        );\n    }\n\n    findComponentTestCaseExecutableParameters(id: string): Observable<Array<KeyValue>> {\n        return this.httpClient.get<Array<KeyValue>>(environment.backend + `${this.componentUrl}/${id}/executable/parameters`);\n    }\n\n    findComponentTestCaseWithoutDeserializeImpl(id: string): Observable<ScenarioComponent> {\n        return this.httpClient.get<ScenarioComponent>(environment.backend + `${this.componentUrl}/${id}/executable`).pipe(\n            map(value => this.mapJsonToScenarioComponent(value, false))\n        );\n    }\n\n    deleteComponentTestCase(id: string): Observable<void> {\n        return this.httpClient.delete(environment.backend + `${this.componentUrl}/${id}`)\n            .pipe(map(() => {\n            }));\n    }\n\n    findParents(id: string): Observable<any> {\n        return this.httpClient.get(environment.backend + `${this.stepUrl}/${id}/parents`);\n    }\n\n    private mapScenarioComponentToDto(scenarioComponent: ScenarioComponent): TestCaseComponentDto {\n        return new TestCaseComponentDto(scenarioComponent.id,\n            scenarioComponent.title,\n            scenarioComponent.description,\n            scenarioComponent.creationDate,\n            scenarioComponent.updateDate,\n            scenarioComponent.version,\n            scenarioComponent.author,\n            new ScenarioComponentDto(\n                scenarioComponent.componentSteps.map((componentTask: ComponentTask) => this.mapComponentTaskToDto(componentTask)),\n                scenarioComponent.parameters\n            ),\n            scenarioComponent.computedParameters,\n            scenarioComponent.tags,\n            scenarioComponent.datasetId\n        );\n    }\n\n    private mapComponentTaskToDto(componentTask: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            componentTask.id,\n            componentTask.name,\n            null,\n            null,\n            [],\n            componentTask.parameters,\n            componentTask.strategy,\n            componentTask.computedParameters);\n    }\n\n    private mapJsonToScenarioComponent(jsonObject: any, withDeserializeImplementation: boolean): ScenarioComponent {\n        return new ScenarioComponent(\n            jsonObject.id,\n            jsonObject.title,\n            jsonObject.description,\n            jsonObject.creationDate,\n            jsonObject.updateDate,\n            jsonObject.version,\n            jsonObject.author,\n            jsonObject.scenario.componentSteps.map((json: any) => this.mapToComponentTask(json, withDeserializeImplementation)),\n            jsonObject.scenario.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.datasetId\n        );\n    }\n\n    private mapToComponentTask(jsonObject: any, withDeserializeImplementation: boolean): ComponentTask {\n        let impl = Implementation.deserialize(JSON.parse(jsonObject.task));\n\n        if (jsonObject.task && !withDeserializeImplementation) {\n            impl =  JSON.parse(jsonObject.task);\n        }\n\n        return new ComponentTask(\n            jsonObject.name,\n            impl,\n            jsonObject.steps.map(c => this.mapToComponentTask(c, withDeserializeImplementation)),\n            jsonObject.parameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.computedParameters.map(elt => new KeyValue(elt.key, elt.value)),\n            jsonObject.tags,\n            jsonObject.strategy != null ? new Strategy(jsonObject.strategy.type, jsonObject.strategy.parameters) : null,\n            jsonObject.id\n        );\n\n    }\n\n    private mapToComponentTaskDto(component: ComponentTask): ComponentTaskDto {\n        return new ComponentTaskDto(\n            component.id,\n            component.name,\n            null,\n            component.implementation != null ? JSON.stringify(component.implementation) : null,\n            component.children.map(c => this.mapToComponentTaskDto(c)),\n            component.parameters,\n            component.strategy,\n            component.computedParameters,\n            component.tags\n        );\n    }\n}\n\nexport class TestCaseComponentDto {\n    constructor(\n        public id?: string,\n        public title: string = 'Title',\n        public description: string = 'Description',\n        public creationDate?: Date,\n        public updateDate?: Date,\n        public version?: number,\n        public author?: string,\n        public scenario: ScenarioComponentDto = new ScenarioComponentDto(),\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<string> = [],\n        public datasetId: string = null) {\n    }\n}\n\nexport class ScenarioComponentDto {\n    constructor(\n        public componentSteps: Array<ComponentTaskDto> = [],\n        public parameters: Array<KeyValue> = []) {\n    }\n}\n\nexport class ComponentTaskDto {\n    constructor(\n        public id: string,\n        public name: string,\n        public usage: string,\n        public task: string,\n        public steps: Array<ComponentTaskDto>,\n        public parameters: Array<KeyValue>,\n        public strategy: Strategy,\n        public computedParameters: Array<KeyValue> = [],\n        public tags: Array<String> = []) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'"
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'"
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "scenario",
                        "type": "ScenarioComponentDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new ScenarioComponentDto()"
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    }
                ],
                "line": 196,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Title'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'Description'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "updateDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "version",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "author",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenario",
                        "type": "ScenarioComponentDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new ScenarioComponentDto()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "computedParameters",
                        "type": "Array<KeyValue>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tags",
                        "type": "Array<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datasetId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 204,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "computedParameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "creationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasetId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "'Description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 198,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scenario",
                    "defaultValue": "new ScenarioComponentDto()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 205,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 199,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 202,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 203,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TestCaseEdition",
            "id": "class-TestCaseEdition-2a37f356e7d52d1f3a2f16a218a24601981eaedc4401717846870390486654ae18990b9aea1c4518c58284f6c4dac1f8341ee6599797daf45dc3b8f6dfcc9d47",
            "file": "src/app/core/model/scenario/testcase-edition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TestCaseEdition {\n    constructor(\n        public testCaseId: string,\n        public testCaseVersion: number,\n        public editionStartDate: Date,\n        public editionUser: string) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "testCaseId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "testCaseVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "editionStartDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "editionUser",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "testCaseId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "testCaseVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editionStartDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editionUser",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "editionStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editionUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "testCaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "testCaseVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TestCaseEditionDto",
            "id": "class-TestCaseEditionDto-388ee3aee81c9c9a9c4475db4fe497506d666f4303b0ba6dcb386477dcf5be92cafef21a5d1ea5ece39c3819a9cc6ada87f5866261f9a458d019976d2d3cb68d",
            "file": "src/app/core/services/edition.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@env/environment';\n\nimport { TestCaseEdition } from '@model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EditionService {\n\n    private resourceTestCaseUrl = '/api/v1/editions/testcases';\n\n    constructor(\n        private httpClient: HttpClient) {\n    }\n\n    findAllTestCaseEditions(testCaseId: string): Observable<Array<TestCaseEdition>> {\n        return this.httpClient.get<Array<TestCaseEdition>>(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`)\n            .pipe(map((res: Array<TestCaseEdition>) => {\n                return res.map(c => this.mapToTestCaseEdition(c));\n            }));\n    }\n\n    editTestCase(testCaseId: string): Observable<TestCaseEdition> {\n        return this.httpClient.post(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`, '')\n        .pipe(map((res: TestCaseEdition) => {\n            return this.mapToTestCaseEdition(res);\n        }));\n    }\n\n    endTestCaseEdition(testCaseId: string): Observable<void> {\n        return this.httpClient.delete(`${environment.backend}${this.resourceTestCaseUrl}/${testCaseId}`)\n            .pipe(map(() => {}));\n    }\n\n    private mapToTestCaseEdition(jsonObject: any): TestCaseEdition {\n        return new TestCaseEdition(\n            jsonObject.testCaseId,\n            jsonObject.testCaseVersion,\n            jsonObject.editionStartDate,\n            jsonObject.editionUser\n        );\n    }\n\n    private mapToTestCaseEditionDto(testCaseEdition: TestCaseEdition): TestCaseEditionDto {\n        return new TestCaseEditionDto(\n            testCaseEdition.testCaseId,\n            testCaseEdition.testCaseVersion,\n            testCaseEdition.editionStartDate,\n            testCaseEdition.editionUser\n        );\n    }\n}\n\nexport class TestCaseEditionDto {\n    constructor(\n        public testCaseId: string,\n        public testCaseVersion: number,\n        public editionStartDate: Date,\n        public editionUser: string) {\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "testCaseId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "testCaseVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "editionStartDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "editionUser",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "testCaseId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "testCaseVersion",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editionStartDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editionUser",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "editionStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editionUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "testCaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "testCaseVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-29076d3c22ffd610568ff9c82a45a774780975e1076f975110fc40902a534632c77d77b3a03f4c0826702958e54da59ce00475e3d3194b90f200a628e2155bde",
            "file": "src/app/core/model/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\n  constructor(\n    public id: string,\n    public name?: string,\n    public firstname?: string,\n    public lastname?: string,\n    public mail?: string,\n    public authorizations?: Array<Authorization>,\n  ) { }\n}\n\nexport enum Authorization {\n    SCENARIO_READ = 'SCENARIO_READ',\n    SCENARIO_WRITE = 'SCENARIO_WRITE',\n    SCENARIO_EXECUTE = 'SCENARIO_EXECUTE',\n\n    CAMPAIGN_READ = 'CAMPAIGN_READ',\n    CAMPAIGN_WRITE = 'CAMPAIGN_WRITE',\n    CAMPAIGN_EXECUTE = 'CAMPAIGN_EXECUTE',\n\n    ENVIRONMENT_ACCESS = 'ENVIRONMENT_ACCESS',\n\n    GLOBAL_VAR_READ = 'GLOBAL_VAR_READ',\n    GLOBAL_VAR_WRITE = 'GLOBAL_VAR_WRITE',\n\n    DATASET_READ = 'DATASET_READ',\n    DATASET_WRITE = 'DATASET_WRITE',\n\n    COMPONENT_READ = 'COMPONENT_READ',\n    COMPONENT_WRITE = 'COMPONENT_WRITE',\n\n    ADMIN_ACCESS = 'ADMIN_ACCESS'\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "firstname",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "lastname",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "mail",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "authorizations",
                        "type": "Array<Authorization>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firstname",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastname",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mail",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorizations",
                        "type": "Array<Authorization>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "authorizations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Authorization>",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HasAuthorizationDirective",
            "id": "directive-HasAuthorizationDirective-ee349213aed11c822a3eb82b913e4ac32822ed00e2a777bc7923d565c0efcaa95f130a79b1f6b4803d20ff9c73de9ab25a0b73035f2cde7599e5814501ba5e5e",
            "file": "src/app/shared/directives/hasAuthorization.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\nimport { LoginService } from '@core/services';\n\n@Directive({\n    selector : '[hasAuthorization]'\n  })\nexport class HasAuthorizationDirective {\n    constructor(\n        private templateRef: TemplateRef<any>,\n        private viewContainer: ViewContainerRef,\n        private loginService: LoginService\n    ) {}\n\n    @Input() set hasAuthorization(a: any) {\n        const authorizations = a['authorizations'] || (Array.isArray(a) ? a : []);\n        const user = a['user'];\n        const not: boolean = a['not'] || false;\n\n        const hasAuthorization = this.loginService.hasAuthorization(authorizations, user);\n        if ((not && !hasAuthorization) || (!not && hasAuthorization)) {\n            // Add template to DOM\n            this.viewContainer.createEmbeddedView(this.templateRef);\n        } else {\n            // Remove template from DOM\n            this.viewContainer.clear();\n        }\n    }\n}\n",
            "selector": "[hasAuthorization]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hasAuthorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "hasAuthorization": {
                    "name": "hasAuthorization",
                    "setSignature": {
                        "name": "hasAuthorization",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "a",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "a",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ImplementationHostDirective",
            "id": "directive-ImplementationHostDirective-918a1334a9a4c2901684fd9f88238d7d3526cc0b0aac4967d9bd208ed670290a3a3681b4fc65f94317c1279aa6f211b4e3909b0668459fcc879094222ac9d923",
            "file": "src/app/shared/directives/implementationHost.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[implementation-host]',\n})\nexport class ImplementationHostDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n",
            "selector": "[implementation-host]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "InputFocusDirective",
            "id": "directive-InputFocusDirective-366c5988cc0e9a3872a9001c4c81c6bc814be8975c3796c0986d1b2bcd6cd540d10e9df8333b3a163842a06eecf40c9e77e0ffd0fc35c9e70f879b007b299953",
            "file": "src/app/shared/directives/input-focus.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Renderer2, OnInit } from '@angular/core';\n\n@Directive({\n    selector : '[chutneyFocusOnShow]'\n  })\nexport class InputFocusDirective implements OnInit {\n    constructor(public renderer: Renderer2, public elementRef: ElementRef) {}\n\n    ngOnInit() {\n      this.renderer.selectRootElement(this.elementRef.nativeElement).focus();\n    }\n}\n",
            "selector": "[chutneyFocusOnShow]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "ActionEditComponent",
            "id": "component-ActionEditComponent-5dd45886a6ef231d550f4564c64da885f16e00af0e71695514fd561d83446de78d034f7e118b039943747d1d68917d7efc030b4d3d635f0673eed496dd59b0f4",
            "file": "src/app/modules/component/components/action/action-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-action-edit-component",
            "styleUrls": [
                "./action-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ComponentTask",
                    "decorators": []
                },
                {
                    "name": "rightPanelMinimize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "createEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "duplicateEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "availableTargets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "collapseInputs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "collapseInputsList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "collapseInputsMap",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "collapseOutputs",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "collapseValidations",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "executionResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "parents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "sideBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "addListItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMapItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOutput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "buildInputList",
                    "args": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 433,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildInputMap",
                    "args": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 448,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFormArray",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeExecutionPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createComponentTask",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createImplementation",
                    "args": [],
                    "optional": false,
                    "returnType": "Implementation",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "duplicate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFormValuesWith",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInputType",
                    "args": [
                        {
                            "name": "input",
                            "type": "SimpleInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "SimpleInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isVariableRef",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeListItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMapItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeOutput",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeValidation",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sideBarToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchCollapseInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchCollapseInputsList",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchCollapseInputsMap",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchCollapseOutputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchCollapseValidations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchListToVariableRef",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchMapToVariableRef",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchVariableRefToList",
                    "args": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 417,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchVariableRefToMap",
                    "args": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 425,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchVariableRefToStruct",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 398,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport {\n    ComponentTask,\n    Implementation,\n    KeyValue,\n    ListInput,\n    MapInput,\n    SimpleInput,\n    Task,\n    Authorization\n} from '@model';\nimport { ComponentService, EnvironmentAdminService, LoginService } from '@core/services';\nimport { newInstance } from '@shared/tools/array-utils';\n\n\n@Component({\n    selector: 'chutney-action-edit-component',\n    templateUrl: './action-edit.component.html',\n    styleUrls: ['./action-edit.component.scss']\n})\nexport class ActionEditComponent implements OnChanges {\n\n    @Input() editComponent: ComponentTask;\n    @Input() rightPanelMinimize: boolean = false;\n    @Output() createEvent = new EventEmitter();\n    @Output() deleteEvent = new EventEmitter();\n    @Output() cancelEvent = new EventEmitter();\n    @Output() duplicateEvent = new EventEmitter();\n\n    actionForm: FormGroup;\n\n    availableTargets: Array<string>;\n    task: Task;\n\n    executionResult: any;\n\n    collapseOutputs = true;\n    collapseValidations = true;\n    collapseInputs = false;\n    collapseInputsMap: Array<boolean> = [];\n    collapseInputsList: Array<boolean> = [];\n    sideBar = false;\n    parents: any;\n\n    Authorization = Authorization;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private environmentService: EnvironmentAdminService,\n        private componentService: ComponentService,\n        private loginService: LoginService\n    ) {\n        this.environmentService.targetsNames().subscribe(\n            (res) => { this.availableTargets = res; }\n        );\n\n        this.actionForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            target: '',\n            inputs: this.formBuilder.array([]),\n            inputsMap: this.formBuilder.array([]),\n            inputsList: this.formBuilder.array([]),\n            parameters: this.formBuilder.array([]),\n            tags: [],\n            strategy: new FormControl(),\n            outputs: this.formBuilder.array([]),\n            validations: this.formBuilder.array([]),\n        });\n        if (!this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE])) {\n            this.actionForm.disable();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.executionResult = null;\n        this.componentService.findAllTasks().subscribe(\n            (res) => {\n                this.task = res.find(t => t.identifier === this.editComponent.implementation.identifier);\n                this.selectAction(this.editComponent);\n            },\n            (error) => console.log(error)\n        );\n        if (this.editComponent.id) {\n            this.componentService.findParents(this.editComponent.id).subscribe(\n                (res) => { this.parents = res; }\n            );\n        }\n    }\n\n    delete() {\n        this.deleteEvent.emit(this.editComponent.id);\n    }\n\n    duplicate() {\n        this.editComponent = Object.assign({}, this.editComponent);\n        this.editComponent.id = null;\n        this.parents = null;\n        this.actionForm.controls['name'].patchValue('--COPY-- ' + this.actionForm.value['name']);\n        this.duplicateEvent.emit();\n    }\n\n    edit() {\n        const componentTask = this.createComponentTask();\n        this.createEvent.emit(componentTask);\n    }\n\n    createComponentTask() {\n        const implementation = this.createImplementation();\n\n        return new ComponentTask(\n            this.actionForm.value['name'],\n            implementation,\n            [],\n            this.actionForm.value['parameters'].map((p) => new KeyValue(p.key, p.value)),\n            [],\n            this.actionForm.value['tags'].split(','),\n            this.actionForm.value['strategy'],\n            this.editComponent.id\n        );\n    }\n\n    createImplementation(): Implementation {\n        const target = this.actionForm.value['target'];\n        const mapInputs = this.actionForm.value['inputsMap'];\n        const listInputs = this.actionForm.value['inputsList'];\n        const simpleInputs = this.actionForm.value['inputs'];\n        const outputs = this.actionForm.value['outputs'];\n        const validations = this.actionForm.value['validations'];\n\n        const outputsTmp = outputs.map((p) => new KeyValue(p.key, p.value));\n        const validationsTmp = validations.map((p) => new KeyValue(p.key, p.value));\n\n        const mapImpl = mapInputs.map(i => {\n            const map = new Array<KeyValue>();\n            i.valueMap.map(v => map.push(new KeyValue(v.k, v.v)));\n            return new MapInput(i.keyMap, map);\n        });\n\n        const listImpl = listInputs.map(i => {\n            const list = [];\n            i.valueList.map(v => {\n                let value: any;\n                try {\n                    value = JSON.parse(v.l);\n                } catch (e) {\n                    value = v.l;\n                }\n                list.push(value);\n            });\n            return new ListInput(i.keyList, list);\n\n        });\n\n        const simpleImpl = simpleInputs.map(i => {\n            return new SimpleInput(i.key, i.value);\n        });\n\n        return new Implementation(\n            this.editComponent.implementation.identifier,\n            target,\n            this.editComponent.implementation.hasTarget,\n            mapImpl,\n            listImpl,\n            simpleImpl,\n            outputsTmp,\n            validationsTmp\n        );\n    }\n\n    cancel() {\n        this.cancelEvent.emit();\n    }\n\n    execute(environment: string) {\n        this.componentService.execute(this.editComponent, environment).subscribe(\n            (res) => { this.executionResult = res; },\n            (error) => { this.executionResult = error.error; }\n        );\n    }\n\n    clearFormArray(formArray: FormArray) {\n        while (formArray.length !== 0) {\n            formArray.removeAt(0);\n        }\n    }\n\n    fillFormValuesWith(component: ComponentTask) {\n        this.actionForm.reset();\n\n        this.actionForm.controls['strategy'].reset();\n        this.clearFormArray(this.actionForm.controls['inputs'] as FormArray);\n        this.clearFormArray(this.actionForm.controls['inputsMap'] as FormArray);\n        this.clearFormArray(this.actionForm.controls['inputsList'] as FormArray);\n        this.clearFormArray(this.actionForm.controls['parameters'] as FormArray);\n        this.clearFormArray(this.actionForm.controls['outputs'] as FormArray);\n        this.clearFormArray(this.actionForm.controls['validations'] as FormArray);\n\n        this.actionForm.controls['name'].patchValue(component.name);\n        this.actionForm.controls['target'].patchValue(component.implementation.target);\n        this.actionForm.controls['tags'].patchValue(component.tags.join(', '));\n    }\n\n    selectAction(component: ComponentTask) {\n        this.fillFormValuesWith(component);\n\n        // Fill outputs Map\n        const outputs = this.actionForm.controls['outputs'] as FormArray;\n        component.implementation.outputs.forEach((keyValue) => {\n            outputs.push(\n                this.formBuilder.group({\n                    key: keyValue.key,\n                    value: keyValue.value,\n                })\n            );\n        });\n\n        // Fill validations Map\n        const validations = this.actionForm.controls['validations'] as FormArray;\n        component.implementation.validations.forEach((keyValue) => {\n            validations.push(\n                this.formBuilder.group({\n                    key: keyValue.key,\n                    value: keyValue.value,\n                })\n            );\n        });\n\n        // Fill inputs Map\n        const inputsMap = this.actionForm.controls['inputsMap'] as FormArray;\n        this.collapseInputsMap = [];\n        component.implementation.mapInputs.forEach(i => {\n            inputsMap.push(this.buildInputMap(i.name, i.values));\n            this.collapseInputsMap.push(true);\n        });\n\n        // Fill inputs List\n        const inputsList = this.actionForm.controls['inputsList'] as FormArray;\n        this.collapseInputsList = [];\n        component.implementation.listInputs.forEach(i => {\n            inputsList.push(this.buildInputList(i.name, i.values));\n            this.collapseInputsList.push(true);\n        });\n\n        // Fill inputs others\n        const inputs = this.actionForm.controls['inputs'] as FormArray;\n        component.implementation.inputs.forEach(i => {\n            const inputType = this.getInputType(i);\n            inputs.push(this.formBuilder.group({\n                key: i.name,\n                value: i.value,\n                placeholder: inputType,\n                inputType: inputType\n            }));\n        });\n\n        if (!this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE])) {\n            this.actionForm.disable();\n        }\n    }\n\n    addMapItem(index: number): void {\n        this.collapseInputsMap[index] = false;\n        (((this.actionForm.controls['inputsMap'] as FormArray)\n            .controls[index] as FormGroup)\n            .controls['valueMap'] as FormArray)\n            .push(this.formBuilder.group({\n                k: '',\n                v: ''\n            }));\n    }\n\n    addListItem(index: number): void {\n        this.collapseInputsList[index] = false;\n        (((this.actionForm.controls['inputsList'] as FormArray)\n            .controls[index] as FormGroup)\n            .controls['valueList'] as FormArray)\n            .push(this.formBuilder.group({\n                l: ''\n            }));\n    }\n\n    removeMapItem(index: number, itemIndex: number): void {\n        const fa = (((this.actionForm.controls['inputsMap'] as FormArray)\n            .controls[index] as FormGroup)\n            .controls['valueMap'] as FormArray);\n\n        fa.removeAt(itemIndex);\n        this.collapseInputsMap[index] = (fa.length === 0);\n    }\n\n    removeListItem(index: number, itemIndex: number): void {\n        const fa = (((this.actionForm.controls['inputsList'] as FormArray)\n            .controls[index] as FormGroup)\n            .controls['valueList'] as FormArray);\n\n        fa.removeAt(itemIndex);\n        this.collapseInputsList[index] = (fa.length === 0);\n    }\n\n    addOutput(): void {\n        this.collapseOutputs = false;\n        (this.actionForm.controls['outputs'] as FormArray)\n            .push(this.formBuilder.group({\n                key: '',\n                value: ''\n            }));\n    }\n\n    removeOutput(itemIndex: number): void {\n        const outputs = this.actionForm.controls['outputs'] as FormArray;\n        outputs.removeAt(itemIndex);\n        this.collapseOutputs = (outputs.length === 0);\n    }\n\n    addValidation(): void {\n        this.collapseValidations = false;\n        (this.actionForm.controls['validations'] as FormArray)\n            .push(this.formBuilder.group({\n                key: '',\n                value: ''\n            }));\n    }\n\n    removeValidation(itemIndex: number): void {\n        const validations = this.actionForm.controls['validations'] as FormArray;\n        validations.removeAt(itemIndex);\n        this.collapseValidations = (validations.length === 0);\n    }\n\n    hasInputs(): boolean {\n        const inputs = this.actionForm.controls['inputs'] as FormArray;\n        const inputsMap = this.actionForm.controls['inputsMap'] as FormArray;\n        const inputsList = this.actionForm.controls['inputsList'] as FormArray;\n        return inputs.length > 0 || inputsMap.length > 0 || inputsList.length > 0;\n    }\n\n    switchCollapseInputs() {\n        this.collapseInputs = !this.collapseInputs;\n    }\n\n    switchCollapseOutputs() {\n        this.collapseOutputs = !this.collapseOutputs;\n    }\n\n    switchCollapseValidations() {\n        this.collapseValidations = !this.collapseValidations;\n    }\n\n    switchCollapseInputsMap(index: number) {\n        this.collapseInputsMap[index] = !this.collapseInputsMap[index];\n        this.collapseInputsMap = newInstance(this.collapseInputsMap);\n    }\n\n    switchCollapseInputsList(index: number) {\n        this.collapseInputsList[index] = !this.collapseInputsList[index];\n        this.collapseInputsList = newInstance(this.collapseInputsList);\n    }\n\n    switchListToVariableRef(index: number) {\n        const name = this.actionForm.value['inputsList'][index].keyList;\n\n        (this.actionForm.controls['inputsList'] as FormArray)\n            .removeAt(index);\n\n        (this.actionForm.controls['inputs'] as FormArray)\n            .push(this.formBuilder.group({\n                key: name,\n                value: '',\n                placeholder: '${#variable_of_type_List}',\n                inputType: 'java.util.List'\n            }));\n    }\n\n    switchMapToVariableRef(index: number) {\n        const name = this.actionForm.value['inputsMap'][index].keyMap;\n\n        (this.actionForm.controls['inputsMap'] as FormArray)\n            .removeAt(index);\n\n        (this.actionForm.controls['inputs'] as FormArray)\n            .push(this.formBuilder.group({\n                key: name,\n                value: '',\n                placeholder: '${#variable_of_type_Map}',\n                inputType: 'java.util.Map'\n            }));\n    }\n\n    sideBarToggle() {\n        this.sideBar = !this.sideBar;\n        if (this.sideBar) {\n            this.executionResult = null;\n        }\n    }\n\n    switchVariableRefToStruct(index: number) {\n        const inputElement = this.actionForm.value['inputs'][index];\n\n        if (inputElement.inputType === 'java.util.List') {\n            this.switchVariableRefToList(inputElement.key, index);\n        } else if (inputElement.inputType === 'java.util.Map') {\n            this.switchVariableRefToMap(inputElement.key, index);\n        }\n    }\n\n    isVariableRef(index: number) {\n        const inputType = this.actionForm.value['inputs'] ? this.actionForm.value['inputs'][index].inputType : '';\n        return (inputType === 'java.util.List' || inputType === 'java.util.Map');\n    }\n\n    closeExecutionPanel() {\n        this.executionResult = null;\n    }\n\n    private switchVariableRefToList(name: String, index: number) {\n        (this.actionForm.controls['inputs'] as FormArray)\n            .removeAt(index);\n\n        (this.actionForm.controls['inputsList'] as FormArray)\n            .push(this.buildInputList(name));\n    }\n\n    private switchVariableRefToMap(name: String, index: number) {\n        (this.actionForm.controls['inputs'] as FormArray)\n            .removeAt(index);\n\n        (this.actionForm.controls['inputsMap'] as FormArray)\n            .push(this.buildInputMap(name));\n    }\n\n    private buildInputList(name: String, values: Array<Object> = []) {\n        return this.formBuilder.group({\n            keyList: name,\n            valueList: this.formBuilder.array(values.map(s => {\n                let ss = s;\n                if (typeof s !== 'string') {\n                    ss = JSON.stringify(s);\n                }\n                return this.formBuilder.group({\n                    l: ss\n                });\n            })),\n        });\n    }\n\n    private buildInputMap(name: String, values: Array<KeyValue> = []) {\n        return this.formBuilder.group({\n            keyMap: name,\n            valueMap: this.formBuilder.array(\n                Array.from(values).map(keyvalue => this.formBuilder.group({\n                    k: keyvalue.key,\n                    v: keyvalue.value\n                }))),\n        });\n    }\n\n    private getInputType(input: SimpleInput) {\n        if (input.type != null) {\n            return input.type;\n        }\n        return this.task.inputs.find(i => i.name === input.name).type;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\nfieldset legend {\n    width: auto;\n    font-size: 1rem;\n}\n\n.legend-title {\n    cursor: default;\n    display: inline-block;\n    width: 150px;\n}\n\n.component-type {\n    position: relative;\n    top: -5px;\n}\n\n.edition-header {\n    height: 170px;\n}\n\n.edition-body {\n    height: calc(100vh - (50px + 10px + 170px + 10px + 10px));\n    overflow-y: auto;\n}\n\ntextarea.no-resize {\n    resize: none;\n}\n\n.cursor-default {\n    cursor: default;\n}\n\n.right-panel-minimize {\n    width: 45px;\n}\n\n.edition-action-minimize {\n    width: calc(100% - 45px/*right-panel*/);\n}\n\n.right-panel-minimize-btn {\n    position: fixed;\n    margin-left: -5px;\n    height: calc(80vh);\n}\n\n.right-panel-minimize-btn:hover {\n    background-color: lightgray;\n}\n\n.right-panel-content {\n    margin-left: 15px;\n}\n",
                    "styleUrl": "./action-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environmentService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environmentService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [formGroup]=\"actionForm\">\n    <div class=\"edition-header row mt-0\">\n        <div class=\"col-7\">\n            <div class=\"row\">\n                <div>\n                    <span class=\"fa fa-clone\"></span>\n                    <span class=\"ms-2 fw-bold text-capitalize\">{{editComponent.implementation.identifier}}</span>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-1\"></div>\n                <textarea formControlName=\"name\" rows=\"2\"\n                          class=\"no-resize form-control col\"\n                          [ngClass]=\"{\n                            'is-valid': actionForm.get('name').valid && actionForm.get('name').enabled,\n                            'is-invalid': !actionForm.get('name').valid && actionForm.get('name').enabled\n                          }\"\n                          placeholder=\"{{'components.shared.edition.fields.intention.placeholder' | translate}}\"\n                          required></textarea>\n                <div class=\"col-1\"></div>\n            </div>\n            <div *ngIf=\"editComponent.implementation.hasTarget\" class=\"row\">\n                <label for=\"target\" class=\"col-form-label col-3 fw-bold\">{{'components.shared.edition.fields.target.name' | translate}}</label>\n                <div class=\"col-8\">\n                    <select id=\"target\" class=\"form-select\" formControlName=\"target\">\n                        <option *ngFor=\"let target of availableTargets\" [value]=\"target\">{{target}}</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-5\">\n            <div class=\"row\">\n                <div class=\"col text-center\">\n                    <chutney-toolbar-component *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                        (editEvent)=\"edit()\"\n                        (cancelEvent)=\"cancel()\"\n                        (executeEvent)=\"execute($event)\"\n                        (childEvent)=\"sideBarToggle()\"\n                        (deleteEvent)=\"delete()\"\n                        (duplicateEvent)=\"duplicate()\"\n                        [editComponent]=\"editComponent\"\n                        [parents]=\"parents\">\n                    </chutney-toolbar-component>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"p-0 align-self-center\">\n                    <label class=\"form-control-label fw-bold\" for=\"tags\">{{ 'scenarios.edition.form.tags' | translate }}</label>\n                </div>\n                <div class=\"col\">\n                    <textarea formControlName=\"tags\" type=\"text\" class=\"form-control no-resize\" name=\"tags\" id=\"tags\" rows=\"2\"></textarea>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"edition-body row\">\n        <div class=\"border-right\"\n             [ngClass]=\"{'col edition-action-minimize':rightPanelMinimize, 'col-7':!rightPanelMinimize}\">\n            <!-- Inputs -->\n            <div *ngIf=\"hasInputs()\" class=\"mt-4 px-0 pb-2 pt-2\">\n                <legend class=\"px-3 \">\n                    <span class=\"fw-bold cursor-default\" (click)=\"switchCollapseInputs()\">{{'components.shared.edition.blocks.inputs' | translate}}</span>\n                    <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                            (click)=\"switchCollapseInputs()\"\n                            title=\"{{(collapseInputs ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                        <span class=\"fa\" [ngClass]=\"collapseInputs ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                    </button>\n                </legend>\n                <ng-container *ngIf=\"!collapseInputs\">\n                    <div formArrayName=\"inputs\" *ngFor=\"let input of actionForm.get('inputs')?.controls; let i=index;\">\n                        <div [formGroupName]=\"i\" class=\"form-group row\">\n                            <div class=\"col-3 ps-3\">\n                                <label for=\"input-{{i}}\" class=\"col-form-label\">{{input.value.key}}</label>\n                            </div>\n                            <div class=\"col-8 px-1\">\n                                <textarea class=\"form-control\" id=\"input-{{i}}\" rows=\"1\"\n                                          placeholder=\"{{input.value.placeholder}}\" formControlName=\"value\"></textarea>\n                            </div>\n                            <ng-container *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\">\n                                <div class=\"col-1 px-1 align-self-center text-center\">\n                                    <button *ngIf=\"isVariableRef(i)\" class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                                            (click)=\"switchVariableRefToStruct(i)\"\n                                            title=\"{{'components.action.refvar.backTo.tooltip' | translate}}\">\n                                        <span class=\"fw-bold\" style=\"text-decoration: line-through;\">{{'components.action.refvar.label' | translate}}</span>\n                                    </button>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <div formArrayName=\"inputsMap\" *ngFor=\"let input of actionForm.get('inputsMap')?.controls; let i=index;\">\n                        <div [formGroupName]=\"i\" class=\"form-group\">\n                            <label class=\"col-3 ps-3 col-form-label\"\n                                   (click)=\"switchCollapseInputsMap(i)\">{{input.value.keyMap}}</label>\n                            <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                                    (click)=\"switchCollapseInputsMap(i)\"\n                                    title=\"{{(collapseInputsMap[i] ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                                <span class=\"fa\" [ngClass]=\"collapseInputsMap[i] ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                            </button>\n                            <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                    class=\"btn btn-sm btn-light btn-outline-dark ms-sm-1 border-0\"\n                                    (click)=\"addMapItem(i);\"\n                                    title=\"{{'global.actions.add' | translate}}\">\n                                <span class=\"fa fa-plus\"></span>\n                            </button>\n                            <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                    class=\"btn btn-sm btn-light btn-outline-dark ms-sm-1 border-0\"\n                                    (click)=\"switchMapToVariableRef(i);\"\n                                    title=\"{{'components.action.refvar.switchTo.tooltip' | translate}}\">\n                                <span class=\"fw-bold\">{{'components.action.refvar.label' | translate}}</span>\n                            </button>\n                            <ng-container *ngIf=\"!collapseInputsMap[i]\">\n                                <div formArrayName=\"valueMap\"\n                                     *ngFor=\"let nestedMap of input.get('valueMap').controls; let j = index;\">\n                                    <div [formGroupName]=\"j\">\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-3 ps-3\">\n                                                <input type=\"text\" class=\"form-control\" formControlName=\"k\"\n                                                       title=\"{{nestedMap.get('k').value}}\"\n                                                       placeholder=\"key\"/>\n                                            </div>\n                                            <div class=\"col-8 px-1\">\n                                                <textarea class=\"mx-2 form-control\" formControlName=\"v\"\n                                                          placeholder=\"value\" rows=\"1\"></textarea>\n                                            </div>\n                                            <div class=\"col-1 px-1 align-self-center text-right\">\n                                                <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                                        type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n                                                        (click)=\"removeMapItem(i,j)\"\n                                                        title=\"{{'global.actions.delete' | translate}}\">\n                                                    <span class=\"fa fa-trash\"></span>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <div formArrayName=\"inputsList\"\n                         *ngFor=\"let input of actionForm.get('inputsList')?.controls; let i=index;\">\n                        <div [formGroupName]=\"i\" class=\"form-group\">\n                            <label class=\"col-3 ps-3 col-form-label\"\n                                   (click)=\"switchCollapseInputsList(i)\">{{input.value.keyList}}</label>\n                            <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                                    (click)=\"switchCollapseInputsList(i)\"\n                                    title=\"{{(collapseInputsList[i] ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                                <span class=\"fa\" [ngClass]=\"collapseInputsList[i] ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                            </button>\n                            <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                    class=\"btn btn-sm btn-light btn-outline-dark ms-sm-1 border-0\"\n                                    (click)=\"addListItem(i);\"\n                                    title=\"{{'global.actions.add' | translate}}\">\n                                <span class=\"fa fa-plus\"></span>\n                            </button>\n                            <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                    class=\"btn btn-sm btn-light btn-outline-dark ms-sm-1 border-0\"\n                                    (click)=\"switchListToVariableRef(i);\"\n                                    title=\"{{'components.action.refvar.switchTo.tooltip' | translate}}\">\n                                <span class=\"fw-bold\">{{'components.action.refvar.label' | translate}}</span>\n                            </button>\n                            <ng-container *ngIf=\"!collapseInputsList[i]\">\n                                <div formArrayName=\"valueList\"\n                                     *ngFor=\"let nestedList of input.get('valueList').controls; let j=index;\">\n                                    <div [formGroupName]=\"j\">\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-11 ps-3\">\n                                                <textarea class=\"me-2 form-control\" formControlName=\"l\"\n                                                          placeholder=\"value\" rows=\"1\"></textarea>\n                                            </div>\n                                            <div class=\"col-1 px-1 align-self-center text-right\">\n                                                <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                                        type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n                                                        (click)=\"removeListItem(i,j)\"\n                                                        title=\"{{'global.actions.delete' | translate}}\">\n                                                    <span class=\"fa fa-trash\"></span>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                </ng-container>\n            </div>\n            <!-- Validations -->\n            <fieldset class=\"mt-4\" [ngClass]=\"collapseValidations ? 'border-top ps-2' : 'border p-2'\">\n                <legend class=\"ps-3 pe-3 fw-bold float-none\">\n                    <div class=\"legend-title\" (click)=\"switchCollapseValidations()\">{{'components.shared.edition.blocks.validations' | translate}}</div>\n                    <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                            (click)=\"switchCollapseValidations()\"\n                            title=\"{{(collapseValidations ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                        <span class=\"fa\" [ngClass]=\"collapseValidations ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                    </button>\n                    <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                            class=\"btn btn-sm btn-light btn-outline-dark border-0 ms-sm-1\"\n                            (click)=\"addValidation();\"\n                            title=\"{{'global.actions.add' | translate}}\">\n                        <span class=\"fa fa-plus\"></span>\n                    </button>\n                </legend>\n                <ng-container *ngIf=\"!collapseValidations\">\n                    <div class=\"row\" formArrayName=\"validations\"\n                         *ngFor=\"let parameter of actionForm.get('validations')?.controls; let i=index;\">\n                        <ng-container [formGroupName]=\"i\">\n                            <div class=\"col-3 px-1\">\n                                <input type=\"text\" class=\"form-control me-2\" formControlName=\"key\"\n                                       title=\"{{parameter.get('key').value}}\"\n                                       placeholder=\"key\"/>\n                            </div>\n                            <div class=\"col-8 px-1\">\n                                <textarea class=\"form-control me-2\" formControlName=\"value\" rows=\"1\"\n                                      placeholder=\"value\"></textarea>\n                            </div>\n                            <div class=\"col-1 px-1 align-self-center text-right\">\n                                <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                        type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n                                        (click)=\"removeValidation(i)\"\n                                        title=\"{{'global.actions.delete' | translate}}\">\n                                    <span class=\"fa fa-trash\"></span>\n                                </button>\n                            </div>\n                        </ng-container>\n                    </div>\n                </ng-container>\n            </fieldset>\n            <!-- Outputs -->\n            <fieldset class=\"mt-4\" [ngClass]=\"collapseOutputs ? 'border-top ps-2' : 'border p-2'\">\n                <legend class=\"px-3 fw-bold float-none\">\n                    <div class=\"legend-title\" (click)=\"switchCollapseOutputs()\">{{'components.shared.edition.blocks.outputs' | translate}}</div>\n                    <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                            (click)=\"switchCollapseOutputs()\"\n                            title=\"{{(collapseOutputs ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                        <span class=\"fa\" [ngClass]=\"collapseOutputs ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                    </button>\n                    <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                            class=\"btn btn-sm btn-light btn-outline-dark border-0 ms-sm-1\"\n                            (click)=\"addOutput();\"\n                            title=\"{{'global.actions.add' | translate}}\">\n                        <span class=\"fa fa-plus\"></span>\n                    </button>\n                </legend>\n                <ng-container *ngIf=\"!collapseOutputs\">\n                    <div class=\"row\" formArrayName=\"outputs\"\n                         *ngFor=\"let parameter of actionForm.get('outputs')?.controls; let i=index;\">\n                        <ng-container [formGroupName]=\"i\">\n                            <div class=\"col-3 px-1\">\n                                <input type=\"text\" class=\"form-control me-2\" formControlName=\"key\"\n                                       title=\"{{parameter.get('key').value}}\"\n                                       placeholder=\"key\"/>\n                            </div>\n                            <div class=\"col-8 px-1\">\n                                <textarea class=\"form-control me-2\" formControlName=\"value\" rows=\"1\"\n                                          placeholder=\"value\"></textarea>\n                            </div>\n                            <div class=\"col-1 px-1 align-self-center text-right\">\n                                <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                        type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n                                        (click)=\"removeOutput(i)\"\n                                        title=\"{{'global.actions.delete' | translate}}\">\n                                    <span class=\"fa fa-trash\"></span>\n                                </button>\n                            </div>\n                        </ng-container>\n                    </div>\n                </ng-container>\n            </fieldset>\n        </div>\n        <div [ngClass]=\"{'p-0 right-panel-minimize':rightPanelMinimize, 'col-5':!rightPanelMinimize}\">\n            <button type=\"button\" class=\"right-panel-minimize-btn btn btn-xs pt-0 btn-default shadow-none\"\n                    [ngClass]=\"{'p-0':!rightPanelMinimize}\"\n                    title=\"{{(rightPanelMinimize ? 'global.actions.show' : 'global.actions.hide') | translate}}\"\n                    (click)=\"rightPanelMinimize = !rightPanelMinimize;\">\n                <span class=\"fa\" [ngClass]=\"{'fa-angle-double-left':rightPanelMinimize, 'fa-angle-double-right':!rightPanelMinimize}\"></span>\n            </button>\n            <div class=\"right-panel-content\" [ngClass]=\"{'d-none':rightPanelMinimize}\">\n                <ng-container *ngIf=\"!executionResult\">\n                        <chutney-strategy-form [strategy]=\"editComponent.strategy\" formControlName=\"strategy\"></chutney-strategy-form>\n                        <chutney-parameters-component [parentForm]=\"actionForm\" [editableComponent]=\"editComponent\"></chutney-parameters-component>\n                        <chutney-child-panel-component [parents]=\"parents\" [show]=\"sideBar\"></chutney-child-panel-component>\n\n                </ng-container>\n                <ng-container *ngIf=\"executionResult\">\n                    <chutney-execution-panel-component [executionResult]=\"executionResult\" (closeEvent)=\"closeExecutionPanel()\"></chutney-execution-panel-component>\n                </ng-container>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "AddTargetDialogComponent",
            "id": "component-AddTargetDialogComponent-3aff18f3d1b4f23852c9adf8b914c456b9ab99c36b482801229a090b212412e9d0ce645624eb7a95600058d5d253695a6236637f03c08e60cdaa5831c3f1cf97",
            "file": "src/app/organisms/environment-admin/add-target-dialog/add-target-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-add-target-dialog",
            "styleUrls": [
                "./add-target-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-target-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onSave",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Target",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "validationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "decline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output, TemplateRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { Target } from '@model';\nimport { ValidationService } from '../../../molecules/validation/validation.service';\n\n@Component({\n    selector: 'chutney-add-target-dialog',\n    templateUrl: './add-target-dialog.component.html',\n    styleUrls: ['./add-target-dialog.component.scss']\n})\nexport class AddTargetDialogComponent {\n\n    @Output()\n    onSave = new EventEmitter();\n\n    modalRef: BsModalRef;\n    target: Target;\n\n\n    constructor(private modalService: BsModalService, public validationService: ValidationService) { }\n\n    openModal(template: TemplateRef<any>) {\n        this.target = new Target('', '');\n        this.modalRef = this.modalService.show(template, { class: '' });\n    }\n\n    confirm(): void {\n        this.modalRef.hide();\n        this.onSave.emit(this.target);\n    }\n\n    decline(): void {\n        this.modalRef.hide();\n    }\n\n    isValid(): boolean {\n        return this.validationService.isNotEmpty(this.target.name)\n            && this.validationService.isValidUrl(this.target.url);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-content {\n    width: 500px;\n}\n",
                    "styleUrl": "./add-target-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button type=\"button\" class=\"btn btn-info mb-2\" (click)=\"openModal(template)\">{{'global.actions.add' | translate}}</button>\n<ng-template #template>\n  <div class=\"modal-body text-center\">\n    <p>Add a Target</p>\n    <chutney-forms-input-line [id]=\"'creationTargetName'\" [label]=\"'Name *'\" [placeholder]=\"'Name'\" [(model)]=\"target.name\" [validate]=\"validationService.isNotEmpty\"></chutney-forms-input-line>\n    <chutney-forms-input-line [id]=\"'creationTargetUrl'\" [label]=\"'URL *'\" [placeholder]=\"'protocol://server:port'\" [(model)]=\"target.url\" [validate]=\"validationService.isValidUrl.bind(validationService)\"></chutney-forms-input-line>\n\n    <chutney-button class=\"float-end\" [disabled]=\"!isValid()\" [iconClass]=\"'fa-check'\" [model]=\"'Save'\" (click)=\"confirm()\"></chutney-button>\n    <chutney-link class=\"float-end mt-2 me-4\" [model]=\"'Cancel'\" (click)=\"decline()\"></chutney-link>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AgentComponent",
            "id": "component-AgentComponent-716888533f951c0ca8df549c90337d546c087c62043f454ce7a671dfbef7beabc25531cfd18ae1a1a341e0b53337a35b22cf5a70e66c4581e040b9cfd24017d4",
            "file": "src/app/modules/agent-network/components/agent/agent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-agent",
            "styleUrls": [
                "./agent.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configurationAgent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "AgentInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "AgentRemoved",
                    "defaultValue": "new EventEmitter<AgentInfo>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeAgent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { AgentInfo } from '@model';\n\n@Component({\n  selector: 'chutney-agent',\n  templateUrl: './agent.component.html',\n  styleUrls: ['./agent.component.scss']\n})\nexport class AgentComponent {\n\n  @Input() configurationAgent: AgentInfo;\n  @Output() AgentRemoved = new EventEmitter<AgentInfo>();\n\n  removeAgent() {\n    this.AgentRemoved.emit(this.configurationAgent);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input[type=\"number\"] {\n    width:80px;\n}\n\n.btn {\n    background-color: white;\n    border: none;\n    color: red;\n}\n\n.name {\n    padding-right: 30px;\n}\n\n.dot {\n    padding-left: 5px;\n    padding-right: 5px;\n    font-weight: bold;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n    /* display: none; <- Crashes Chrome on hover */\n    -webkit-appearance: none;\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n}\n",
                    "styleUrl": "./agent.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<tr>\n    <td class=\"name\">\n        <input class=\"col form-control form-control-sm\" type=\"text\" placeholder=\"{{ 'admin.agents.name.placeholder' | translate }}\"\n            required size=\"50\" [(ngModel)]=\"configurationAgent.name\">\n    </td>\n\n    <td>\n        <input class=\"col form-control form-control-sm\" type=\"text\" placeholder=\"{{ 'admin.agents.name.host' | translate }}\"\n            required size=\"35\" [(ngModel)]=\"configurationAgent.host\">\n    </td>\n    <td class=\"dot\">:</td>\n    <td>\n        <input class=\"col form-control form-control-sm\" type=\"text\" pattern=\"\\d{1,5}\" placeholder=\"{{ 'admin.agents.name.port' | translate }}\"\n            required maxlength=\"5\" [(ngModel)]=\"configurationAgent.port\">\n    </td>\n    <td>\n        <span class=\"input-group-btn\" (click)=\"removeAgent()\">\n            <button class=\"btn btn-sm\" type=\"button\">\n                <span class=\"fa fa-times\"></span>\n            </button>\n        </span>\n    </td>\n</tr>\n"
        },
        {
            "name": "AgentNetworkComponent",
            "id": "component-AgentNetworkComponent-3beed6ba55977965ffb6cbfcafcb4e43564ffe72fdebe6a5ea0bfb89b0c344601186ddc8735a25d042ddef8bb361abe9f8f2e0525912de5e6a8581e6674c97bd",
            "file": "src/app/modules/agent-network/components/agent-network/agent-network.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-agent-network",
            "styleUrls": [
                "./agent-network.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agent-network.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentConfiguration",
                    "defaultValue": "new NetworkConfiguration([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentNetwork",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "AgentNetwork",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "AgentNetwork",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "propagationDone",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AgentNetwork, NetworkConfiguration } from '@model';\nimport { AgentNetworkService } from '@core/services';\n\n@Component({\n  selector: 'chutney-agent-network',\n  templateUrl: './agent-network.component.html',\n  styleUrls: ['./agent-network.component.scss']\n})\nexport class AgentNetworkComponent implements OnInit {\n\n  currentConfiguration = new NetworkConfiguration([]);\n  description: AgentNetwork;\n  errorMessage: any;\n  messages: string;\n\n  constructor(\n    private agentService: AgentNetworkService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadAll();\n  }\n\n  loadAll(): void {\n    this.agentService.getDescription().subscribe(\n      (description) => {this.description = description; },\n      (error) => { this.messages = error.error; }\n    );\n  }\n\n  propagationDone(message: string) {\n    this.messages = message;\n    this.loadAll();\n  }\n\n  loadDescription(description: AgentNetwork): void {\n    this.description = description;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".name {\n    font-size: 36px;\n    font-weight: 300;\n    width: 915px;\n}\n\n.description {\n    font-size: 25px;\n    font-weight: 400;\n    color: #777;\n}\n\n.card-body {\n    padding-right: 5px;\n    min-width: 23rem;\n    max-width: 23rem;\n}\n\n.plus-btn {\n    margin-top: 3px;\n}\n\nh1 {\n    margin-top: 0;\n    font-size: 30px;\n}\n\n.error {\n    margin-top: 15px;\n}",
                    "styleUrl": "./agent-network.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentService",
                        "type": "AgentNetworkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "agentService",
                        "type": "AgentNetworkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-sm-3\">\n        <chutney-agent-network-configuration *ngIf=\"description\" [currentConfiguration]=\"description.networkConfiguration\" (configurationUpdate)=\"propagationDone($event)\"></chutney-agent-network-configuration>\n    </div>\n    <div class=\"col-sm-9\">\n        <chutney-network-graph *ngIf=\"description\" [agentGraphe]=\"description.graphe\" [message]=\"messages\"></chutney-network-graph>\n    </div>\n</div>\n"
        },
        {
            "name": "AgentNetworkConfigurationComponent",
            "id": "component-AgentNetworkConfigurationComponent-4664ff3788c6f94324a69493d2e6decb367045f8f295fb2c2419330e82b58079e89495a76b6ece16134a3511ebb5de8fc33b461e86465bf685d66889e0481ce7",
            "file": "src/app/modules/agent-network/components/agent-network-configuration/agent-network-configuration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-agent-network-configuration",
            "styleUrls": [
                "./agent-network-configuration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agent-network-configuration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "NetworkConfiguration",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "configurationUpdate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAgent",
                    "args": [
                        {
                            "name": "configurationAgent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "configurationAgent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { NetworkConfiguration, AgentInfo } from '@model';\nimport { AgentNetworkService } from '@core/services';\n\n\n@Component({\n    selector: 'chutney-agent-network-configuration',\n    templateUrl: './agent-network-configuration.component.html',\n    styleUrls: ['./agent-network-configuration.component.scss']\n})\nexport class AgentNetworkConfigurationComponent {\n    @Input() currentConfiguration: NetworkConfiguration;\n    @Output() configurationUpdate = new EventEmitter();\n\n    constructor(private agentService: AgentNetworkService) { }\n\n    removeAgent(configurationAgent) {\n        const index = this.currentConfiguration.agentNetworkConfiguration.indexOf(configurationAgent);\n        this.currentConfiguration.agentNetworkConfiguration.splice(index, 1);\n    }\n\n    save() {\n        this.configurationUpdate.emit('Propagation en cours');\n        this.agentService.sendAndSaveConfiguration(this.currentConfiguration)\n            .subscribe(\n                (res) => this.configurationUpdate.emit('Propagation terminée'),\n                (error) => this.configurationUpdate.emit('Erreur: ' + error));\n    }\n\n    addServer() {\n        this.currentConfiguration.agentNetworkConfiguration.push(new AgentInfo('', '', 8350));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".name {\n    font-size: 36px;\n    font-weight: 300;\n    width: 915px;\n}\n\n.description {\n    font-size: 25px;\n    font-weight: 400;\n    color: #777;\n}\n\n.card-body {\n    padding-right: 5px;\n    min-width: 23rem;\n    max-width: 23rem;\n}\n\n.plus-btn {\n    margin-top: 3px;\n}\n\nh1 {\n    margin-top: 0;\n    font-size: 30px;\n}\n\n.error {\n    margin-top: 15px;\n}",
                    "styleUrl": "./agent-network-configuration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentService",
                        "type": "AgentNetworkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "agentService",
                        "type": "AgentNetworkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"page-header\" style=\"margin: 0 0 10px 0;\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <button type=\"button\" class=\"btn btn-info\" (click)=\"addServer()\">\n                <span class=\"fa fa-plus\" aria-hidden=\"true\"></span> {{ 'global.actions.add' | translate }}\n            </button>\n        </div>\n        <div class=\"col\">\n            <button type=\"button\" class=\"btn btn-success\" (click)=\"save()\">\n                <span class=\"fa fa-floppy-o\" aria-hidden=\"true\"></span> Propager\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"card-deck\">\n        <div class=\"card\">\n            <div class=\"card-body text-dark\">\n                <table>\n                    <tbody>\n                        <chutney-agent *ngFor=\"let configuration of currentConfiguration.agentNetworkConfiguration\" [configurationAgent]=\"configuration\" (AgentRemoved)=\"removeAgent($event)\"></chutney-agent>\n                    </tbody>\n                </table>\n\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4b44dd014913cbd36a559bdea09333ede2f85d89b32f18e59513a9aa4ff0ea03676dfaeb93fb52335dfc2fd0d6c8724b9ef2b008628e77325032be2771804897",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-main",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { registerLocaleData } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\n\n@Component({\n  selector: 'chutney-main',\n  template: `\n    <router-outlet></router-outlet>\n`\n})\nexport class AppComponent {\n\n  constructor(translate: TranslateService) {\n    // this language will be used as a fallback when a translation isn't found in the current language\n    translate.setDefaultLang('en');\n    // // the lang to use, if the lang isn't available, it will use the current loader to get them\n    // // take only language designator, i.e. forget about region\n    translate.use(navigator.language.substring(0, 2) || translate.getDefaultLang());\n\n    registerLocaleData(localeFr);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AsciiDoctorComponent",
            "id": "component-AsciiDoctorComponent-fbf9125064a085472eae99b711b2177f37cac06cea41551d1943fbfe4c156d04e55a809f1cd406abe0f16bae0cbb62d6d9c347334cb6619caeeb2f092c0bf57d",
            "file": "src/app/molecules/asciidoctor/asciidoctor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-asciidoctor",
            "styleUrls": [
                "./asciidoctor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asciidoctor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "doc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "highlight",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tocLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tocScrollHack",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "asciidocHTML",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'asciidocHTML'"
                        }
                    ]
                },
                {
                    "name": "converter",
                    "defaultValue": "new AsciidocConverter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AsciidocConverter",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tocLeftStyleClass",
                    "defaultValue": "'with-toc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild, ElementRef, OnChanges, ViewEncapsulation } from '@angular/core';\nimport AsciidocConverter from '../../../assets/js/asciidoctor-converter';\nimport { HighLightJService } from '@shared/highlight/highlight.service';\n\n@Component({\n  selector: 'chutney-asciidoctor',\n  templateUrl: './asciidoctor.component.html',\n  styleUrls: ['./asciidoctor.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AsciiDoctorComponent implements OnInit, OnChanges {\n\n  @Input() doc: string;\n  @Input() tocLeft: boolean = false;\n  @Input() tocScrollHack: boolean = false;\n  @Input() highlight: boolean = true;\n\n  @ViewChild('asciidocHTML') asciidocHTML: ElementRef;\n\n  private tocLeftStyleClass: string = 'with-toc';\n  private converter: AsciidocConverter = new AsciidocConverter();\n\n  constructor(private highLightJService: HighLightJService) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges() {\n    if (this.doc && this.doc.length > 0) {\n      const el = this.asciidocHTML.nativeElement;\n\n      el.innerHTML = this.converter.convert(this.doc);\n      if (this.tocLeft) {\n        this.converter.styleEmbeddedDocWithLeftToc(el, this.tocLeftStyleClass);\n      }\n\n      if (this.highlight) {\n        this.highLightJService.highlightElement(el);\n      }\n\n      if (this.tocScrollHack) {\n        el.onclick = (event) => {\n          if (event.target && this.converter.isElementFromToc(el, event.target)) {\n            if (event.target.attributes['href']) {\n              el.querySelector(event.target.attributes['href'].nodeValue)\n                .scrollIntoView({behavior: 'instant', block: 'center', inline: 'center'});\n              event.preventDefault();\n            }\n          }\n        };\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".asciidoc-container > #toc.toc {\n  border: none!important;\n  top: 137px;\n  position: fixed;\n  width: 20%;\n  z-index: 1000;\n  height: 90%;\n  overflow: auto;\n}\n\n.asciidoc-container > .with-toc {\n  padding-left: 30px + 10px;\n  margin-left: 20%;\n}\n\n.asciidoc-container {\n  padding: 25px;\n  @import 'asciidoctor';\n}\n",
                    "styleUrl": "./asciidoctor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "highLightJService",
                        "type": "HighLightJService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "highLightJService",
                        "type": "HighLightJService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"asciidoc-container\" #asciidocHTML></div>\n"
        },
        {
            "name": "AuthoringInfoComponent",
            "id": "component-AuthoringInfoComponent-1212f51f16c28ba72d5772060891f0b5e7d652d83111b37fe7418444a1d2096b2212faa3368a796601995cd9a2132927003da38676d001b8d26d48cd5bd74857",
            "file": "src/app/modules/scenarios/components/edition/authoring-info/authoring-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-authoring-info",
            "styleUrls": [
                "./authoring-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authoring-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "testCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'chutney-authoring-info',\n    templateUrl: './authoring-info.component.html',\n    styleUrls: ['./authoring-info.component.scss']\n})\nexport class AuthoringInfoComponent {\n    @Input() testCase;\n\n    constructor() {\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .arrow {\n            &::after {\n                border-bottom-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n    }\n}\n",
                    "styleUrl": "./authoring-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<ng-template #editionInfo>\n    <div>\n        <div class=\"row m-0 text-nowrap justify-content-center\">\n            <label class=\"form-control-label m-0 fw-bold\">Auteur</label>\n            <span class=\"form-control border-0 text-center\">{{ testCase.author }}</span>\n        </div>\n        <div class=\"row m-0 text-nowrap justify-content-center\">\n            <label class=\"form-control-label m-0 fw-bold\">Création</label>\n            <span class=\"form-control border-0 text-center\">{{ testCase.creationDate | amDateFormat:'YYYY-MM-DD HH:mm:ss' }}</span>\n        </div>\n        <div class=\"row m-0 text-nowrap justify-content-center\">\n            <label class=\"form-control-label m-0 fw-bold\">Mise à jour</label>\n            <span class=\"form-control border-0 text-center\">{{ testCase.updateDate | amDateFormat:'YYYY-MM-DD HH:mm:ss' }}</span>\n        </div>\n    </div>\n</ng-template>\n<button type=\"button\" class=\"btn btn-info me-0\"\n        [ngbPopover]=\"editionInfo\" placement=\"bottom\"\n        triggers=\"mouseenter:mouseleave\">\n    <span class=\"fa fa-info-circle\" aria-hidden=\"true\"></span>\n</button>\n"
        },
        {
            "name": "BackupsAdminComponent",
            "id": "component-BackupsAdminComponent-6ddd1022ec68ffe8822bd5d2399aca2b86cbc63c1a40afcccd093160a19e213f77cbf7ca73787f92b6b4bc42a9cdf3ca8ba5549c00499950906191997d104dda",
            "file": "src/app/modules/backups/components/backups-admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-backups-admin",
            "styleUrls": [
                "./backups-admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./backups-admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backupForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "backups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Backup>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteBackup",
                    "args": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "backup",
                            "type": "Backup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formValue",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initBackupForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isOneBackupSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "launchBackup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadBackups",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadAfter",
                    "args": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { BackupsService, BackupDto } from '@core/services/backups.service';\nimport { Backup } from '@core/model/backups.model';\nimport { timer } from 'rxjs';\nimport { FileSaverService } from 'ngx-filesaver';\n\n@Component({\n    selector: 'chutney-backups-admin',\n    templateUrl: './backups-admin.component.html',\n    styleUrls: ['./backups-admin.component.scss']\n})\nexport class BackupsAdminComponent implements OnInit {\n\n    backups: Array<Backup> = [];\n    backupForm: FormGroup;\n\n    constructor(\n        private backupsService: BackupsService,\n        private formBuilder: FormBuilder,\n        private fileSaverService: FileSaverService\n    ) {\n        this.initBackupForm();\n    }\n\n    ngOnInit(): void {\n        this.loadBackups();\n    }\n\n    launchBackup() {\n        this.backupsService.save(\n            new BackupDto(this.formValue('homePage'),\n            this.formValue('agentsNetwork'),\n            this.formValue('environments'),\n            this.formValue('components'),\n            this.formValue('globalVars'),\n            this.formValue('jiraLinks'))\n        ).subscribe(() => this.reloadAfter(0));\n    }\n\n    deleteBackup(backup: Backup) {\n        this.backupsService.delete(backup).subscribe(() => this.reloadAfter(100));\n    }\n\n    download(backup: Backup) {\n        this.backupsService.download(backup).subscribe(res => {\n            const blob = new Blob([res], { type: 'application/zip' });\n            this.fileSaverService.save(blob, backup.id() + '.zip');\n          });\n    }\n\n    isOneBackupSelected(): boolean {\n        return this.formValue('homePage') ||\n        this.formValue('agentsNetwork') ||\n        this.formValue('environments') ||\n        this.formValue('components') ||\n        this.formValue('globalVars') ||\n        this.formValue('jiraLinks');\n    }\n\n    private loadBackups() {\n        this.backupsService.list()\n            .subscribe(res => this.backups = res);\n    }\n\n    private initBackupForm() {\n        this.backupForm = this.formBuilder.group({\n            homePage: true,\n            agentsNetwork: true,\n            environments: true,\n            components: true,\n            globalVars: true,\n            jiraLinks: true,\n        });\n    }\n\n    private formValue(name: string): boolean {\n        return this.backupForm.get(name).value;\n    }\n\n    private reloadAfter(time: number) {\n        if (time > 0) {\n            timer(time).subscribe(() =>\n                this.loadBackups()\n            );\n        } else {\n            this.loadBackups();\n        }\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./backups-admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "backupsService",
                        "type": "BackupsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "backupsService",
                        "type": "BackupsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\n    <div class=\"row\">\n        <form [formGroup]=\"backupForm\" class=\"w-100\">\n            <table class=\"table table-striped table-hover\">\n                <thead>\n                <tr>\n                    <th scope=\"col\" class=\"text-center\" style=\"width: 100px;\"></th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.time.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.homepage.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.agents.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.environments.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.components.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.globalvars.title' | translate }}</th>\n                    <th scope=\"col\" class=\"text-center\">{{ 'admin.backups.table.jira.title' | translate }}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr class=\"bg-light\">\n                    <td class=\"btn-group-sm text-center align-middle\">\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\"\n                                title=\"{{ 'global.actions.add' | translate }}\"\n                                (click)=\"launchBackup()\"\n                                [disabled]=\"!isOneBackupSelected()\">\n                            <span class=\"fa fa-plus\" aria-hidden=\"true\"></span>\n                        </button>\n                    </td>\n                    <td></td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"homePage\"/>\n                    </td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"agentsNetwork\"/>\n                    </td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"environments\"/>\n                    </td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"components\"/>\n                    </td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"globalVars\"/>\n                    </td>\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <input type=\"checkbox\" formControlName=\"jiraLinks\"/>\n                    </td>\n                </tr>\n                <tr *ngFor=\"let backup of backups\">\n                    <td scope=\"row\" class=\"btn-group-sm text-center align-middle\">\n                        <button type=\"button\" class=\"btn btn-sm btn-danger\"\n                                title=\"{{ 'global.actions.delete' | translate }}\"\n                                (click)=\"deleteBackup(backup)\">\n                            <span class=\"fa fa-trash\"></span>\n                        </button>\n\n                        <button type=\"button\" class=\"btn btn-sm btn-primary ms-2\"\n                                title=\"Download\"\n                                (click)=\"download(backup)\">\n                            <span class=\"fa fa-download\"></span>\n                        </button>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        {{ backup.time | date: 'medium' }}\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.homePage\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.agentsNetwork\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.environments\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.components\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.globalVars\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n\n                    <td scope=\"row\" class=\"text-center align-middle\">\n                        <span *ngIf=\"backup.jiraLinks\" class=\"fa fa-check-square\" aria-hidden=\"true\"></span>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </form>\n    </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3d00c8e85d2df2e3f45c7c1ec73fb4655747e7e37b5fc9bb033bfab77617cdad49753fc7e2b1aca7e6f41a6af3284e31136383c8ff21e3dea9934b96fea7e7ca-1",
            "file": "src/app/atoms/buttons/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<button class=\"{{level}}\" [disabled]=\"disabled\">\n    <span *ngIf=\"iconClass\" class=\"fa {{iconClass}}\"></span>\n    {{model}}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "level",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\nselector: 'chutney-button',\ntemplate: `\n    <button class=\"{{level}}\" [disabled]=\"disabled\">\n        <span *ngIf=\"iconClass\" class=\"fa {{iconClass}}\"></span>\n        {{model}}\n    </button>\n`,\nstyleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n\n    @Input() model: string;\n    @Input() iconClass: string;\n    @Input() level = 'first';\n    @Input() disabled = false;\n\n    constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n@mixin baseButton($text-color, $background-color, $border-color) {\n    font-family: 'Montserrat';\n    font-weight: bold;\n    cursor: pointer;\n    border: solid 2px $border-color !important;\n    padding: 9px 20px 9px 20px;\n    color: $text-color;\n    text-transform: uppercase;\n    border: 0;\n    background-color: $background-color;\n\n    span {\n        margin-right: 8px;\n    }\n}\n\n@mixin hoverButton($text-color, $border-color, $background-color) {\n    &:hover {\n        background-color: $background-color;\n        border-color: $border-color !important;\n        color: $text-color;\n    }\n}\n\n@mixin disabledButton($text-color, $border-color, $background-color) {\n    &:disabled {\n        background-color: $background-color;\n        border-color: $border-color !important;\n        color: $text-color;\n        cursor: not-allowed;\n    }\n}\n\n.first {\n    @include baseButton($grisfonce1, $vert2, $vert2);\n    @include hoverButton($grisfonce1, $vert4, $vert4);\n    @include disabledButton($blanc, $labelko, $labelko);\n}\n\n.second {\n    @include baseButton($vert2, $blanc, $vert2);\n    @include hoverButton($vert1, $vert3, $blanc);\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1"
        },
        {
            "name": "CampaignEditionComponent",
            "id": "component-CampaignEditionComponent-f3c04de2f7971a2e6ca517d335df9c27bc97ecdfb20d0423a39f74c169fd223a2551a11dfc0cc7653ee052ef6f31eb82741494f982a6f38dc02543d6fc9fb3e8",
            "file": "src/app/modules/campaign/components/create-campaign/campaign-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-campaign-edition",
            "styleUrls": [
                "./campaign-edition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./campaign-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "campaign",
                    "defaultValue": "new Campaign()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "campaignForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "collapseParam",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "datasetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "DRAGGABLE",
                    "defaultValue": "'DRAGGABLE'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hasParam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "itemList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "jiraId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "jiraItemList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "jiraMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "jiraScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JiraScenario[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "jiraScenariosToExclude",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "jiraSelectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "jirasettings",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "jiraUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scenariosFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "scenariosToAdd",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedEnvironment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "selectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "settings",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "addScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearJiraScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getJiraLastExecutionStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJiraLastExecutionStatusClass",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"bg-success\" | \"bg-danger\" | \"bg-secondary\"",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasJiraId",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initJiraPlugin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initMultiSelectSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "jiraFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAllScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadJiraLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnItemDeSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "OnItemDeSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "OnJiraItemDeSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "OnJiraItemDeSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onJiraItemSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshForPipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refreshJiraScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataset",
                    "args": [
                        {
                            "name": "datasetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 465,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCampaignScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCampaignScenariosIdsToAdd",
                    "args": [
                        {
                            "name": "scenariosToAdd",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenariosToAdd",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedEnvironment",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToSaveResponse",
                    "args": [
                        {
                            "name": "result",
                            "type": "Observable<Campaign>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Observable<Campaign>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchCollapseParam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 428,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCampaignParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateJiraLink",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 469,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { DragulaService } from 'ng2-dragula';\n\nimport {\n    Campaign, JiraScenario,\n    KeyValue,\n    ScenarioIndex,\n    TestCase\n} from '@model';\nimport {\n    CampaignService,\n    ComponentService,\n    EnvironmentAdminService,\n    ScenarioService,\n    JiraPluginService,\n    JiraPluginConfigurationService\n} from '@core/services';\nimport { distinct, flatMap, newInstance } from '@shared/tools/array-utils';\nimport { isNotEmpty } from '@shared';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n    selector: 'chutney-campaign-edition',\n    templateUrl: './campaign-edition.component.html',\n    styleUrls: ['./campaign-edition.component.scss']\n})\nexport class CampaignEditionComponent implements OnInit, OnDestroy {\n\n    campaignForm: FormGroup;\n\n    campaign = new Campaign();\n    submitted: boolean;\n    scenarios: Array<ScenarioIndex> = [];\n    scenariosToAdd: Array<ScenarioIndex> = [];\n    errorMessage: any;\n    scenariosFilter: string;\n    subscription = new Subscription();\n\n    hasParam = false;\n    collapseParam = true;\n\n    private routeParamsSubscription: Subscription;\n\n    DRAGGABLE = 'DRAGGABLE';\n\n    environments: Array<string>;\n    selectedEnvironment: string;\n\n    itemList = [];\n    jiraItemList = [];\n    settings = {};\n    jirasettings = {};\n    selectedTags: string[] = [];\n    jiraSelectedTags: string[] = [];\n    datasetId: string;\n    jiraId: string;\n    jiraMap: Map<string, string> = new Map();\n    jiraUrl = '';\n    jiraScenarios: JiraScenario[] = [];\n    jiraScenariosToExclude: Array<ScenarioIndex> = [];\n\n    constructor(\n        private campaignService: CampaignService,\n        private scenarioService: ScenarioService,\n        private componentService: ComponentService,\n        private jiraLinkService: JiraPluginService,\n        private jiraPluginConfigurationService: JiraPluginConfigurationService,\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private route: ActivatedRoute,\n        private dragulaService: DragulaService,\n        private environmentAdminService: EnvironmentAdminService,\n        private translate: TranslateService,\n    ) {\n        this.campaignForm = this.formBuilder.group({\n            title: ['', Validators.required],\n            description: '',\n            tags: [],\n            jiratags: [],\n            campaignTags: '',\n            scenarioIds: [],\n            parameters: this.formBuilder.array([]),\n            parallelRun: false,\n            retryAuto: false,\n            jiraId: '',\n            onlyLinkedScenarios: false\n        });\n    }\n\n    ngOnInit() {\n        this.initMultiSelectSettings();\n        this.submitted = false;\n        this.loadEnvironment();\n        this.loadAllScenarios();\n    }\n\n    private initMultiSelectSettings() {\n        this.translate.get('campaigns.edition.selectTag').subscribe((res: string) => {\n            this.settings = {\n                text: res,\n                enableCheckAll: false,\n                autoPosition: false\n            };\n        });\n        this.translate.get('campaigns.edition.selectJiraTag').subscribe((res: string) => {\n            this.jirasettings = {\n                text: res,\n                enableCheckAll: false,\n                autoPosition: false\n            };\n        });\n    }\n\n    onItemSelect(item: any) {\n        this.selectedTags.push(item.itemName);\n        this.selectedTags = newInstance(this.selectedTags);\n    }\n\n    OnItemDeSelect(item: any) {\n        this.selectedTags.splice(this.selectedTags.indexOf(item.itemName), 1);\n        this.selectedTags = newInstance(this.selectedTags);\n    }\n\n    OnItemDeSelectAll() {\n        this.selectedTags = newInstance([]);\n    }\n\n    onJiraItemSelect(item: any) {\n        this.jiraSelectedTags.push(item.itemName);\n        this.jiraSelectedTags = newInstance(this.jiraSelectedTags);\n        this.jiraFilter();\n    }\n\n    OnJiraItemDeSelect(item: any) {\n        this.jiraSelectedTags.splice(this.jiraSelectedTags.indexOf(item.itemName), 1);\n        this.jiraSelectedTags = newInstance(this.jiraSelectedTags);\n        this.jiraFilter();\n    }\n\n    OnJiraItemDeSelectAll() {\n        this.jiraSelectedTags = newInstance([]);\n        this.jiraFilter();\n    }\n\n    // convenience getter for easy access to form fields\n    get f() {\n        return this.campaignForm.controls;\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n        this.dragulaService.destroy(this.DRAGGABLE);\n    }\n\n    load(id) {\n        if (id != null) {\n            this.campaignService.find(id).subscribe(\n                (campaignFound) => {\n                    this.campaign = campaignFound;\n                    this.campaignForm.controls['title'].setValue(this.campaign.title);\n                    this.campaignForm.controls['description'].setValue(this.campaign.description);\n                    this.campaignForm.controls['parallelRun'].setValue(this.campaign.parallelRun);\n                    this.campaignForm.controls['retryAuto'].setValue(this.campaign.retryAuto);\n                    this.campaignForm.controls['campaignTags'].setValue(this.campaign.tags);\n                    this.selectedEnvironment = this.campaign.environment;\n                    this.setCampaignScenarios();\n                    this.updateCampaignParameters();\n                    this.datasetId = this.campaign.datasetId;\n                    this.initJiraPlugin();\n                },\n                (error) => {\n                    this.errorMessage = error._body;\n                }\n            );\n        }\n    }\n\n    loadAllScenarios() {\n        this.subscription = this.scenarioService.findScenarios().subscribe(\n            (res) => {\n                this.scenarios = res;\n                this.routeParamsSubscription = this.route.params.subscribe((params) => {\n                    this.load(params['id']);\n                });\n                this.initTags();\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    private initTags() {\n        const allTagsInScenario: string[] = distinct(flatMap(this.scenarios, (sc) => sc.tags)).sort();\n\n        allTagsInScenario.forEach((currentValue, index) => {\n            this.itemList.push( {'id': index, 'itemName': currentValue});\n        });\n    }\n\n    loadEnvironment() {\n        this.environmentAdminService.listEnvironmentsNames().subscribe(\n            (res) => {\n                this.environments = res.sort((t1, t2) => t1.toUpperCase() > t2.toUpperCase() ? 1 : 0);\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    loadJiraLink() {\n        this.jiraLinkService.findByCampaignId(this.campaign.id).subscribe(\n            (jiraId) => {\n                this.campaignForm.controls['jiraId'].setValue(jiraId);\n                this.refreshJiraScenarios();\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n\n    }\n\n    initJiraPlugin() {\n        this.jiraPluginConfigurationService.getUrl()\n            .subscribe((r) => {\n                if (r !== '') {\n                    this.jiraUrl = r;\n                    this.loadJiraLink();\n                    this.jiraLinkService.findScenarios()\n                        .subscribe(\n                            (result) => {\n                                this.jiraMap = result;\n                            }\n                        );\n                }\n            });\n    }\n\n    getJiraLink(id: string) {\n        return this.jiraUrl + '/browse/' + this.jiraMap.get(id);\n    }\n\n    getJiraLastExecutionStatus(id: string) {\n        const jiraScenario = this.jiraScenarios.filter(s => s.chutneyId === id);\n        if  (jiraScenario.length > 0) {\n            return jiraScenario[0].executionStatus;\n        } else {\n            return '';\n        }\n    }\n\n    getJiraLastExecutionStatusClass(id: string) {\n        const status = this.getJiraLastExecutionStatus(id);\n        switch (status) {\n            case 'PASS' : return 'bg-success';\n            case 'FAIL' : return 'bg-danger';\n            default : return 'bg-secondary';\n        }\n    }\n\n    hasJiraId() {\n        return this.campaignForm.value['jiraId'] != null && this.campaignForm.value['jiraId'] !== '';\n    }\n\n    refreshJiraScenarios() {\n        if (this.campaignForm.value['jiraId'] !== '') {\n            this.jiraLinkService.findTestExecScenarios(this.campaignForm.value['jiraId'])\n                .subscribe(\n                    (result) => {\n                        this.jiraScenarios = result;\n                        let index = 0;\n                        this.jiraScenarios.forEach((currentValue) => {\n                            if (isNotEmpty(currentValue.executionStatus)) {\n                                this.jiraItemList.push( {'id': index, 'itemName': currentValue.executionStatus});\n                                index++;\n                            }\n                        });\n                        this.jiraFilter();\n                    },\n                    (error) => {\n                        this.errorMessage = error.error;\n                        this.clearJiraScenarios();\n                    }\n                );\n        } else {\n            this.clearJiraScenarios();\n        }\n    }\n\n    clearJiraScenarios(){\n        this.jiraScenarios = [];\n        this.jiraScenariosToExclude = [];\n        this.campaignForm.controls['onlyLinkedScenarios'].setValue(false);\n    }\n\n    jiraFilter() {\n        if (this.campaignForm.controls['onlyLinkedScenarios'].value === true) {\n            this.jiraScenariosToExclude = this.scenarios.filter((item) => {\n                let jiraTagFilter = false;\n                if (this.jiraSelectedTags.length > 0) {\n\n                    jiraTagFilter = (this.jiraScenarios.find(s => item.id === s.chutneyId &&\n                        this.jiraSelectedTags.includes(s.executionStatus))) === undefined;\n                }\n                return (!this.jiraScenarios.map(j => j.chutneyId).includes(item.id)) || jiraTagFilter;\n            });\n        } else {\n            this.jiraScenariosToExclude = [];\n        }\n    }\n\n    clear() {\n        this.campaignForm.reset();\n        let url: string;\n        if (this.campaign.id) {\n            url = '/campaign/' + this.campaign.id + '/execution';\n        } else {\n            url = '/campaign';\n        }\n        this.router.navigateByUrl(url);\n    }\n\n    saveCampaign() {\n        this.submitted = true;\n        const formValue = this.campaignForm.value;\n\n        if (this.campaignForm.invalid) {\n            return;\n        }\n\n        const computedParameters = new Map();\n        formValue['parameters'].forEach((keyValue: KeyValue) => {\n            computedParameters[keyValue.key] = keyValue.value;\n        });\n\n        this.campaign.title = formValue['title'];\n        this.campaign.description = formValue['description'];\n        this.campaign.scenarioIds = formValue['scenarioIds'];\n        this.campaign.computedParameters = computedParameters;\n        this.campaign.environment = this.selectedEnvironment;\n        this.campaign.parallelRun = formValue['parallelRun'];\n        this.campaign.retryAuto = formValue['retryAuto'];\n        this.campaign.datasetId = this.datasetId;\n        const tags = formValue['campaignTags'] + '';\n        this.campaign.tags = tags.length !== 0 ? tags.split(',') : [];\n\n        this.setCampaignScenariosIdsToAdd(this.scenariosToAdd);\n        if (this.campaign.id != null) {\n            this.subscribeToSaveResponse(\n                this.campaignService.update(this.campaign));\n        } else {\n            this.subscribeToSaveResponse(\n                this.campaignService.create(this.campaign));\n        }\n    }\n\n    setCampaignScenarios() {\n        this.scenariosToAdd = [];\n        if (this.campaign.scenarioIds) {\n            for (const idScenario of this.campaign.scenarioIds) {\n                const scenarioFound = this.scenarios.find((x) => x.id === idScenario);\n                if (!this.scenariosToAdd.some((s) => s.id === scenarioFound.id)) {\n                    this.scenariosToAdd.push(scenarioFound);\n                }\n            }\n        }\n    }\n\n    updateCampaignParameters() {\n        const params = this.campaignForm.controls['parameters'] as FormArray;\n        const addedParams = new Set();\n\n        while (params.length !== 0) {\n            params.removeAt(0);\n        }\n\n        for (const scenario of this.scenariosToAdd) {\n            if (TestCase.isComposed(scenario.id)) {\n                this.componentService.findComponentTestCaseExecutableParameters(scenario.id)\n                    .subscribe((computedParameters: Array<KeyValue>) => {\n                        computedParameters.forEach((keyValue: KeyValue) => {\n                            if (!addedParams.has(keyValue.key)) {\n                                params.push(this.formBuilder.group({\n                                    key: keyValue.key,\n                                    value: this.campaign.computedParameters[keyValue.key] ?\n                                        this.campaign.computedParameters[keyValue.key] : ''\n                                }));\n                                addedParams.add(keyValue.key);\n                            }\n                        });\n                    });\n            }\n        }\n        if(addedParams.size > 0) {\n            this.hasParam = true;\n        }\n    }\n\n    setCampaignScenariosIdsToAdd(scenariosToAdd: Array<ScenarioIndex>) {\n        this.campaign.scenarioIds = [];\n        for (const scenario of scenariosToAdd) {\n            if (!this.campaign.scenarioIds.some((s) => s === scenario.id)) {\n                this.campaign.scenarioIds.push(scenario.id);\n            }\n        }\n    }\n\n    addScenario(scenario: ScenarioIndex) {\n        if (!this.scenariosToAdd.some((s) => s.id === scenario.id)) {\n            this.scenariosToAdd.push(scenario);\n            this.updateCampaignParameters();\n            this.refreshForPipe();\n        }\n    }\n\n    removeScenario(scenario: ScenarioIndex) {\n        const index = this.scenariosToAdd.indexOf(scenario);\n        this.scenariosToAdd.splice(index, 1);\n        this.updateCampaignParameters();\n        this.refreshForPipe();\n    }\n\n    switchCollapseParam() {\n        this.collapseParam = !this.collapseParam;\n    }\n\n    private subscribeToSaveResponse(result: Observable<Campaign>) {\n        result.subscribe(\n            (res: Campaign) => this.onSaveSuccess(res),\n            (error) => this.onSaveError(error));\n    }\n\n    private onSaveSuccess(result: Campaign) {\n        this.submitted = false;\n        const url = '/campaign/' + result.id + '/execution';\n        this.updateJiraLink(result.id);\n        this.router.navigateByUrl(url);\n    }\n\n    private onSaveError(error) {\n        console.log(error);\n        try {\n            error.json();\n        } catch (exception) {\n            error.message = error.text();\n        }\n        this.submitted = false;\n        this.errorMessage = error.message;\n    }\n\n    private refreshForPipe() {\n        // force instance to change for pipe refresh\n        this.scenariosToAdd = Object.assign([], this.scenariosToAdd);\n    }\n\n    setSelectedEnvironment(event: string) {\n        this.selectedEnvironment = event;\n    }\n\n    selectDataset(datasetId: string) {\n        this.datasetId = datasetId;\n    }\n\n    private updateJiraLink(campaignId: number) {\n        this.jiraId = this.campaignForm.value['jiraId'];\n        this.jiraLinkService.saveForCampaign(campaignId, this.jiraId).subscribe(\n            () => {},\n            (error) => {\n                this.errorMessage = error.error;\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.campaign-title {\n    height: 50px;\n}\n\n.scenario-title-cell {\n    width: 90%;\n}\n\ninput.search-field {\n    border: none;\n    border-bottom: 1px solid $vert2;\n    width: 100%;\n}\n\nspan.search-field {\n    border: none;\n    color: $vert2;\n    border-bottom: 1px solid $vert2;\n}\n\n.cursor {\n    cursor: pointer;\n}\n\n\nfieldset {\n    width: 100%;\n}\n\nfieldset legend {\n    width: auto;\n    font-size: 1rem;\n}\n\n.legend-title {\n    cursor: default;\n    display: inline-block;\n    width: 150px;\n}\n\n.table th, .table td {\n    vertical-align: middle;\n}\n\n:host ::ng-deep {\n\n    .env-combo {\n        width: 100% !important;\n    }\n}\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .popover-arrow {\n\n            &::after {\n                border-left-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n        padding: 0.5rem;\n    }\n}\n\n.jira-link {\n    padding-top: 1rem !important;\n    cursor: pointer;\n}\n\n.jira-link > label,\n.jira-link > input {\n    cursor: pointer;\n}\n\n.jira-link span {\n    cursor: pointer;\n    color: var(--bs-blue);\n}\n",
                    "styleUrl": "./campaign-edition.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 149
                    }
                }
            },
            "templateData": "<div class=\"row m-5\">\n    <div class=\"col-md-12 ps-0\">\n        <form [formGroup]=\"campaignForm\" (ngSubmit)=\"saveCampaign()\" autocomplete=\"off\">\n            <div class=\"row\">\n                <h4 id=\"myCampaignLabel\">\n                    {{campaign.id ? ('campaigns.edition.title.update' | translate) : (('campaigns.edition.title.create' | translate))}}\n                </h4>\n                <div class=\"w-100\" *ngIf=\"errorMessage\">\n                    <p class=\"text-danger\">{{ errorMessage}}</p>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <button type=\"submit\" [disabled]=\"submitted && campaignForm.invalid\" class=\"btn btn-success m-2\">\n                        <span class=\"fa fa-check\"></span>&nbsp;\n                        <span>{{ 'global.actions.record' | translate }}</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-secondary m-2\" (click)=\"clear()\">\n                        <span class=\"fa fa-times\"></span>&nbsp;\n                        <span>{{ 'global.actions.cancel' | translate }}</span>\n                    </button>\n                </div>\n            </div>\n            <div class=\"form-row\">\n                <div class=\"form-group col-md-7  pe-3\" [class.errors-input]=\"submitted && f['title'].errors['required']\">\n                    <label for=\"title\">{{ 'campaigns.edition.form.title.label' | translate }}</label>\n                    <input type=\"text\" id=\"title\" class=\"form-control\" formControlName=\"title\">\n                    <div class=\"error-message\" *ngIf=\"submitted && f['title'].errors['required']\">\n                        {{ 'campaigns.edition.form.title.required' | translate }}\n                    </div>\n                </div>\n\n                <div class=\"form-group col-md-5\">\n                    <label for=\"description\">{{ 'campaigns.edition.form.description' | translate }}</label>\n                    <input type=\"text\" id=\"description\" class=\"form-control\" formControlName=\"description\">\n                </div>\n            </div>\n            <div class=\"form-row\">\n                <div class=\"form-group col-md-2  pe-3\">\n                    <label>{{'menu.principal.jiraId' | translate}}</label>\n                    <input type=\"text\" class=\"form-control me-2 small-text\"\n                           formControlName=\"jiraId\" (change)=\"refreshJiraScenarios()\"\n                           placeholder=\"id jira\"/>\n                </div>\n                <div class=\"form-group col-md-2  pe-3\">\n                    <label>{{'menu.principal.dataset' | translate}}</label>\n                    <chutney-dataset-selection\n                        [selectedDatasetId]=\"campaign.datasetId\"\n                        (selectionEvent)=\"selectDataset($event)\">\n                    </chutney-dataset-selection>\n                </div>\n\n                <div *ngIf=\"environments\" class=\"form-group col-md-2  pe-3\">\n                    <label>{{'admin.targets.environment' | translate}}</label>\n                    <chutney-environment-combo [environments]=\"environments\" [defaultValue]=\"campaign.environment\"\n                                               (selectionEvent)=\"setSelectedEnvironment($event)\">\n                    </chutney-environment-combo>\n                </div>\n\n                <div class=\"form-group col-md-2\">\n                    <label>{{'campaigns.edition.form.tags' | translate}}</label>\n                    <input type=\"text\" class=\"form-control me-2 small-text\"\n                           formControlName=\"campaignTags\" placeholder=\"tags\"/>\n                </div>\n                <div class=\"col-md-6\">\n                    {{ 'campaigns.edition.options' | translate }} :\n                    <div class=\"ms-4\">\n                        <div class=\"form-group form-check\">\n                            <input type=\"checkbox\" class=\"form-check-input\" id=\"parallelCheck\"\n                                   formControlName=\"parallelRun\">\n                            <label class=\"form-check-label\"\n                                   for=\"parallelCheck\">{{ 'campaigns.edition.parallelRun' | translate }}</label>\n                        </div>\n                        <div class=\"form-group form-check\">\n                            <input type=\"checkbox\" class=\"form-check-input\" id=\"retryAutoCheck\"\n                                   formControlName=\"retryAuto\">\n                            <label class=\"form-check-label\"\n                                   for=\"retryAutoCheck\">{{ 'campaigns.edition.retryAuto' | translate }}</label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-row\" *ngIf=\"hasParam\">\n                <fieldset class=\"mt-4\" [ngClass]=\"collapseParam ? '' : 'border ps-2'\">\n                    <legend class=\"px-3 fw-bold float-none\">\n                        <span class=\"legend-title\"\n                              (click)=\"switchCollapseParam()\">{{'components.shared.edition.blocks.parameters' | translate}}</span>\n                        <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n                                (click)=\"switchCollapseParam()\"\n                                title=\"{{(collapseParam ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                            <span class=\"fa\" [ngClass]=\"collapseParam ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                        </button>\n                    </legend>\n                    <ng-container *ngIf=\"!collapseParam\">\n                        <div class=\"row\" formArrayName=\"parameters\"\n                             *ngFor=\"let parameter of campaignForm.get('parameters')?.controls; let i = index;\">\n                            <ng-container [formGroupName]=\"i\">\n                                <div class=\"col-2\"></div>\n                                <input type=\"text\" class=\"col-2 form-control me-2\" formControlName=\"key\"\n                                       placeholder=\"key\" readonly/>\n                                <textarea class=\"col-6 form-control me-2\" formControlName=\"value\" rows=\"1\"\n                                          placeholder=\"value\"></textarea>\n                            </ng-container>\n                        </div>\n                    </ng-container>\n                </fieldset>\n            </div>\n            <div class=\"row\">\n                <!-- Left side -->\n                <div class=\"col-md-6\">\n                    <div class=\"row campaign-title mt-2\">\n                        <h4>{{ 'campaigns.edition.scenarios.title' | translate }}</h4>\n                    </div>\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-striped table-hover\">\n                            <tbody dragula=\"DRAGGABLE\" [(dragulaModel)]=\"scenariosToAdd\">\n                            <tr *ngFor=\"let scenario of scenariosToAdd\" class=\"cursor\">\n                                <td>\n                                    <button type=\"button\" class=\"btn btn-outline-primary btn-sm\"\n                                            (click)=\"removeScenario(scenario)\">\n                                        <span class=\"fa fa-arrow-circle-right\"></span>\n                                    </button>\n                                </td>\n                                <td class=\"text-nowrap\">{{scenario?.id}}</td>\n                                <td class=\"scenario-title-cell\">{{scenario?.title}}</td>\n                                <td class=\"p-0\">\n                                    <span *ngIf=\"jiraMap.has(scenario.id)\"\n                                          [ngClass]=\"getJiraLastExecutionStatusClass(scenario.id)\" class=\"badge\">\n                                        {{getJiraLastExecutionStatus(scenario.id)}}\n                                    </span>\n                                </td>\n                                <td class=\"p-0\">\n                                    <a  *ngIf=\"jiraMap.has(scenario.id)\" role=\"button\" class=\"btn btn-sm btn-link me-0\"\n                                        target=\"_blank\" href=\"{{getJiraLink(scenario.id)}}\"\n                                        ngbPopover=\"{{jiraMap.get(scenario.id)}}\" placement=\"left\" (click)=\"$event.stopPropagation()\"\n                                        triggers=\"mouseenter:mouseleave\">\n                                        <span class=\"fab fa-jira\" aria-hidden=\"true\">\n                                        </span>\n                                    </a>\n                                </td>\n                                <td class=\"p-0\">\n                                    <button type=\"button\" class=\"btn btn-link me-0\"\n                                            ngbPopover=\"{{scenario.description}}\" placement=\"left\"\n                                            triggers=\"mouseenter:mouseleave\">\n                                        <span class=\"fa fa-info-circle\" aria-hidden=\"true\"></span>\n                                    </button>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <!-- Right side -->\n                <div class=\"col-md-6\">\n                    <div class=\"row\">\n                        <div class=\"col campaign-title\">\n                            <h4>{{ 'campaigns.edition.scenarios.pick.title' | translate }}</h4>\n                            <div *ngIf=\"hasJiraId()\" class=\"jira-link\" >\n                                <label for=\"jiraLinkTests\">\n                                    <span class=\"fab fa-jira\"></span>\n                                    {{ 'campaigns.edition.jiraLinkedTest' | translate }}\n                                </label>\n                                <input type=\"checkbox\" id=\"jiraLinkTests\" class=\"ms-2\"\n                                       formControlName=\"onlyLinkedScenarios\" (change)=\"jiraFilter()\">\n                            </div>\n                        </div>\n                        <div class=\"col\">\n                            <input name=\"search\" type=\"text\" class=\"form-control search-field mb-2\" id=\"scenarioIds\"\n                                   formControlName=\"scenarioIds\" placeholder=\"Filtrer scénarios\"\n                                   [(ngModel)]=\"scenariosFilter\"/>\n                            <angular2-multiselect [data]=\"itemList\"\n                                                  [settings]=\"settings\"\n                                                  (onSelect)=\"onItemSelect($event)\"\n                                                  (onDeSelect)=\"OnItemDeSelect($event)\"\n                                                  (onDeSelectAll)=\"OnItemDeSelectAll()\"\n                                                  formControlName=\"tags\">\n                            </angular2-multiselect>\n                            <ng-container *ngIf=\"jiraScenarios.length > 0 && campaignForm.controls['onlyLinkedScenarios'].value === true\">\n                                <div class=\"pt-2\">\n                                    <angular2-multiselect [data]=\"jiraItemList\"\n                                                          [settings]=\"jirasettings\"\n                                                          (onSelect)=\"onJiraItemSelect($event)\"\n                                                          (onDeSelect)=\"OnJiraItemDeSelect($event)\"\n                                                          (onDeSelectAll)=\"OnJiraItemDeSelectAll()\"\n                                                          formControlName=\"jiratags\">\n                                    </angular2-multiselect>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-striped table-hover\">\n                            <tbody>\n                            <tr\n                                *ngFor=\"let scenario of scenarios |  scenarioCampaignSearch : selectedTags | searchTextPipe  : scenariosFilter : ['title', 'id'] | withoutScenario:scenariosToAdd | withoutScenario:jiraScenariosToExclude\">\n                                <td class=\"w-3\">\n                                    <button type=\"button\" class=\"btn btn-outline-success btn-sm\"\n                                            (click)=\"addScenario(scenario)\">\n                                        <span class=\"fa fa-arrow-circle-left\"></span>\n                                    </button>\n                                </td>\n                                <td class=\"text-nowrap w-10\">{{scenario?.id}}</td>\n                                <td class=\"scenario-title-cell w-70\">{{scenario?.title}}</td>\n                                <td class=\"w-15\">\n                                        <span *ngFor=\"let tag of scenario.tags\">\n                                            <span class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                                        </span>\n                                </td>\n                                <td class=\"p-0\">\n                                    <span *ngIf=\"jiraMap.has(scenario.id)\"\n                                          [ngClass]=\"getJiraLastExecutionStatusClass(scenario.id)\" class=\"badge\">\n                                        {{getJiraLastExecutionStatus(scenario.id)}}\n                                    </span>\n                                </td>\n                                <td class=\"p-0\">\n                                    <a *ngIf=\"jiraMap.has(scenario.id)\" role=\"button\" class=\"btn btn-sm btn-link me-0\"\n                                       target=\"_blank\" href=\"{{getJiraLink(scenario.id)}}\"\n                                       ngbPopover=\"{{jiraMap.get(scenario.id)}}\" placement=\"left\" (click)=\"$event.stopPropagation()\"\n                                       triggers=\"mouseenter:mouseleave\">\n                                        <span class=\"fab fa-jira\" aria-hidden=\"true\">\n                                        </span>\n                                    </a>\n                                </td>\n                                <td class=\"w-2 p-0\">\n                                    <button type=\"button\" class=\"btn btn-link me-0\"\n                                            ngbPopover=\"{{scenario.description}}\" placement=\"left\"\n                                            triggers=\"mouseenter:mouseleave\">\n                                        <span class=\"fa fa-info-circle\" aria-hidden=\"true\"></span>\n                                    </button>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n"
        },
        {
            "name": "CampaignExecutionComponent",
            "id": "component-CampaignExecutionComponent-8b5bc82f2720c4c16a2fee06edfe82e8061c1b689faba60d42025faba367572e3ca1f666c3b663d6a672149a14ee540672685603ed5132de6c074c8711bd0c73",
            "file": "src/app/modules/campaign/components/execution/execution-campaign.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Location"
                }
            ],
            "selector": "chutney-execution-campaign",
            "styleUrls": [
                "./execution-campaign.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./execution-campaign.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "campaign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Campaign",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "campaignSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CampaignReport",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "currentCampaignExecutionReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CampaignExecutionReport",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "currentScenariosReportsOutlines",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioExecutionReportOutline>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "deletionConfirmationTextPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "deletionConfirmationTextSuffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "executeDropDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgbDropdown>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "NgbDropdown"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "executionError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "jiraScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JiraScenario[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "jiraUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CampaignReport",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "orderBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "orderedScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "reverseOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "running",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedStatusByScenarioId",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "stopRequested",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "subscriptionLoadCampaign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "testExecutionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "TIMER",
                    "defaultValue": "2000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "UNSUPPORTED",
                    "defaultValue": "'UNSUPPORTED'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCampaign",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCampaign",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeCampaign",
                    "args": [
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeCampaignOnToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportScenarioByCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getJiraLink",
                    "args": [
                        {
                            "name": "chutneyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chutneyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyExtractorBy",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(i: any) => any",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLastCompleteReport",
                    "args": [],
                    "optional": false,
                    "returnType": "CampaignReport",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hasAuthorization",
                    "args": [
                        {
                            "name": "authorizations",
                            "type": "Array<Authorization>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 453,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authorizations",
                            "type": "Array<Authorization>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initJiraTestExecutionId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 395,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOlderThan",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "durationInHours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "durationInHours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCampaign",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectLast",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectLast",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadReports",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectLast",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectLast",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScenarios",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeJiraLink",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 446,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replayFailed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetOrdering",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarioStatus",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedUpdateStatus",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectLastCompleteExecution",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectReport",
                    "args": [
                        {
                            "name": "campaignExecutionReport",
                            "type": "CampaignExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignExecutionReport",
                            "type": "CampaignExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortBy",
                    "args": [
                        {
                            "name": "collection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortCurrentBy",
                    "args": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortCurrentCampaignReports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sortLastBy",
                    "args": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unsubscribeCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 440,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateLocation",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 457,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRunningReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 372,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "xrayStatuses",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FileSaverService } from 'ngx-filesaver';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\n\nimport { combineLatest, Observable, Subscription, timer } from 'rxjs';\n\nimport * as JSZip from 'jszip';\n\nimport {\n    Campaign,\n    CampaignExecutionReport,\n    ScenarioExecutionReportOutline,\n    ScenarioIndex,\n    TestCase,\n    Authorization,\n    JiraScenario,\n    XrayStatus\n} from '@model';\nimport {\n    CampaignService,\n    EnvironmentAdminService,\n    ScenarioService,\n    JiraPluginService,\n    LoginService,\n    JiraPluginConfigurationService\n} from '@core/services';\nimport { newInstance, sortByAndOrder } from '@shared/tools';\n\n@Component({\n    selector: 'chutney-execution-campaign',\n    providers: [Location],\n    templateUrl: './execution-campaign.component.html',\n    styleUrls: ['./execution-campaign.component.scss']\n})\nexport class CampaignExecutionComponent implements OnInit, OnDestroy {\n\n    TIMER = 2000;\n\n    deletionConfirmationTextPrefix: string;\n    deletionConfirmationTextSuffix: string;\n    executionError: String;\n\n    campaign: Campaign;\n    scenarios: Array<ScenarioIndex> = [];\n    orderedScenarios: Array<ScenarioIndex> = [];\n\n    last: CampaignReport;\n    current: CampaignReport;\n    stopRequested = false;\n\n    currentCampaignExecutionReport: CampaignExecutionReport;\n    currentScenariosReportsOutlines: Array<ScenarioExecutionReportOutline> = [];\n    campaignSub: Subscription;\n\n    environments: Array<string>;\n\n    orderBy: any;\n    reverseOrder: any;\n\n    @ViewChildren(NgbDropdown)\n    private executeDropDown: QueryList<NgbDropdown>;\n\n    running = false;\n    errorMessage: any;\n\n    private subscriptionLoadCampaign: Subscription;\n\n    Authorization = Authorization;\n\n    // Jira\n    testExecutionId: string;\n    jiraScenarios: JiraScenario[] = [];\n    jiraUrl = '';\n    UNSUPPORTED = 'UNSUPPORTED';\n    selectedStatusByScenarioId: Map<string, string> = new Map();\n\n    constructor(private campaignService: CampaignService,\n                private environmentAdminService: EnvironmentAdminService,\n                private fileSaverService: FileSaverService,\n                private jiraPluginConfigurationService: JiraPluginConfigurationService,\n                private jiraLinkService: JiraPluginService,\n                private route: ActivatedRoute,\n                private router: Router,\n                private scenarioService: ScenarioService,\n                private translate: TranslateService,\n                private loginService: LoginService,\n                private location: Location,\n    ) {\n        translate.get('campaigns.confirm.deletion.prefix').subscribe((res: string) => {\n            this.deletionConfirmationTextPrefix = res;\n        });\n        translate.get('campaigns.confirm.deletion.suffix').subscribe((res: string) => {\n            this.deletionConfirmationTextSuffix = res;\n        });\n    }\n\n    ngOnInit() {\n        this.subscriptionLoadCampaign = this.route.params.subscribe((params) => {\n            this.loadCampaign(params['id'], true, params['execId']);\n            this.loadScenarios(params['id']);\n        });\n        if (this.loginService.hasAuthorization(Authorization.CAMPAIGN_EXECUTE)) {\n            this.environmentAdminService.listEnvironmentsNames().subscribe(\n                (res) => this.environments = res\n            );\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscriptionLoadCampaign) {\n            this.subscriptionLoadCampaign.unsubscribe();\n        }\n        this.unsubscribeCampaign();\n    }\n\n    private loadCampaign(campaignId: number, selectLast: boolean, executionId: number = null) {\n        this.campaignService.find(campaignId).subscribe(\n            (campaign) => {\n                if (campaign) {\n                    this.campaign = campaign;\n                    this.loadReports(this.campaign, selectLast, executionId);\n                    this.initJiraTestExecutionId();\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    private loadReports(campaign: Campaign, selectLast: boolean, executionId: number = null) {\n        if (this.campaign.campaignExecutionReports.length > 0) {\n            this.sortCurrentCampaignReports();\n            if (selectLast) {\n                this.selectReport(campaign.campaignExecutionReports[0]);\n            }\n            if (executionId) {\n                const execution = campaign.campaignExecutionReports.filter((r) => r.executionId === executionId);\n                if (execution.length === 1) {\n                    this.selectReport(execution[0]);\n                }\n            }\n            this.running = CampaignService.existRunningCampaignReport(this.campaign.campaignExecutionReports);\n            if (this.running) {\n                this.unsubscribeCampaign();\n                this.campaignSub = timer(this.TIMER).subscribe(() => {\n                        this.updateRunningReport();\n                    }\n                );\n            }\n            this.last = this.getLastCompleteReport();\n        }\n    }\n\n    selectLastCompleteExecution() {\n        this.currentCampaignExecutionReport = null;\n        this.updateLocation('last');\n    }\n\n    private updateRunningReport() {\n        this.campaignService.find(this.campaign.id).subscribe(\n            (campaign) => {\n                const sortedReports = campaign.campaignExecutionReports.sort((a, b) => b.executionId - a.executionId);\n                if (this.campaign.campaignExecutionReports[0] &&\n                    this.campaign.campaignExecutionReports[0].executionId !== sortedReports[0].executionId) {\n                    // Add new running report\n                    this.campaign.campaignExecutionReports.unshift(sortedReports[0]);\n                    this.selectReport(sortedReports[0]);\n                } else {\n                    // Update running report\n                    this.campaign.campaignExecutionReports[0] = sortedReports[0];\n                    if (this.currentCampaignExecutionReport &&\n                        this.currentCampaignExecutionReport.executionId === sortedReports[0].executionId) {\n                        this.currentCampaignExecutionReport = sortedReports[0];\n                        this.currentScenariosReportsOutlines = newInstance(sortedReports[0].scenarioExecutionReports);\n                    }\n                }\n                this.unsubscribeCampaign();\n                if (sortedReports[0].status === 'RUNNING') {\n                    this.campaignSub = timer(this.TIMER).subscribe(() => {\n                            this.updateRunningReport();\n                        }\n                    );\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    private getLastCompleteReport() {\n        for (const report of this.campaign.campaignExecutionReports) {\n            const campaignReport = new CampaignReport(report);\n            if (!campaignReport.isRunning() && !report.partialExecution &&\n                !campaignReport.hasNotExecuted() && !campaignReport.hasStopped()) {\n                return campaignReport;\n            }\n        }\n        return null;\n    }\n\n    private loadScenarios(campaignId) {\n        this.campaignService.findAllScenarios(campaignId).subscribe(\n            (scenarios) => {\n                this.scenarios = scenarios;\n                this.orderedScenarios = newInstance(scenarios);\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n    }\n\n    sortCurrentBy(property) {\n        this.sortBy(this.currentScenariosReportsOutlines, property);\n    }\n\n    sortLastBy(property) {\n        this.sortBy(this.orderedScenarios, property);\n    }\n\n    sortBy(collection: any, property) {\n        if (this.orderBy === property) {\n            this.reverseOrder = !this.reverseOrder;\n        }\n        this.orderBy = property;\n\n        return sortByAndOrder(\n            collection,\n            this.getKeyExtractorBy(property),\n            this.reverseOrder\n        );\n    }\n\n    private getKeyExtractorBy(property: string) {\n        if (property === 'title') {\n            return i => i[property] == null ? '' : i[property].toLowerCase();\n        }\n        if (property === 'creationDate') {\n            const now = Date.now();\n            return i => i[property] == null ? now - 1491841324 /*2017-04-10T16:22:04*/ : now - Date.parse(i[property]);\n        } else {\n            return i => i[property] == null ? '' : i[property];\n        }\n    }\n\n    executeCampaign(env: string) {\n        this.running = true;\n        this.stopRequested = false;\n        this.campaignService.executeCampaign(this.campaign.id, env).subscribe(\n            () => {\n                // Do nothing\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            },\n            () => this.running = false\n        );\n        this.campaignSub = timer(this.TIMER).subscribe(() => {\n            this.loadCampaign(this.campaign.id, true);\n        });\n    }\n\n    executeCampaignOnToggle() {\n        if (this.environments.length === 1) {\n            this.executeDropDown.first.close();\n            this.executeCampaign(this.environments[0]);\n        }\n    }\n\n    selectReport(campaignExecutionReport: CampaignExecutionReport) {\n        this.resetOrdering();\n        this.current = new CampaignReport(campaignExecutionReport);\n        this.currentCampaignExecutionReport = campaignExecutionReport;\n        this.currentScenariosReportsOutlines = newInstance(campaignExecutionReport.scenarioExecutionReports);\n        this.updateLocation(this.currentCampaignExecutionReport.executionId);\n    }\n\n    private resetOrdering() {\n        this.orderBy = '';\n        this.reverseOrder = false;\n        this.orderedScenarios = newInstance(this.scenarios);\n    }\n\n    editCampaign(campaign: Campaign) {\n        const url = '/campaign/' + campaign.id + '/edition';\n        this.router.navigateByUrl(url);\n    }\n\n    deleteCampaign(campaignId: number, title: string) {\n        if (confirm(this.deletionConfirmationTextPrefix + title + this.deletionConfirmationTextSuffix)) {\n            this.campaignService.delete(campaignId).subscribe(\n                (response) => {\n                    this.removeJiraLink(campaignId);\n                    this.router.navigateByUrl('/campaign');\n                },\n                (error) => {\n                    this.errorMessage = error.error;\n                }\n            );\n        }\n    }\n\n    isOlderThan(date: string, durationInHours: number) {\n        if (date) {\n            return new Date().getTime() - new Date(date).getTime() > durationInHours * 60 * 60 * 1000;\n        }\n        return false;\n    }\n\n    exportScenarioByCampaign() {\n\n        const rawTestCaseContent: Array<Observable<TestCase>> = [];\n\n        for (const testCase of this.scenarios) {\n            if (!TestCase.isComposed(testCase.id)) {\n                rawTestCaseContent.push(this.scenarioService.findRawTestCase(testCase.id));\n            } else {\n                this.errorMessage = 'La campagne possede des scénarios component qui ne sont pas exportables';\n            }\n        }\n\n        const zip = new JSZip();\n        const campaignTitle = this.campaign.title;\n\n        combineLatest(rawTestCaseContent).subscribe(results => {\n                results.forEach(testCase => {\n                    const fileName = `${testCase.id}-${testCase.title}.chutney.hjson`;\n                    zip.file(fileName, testCase.content);\n                });\n\n                zip\n                    .generateAsync({type: 'blob'})\n                    .then(blob => this.fileSaverService.save(blob, campaignTitle));\n            }\n        );\n    }\n\n    stopScenario() {\n        this.campaignService.stopExecution(this.campaign.id, this.currentCampaignExecutionReport.executionId).subscribe(() => {\n            this.stopRequested = true;\n        }, error => {\n            this.executionError = 'Cannot stop campaign : ' + error.status + ' ' + error.statusText + ' ' + error.error;\n        }, () => {\n        });\n    }\n\n    replayFailed() {\n        this.running = true;\n        this.campaignService.replayFailedScenario(this.currentCampaignExecutionReport.executionId).subscribe(\n            () => {\n                // Do nothing\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            },\n            () => this.running = false\n        );\n        this.campaignSub = timer(this.TIMER).subscribe(() => {\n            this.updateRunningReport();\n        });\n    }\n\n    selectedUpdateStatus(scenarioId: string, event: any) {\n        this.selectedStatusByScenarioId.set(scenarioId, event.target.value);\n    }\n\n    updateStatus(scenarioId: string) {\n        const newStatus = this.selectedStatusByScenarioId.get(scenarioId);\n        if (newStatus === XrayStatus.PASS || newStatus === XrayStatus.FAIL) {\n            this.jiraLinkService.updateScenarioStatus(this.testExecutionId, scenarioId, newStatus).subscribe(\n                () => {},\n                (error) => {\n                    console.log(error);\n                    this.errorMessage = 'Cannot update jira status. \\n' + error.error;\n                }\n            );\n        }\n    }\n\n    scenarioStatus(scenarioId: String): string {\n        const jiraScenario = this.jiraScenarios.filter(s => s.chutneyId === scenarioId);\n        if  (jiraScenario.length > 0) {\n            if (jiraScenario[0].executionStatus === XrayStatus.PASS || jiraScenario[0].executionStatus === XrayStatus.FAIL) {\n                return jiraScenario[0].executionStatus;\n            }\n        }\n        return this.UNSUPPORTED;\n    }\n\n    initJiraTestExecutionId() {\n\n        this.jiraPluginConfigurationService.getUrl()\n        .subscribe((r) => {\n            if (r !== '') {\n                this.jiraUrl = r;\n            }\n        });\n        this.jiraLinkService.findByCampaignId(this.campaign.id).subscribe(\n            (jiraId) => {\n                this.testExecutionId = jiraId;\n                if(jiraId) {\n                    this.jiraLinkService.findTestExecScenarios(this.testExecutionId)\n                    .subscribe(\n                        (result) => {\n                            this.jiraScenarios = result;\n                        }\n                    );\n                }\n            },\n            (error) => {\n                this.errorMessage = error.error;\n            }\n        );\n\n    }\n\n    getJiraLink(chutneyId: string) {\n        const foundScenario = this.jiraScenarios.find(s => s.chutneyId === chutneyId);\n        if (foundScenario) {\n            return this.jiraUrl + '/browse/' + foundScenario.id;\n        } else {\n            return null;\n        }\n    }\n\n    xrayStatuses(): Array<string> {\n        const keys = Object.keys(XrayStatus);\n        return keys.slice();\n    }\n\n    private sortCurrentCampaignReports() {\n        this.campaign.campaignExecutionReports.sort((a, b) => b.executionId - a.executionId);\n    }\n\n    private unsubscribeCampaign() {\n        if (this.campaignSub) {\n            this.campaignSub.unsubscribe();\n        }\n    }\n\n    private removeJiraLink(campaignId: number) {\n        this.jiraLinkService.removeForCampaign(campaignId).subscribe(\n            () => {},\n            (error) => { console.log(error); }\n        );\n    }\n\n    hasAuthorization(authorizations: Array<Authorization>): boolean {\n        return this.loginService.hasAuthorization(authorizations);\n    }\n\n    private updateLocation(executionId) {\n        this.location.replaceState('/campaign/' + this.campaign.id + '/execution/' + executionId);\n    }\n}\n\nclass CampaignReport {\n    private report: CampaignExecutionReport;\n\n    passed: number;\n    failed: number;\n    stopped: number;\n    notexecuted: number;\n    total: number;\n\n    constructor(report: CampaignExecutionReport) {\n        this.report = report;\n        this.passed = this.countScenarioByStatus('SUCCESS', report);\n        this.failed = this.countScenarioByStatus('FAILURE', report);\n        this.stopped = this.countScenarioByStatus('STOPPED', report);\n        this.notexecuted = this.countScenarioByStatus('NOT_EXECUTED', report);\n        this.total = this.passed + this.failed + this.stopped + this.notexecuted;\n    }\n\n    private countScenarioByStatus(status: String, report: CampaignExecutionReport) {\n        return report.scenarioExecutionReports.filter(s => s.status === status).length;\n    }\n\n    allPassed() {\n        return !this.hasStopped() && !this.hasStopped();\n    }\n\n    hasPassed() {\n        return this.passed > 0;\n    }\n\n    hasFailure() {\n        return this.failed > 0;\n    }\n\n    hasStopped() {\n        return this.stopped > 0;\n    }\n\n    hasNotExecuted() {\n        return this.notexecuted > 0;\n    }\n\n    isRunning() {\n        return 'RUNNING' === this.report.status;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'mixins';\n@import 'animations';\n\n@include box-shadow-animation(\n    $animation_name: history-tile-running-anim,\n    $fromOffsetX: 4px,\n    $fromOffsetY: 4px,\n    $fromBlur: 8px,\n    $fromSpread: 0,\n    $fromColor: rgba($grisfonce2, 30),\n    $toOffsetX: 8px,\n    $toOffsetY: 8px,\n    $toBlur: 16px,\n    $toSpread: 0,\n    $toColor: rgba($grisfonce2, 30)\n);\n\n.small_text {\n    font-size:0.7em;\n}\n\n.noselect {\n    -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select: none; /* Konqueror HTML */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* Internet Explorer/Edge */\n    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */\n}\n\nbutton {\n    margin-right: 30px;\n}\n\nh1 {\n    margin: 0;\n}\n\nh1>span {\n    line-height: 1.24;\n}\n\nh2 {\n    font-weight: bold;\n    font-size: 15px;\n    border: 0 solid grey;\n    border-bottom-width: 3px;\n    margin-bottom: 20px;\n}\n\nh2.current-campaign-report {\n    display: inline;\n}\n\nh3 {\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n}\n\n.table td {\n    vertical-align: middle;\n}\n\n.scenario-execute-btn {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n\n.history-panel {\n    @extend .noselect;\n    padding: 0 5px;\n\n    h2 {\n        margin-bottom: 5px;\n    }\n\n    .reports {\n        margin-right: 15px;\n    }\n\n    .title {\n        font-weight: bold;\n        padding-left: 2px;\n        padding-top: 2px;\n    }\n\n    .execution-id {\n        color: black;\n        font-size: 14px;\n        font-weight: bold;\n        margin-left: 4px;\n    }\n\n    .time {\n        font-size: 10px;\n        color: white;\n        padding-top: 6px;\n        padding-left: 20px;\n        padding-right: 10px;\n        line-height: 14px;\n        min-height: 40px;\n    }\n\n    .tile {\n        padding: 0;\n        cursor: pointer;\n        border-radius: 4px;\n        box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);\n        margin: 10px 0 10px 0;\n    }\n\n    .tile:hover {\n        margin: 10px -20px 10px 20px;\n        box-shadow: 8px 8px 16px rgba(0, 0, 0, 0.3);\n    }\n\n    .tile-ok {\n        background-color: $liens;\n    }\n\n    .tile-ko {\n        background-color: $labelko;\n    }\n\n    .tile-stop {\n        background-color: $grisfonce2;\n    }\n\n    .tile-selected {\n        margin: 10px -20px 10px 20px;\n    }\n\n    .tile-running {\n        background-color: $grisclair1;\n        @include animation(\n            $animation_name: history-tile-running-anim,\n            $animation_duration: 750ms,\n            $animation_timing-function: linear,\n            $animation_iteration-count: infinite,\n            $animation_direction: alternate);\n    }\n\n    .fa-circle {\n        background-color: white;\n        padding: 5px;\n        border-radius: 4px;\n    }\n\n    .circle-ok {\n        color: #0275d8;\n    }\n\n    .circle-ko {\n        color: #d9534f;\n    }\n\n    .circle-stop {\n        color: $grisfonce1;\n    }\n}\n\n.table-link {\n    color: #212529; // Bootstrap table default color\n}\n\n.scenario-summary {\n    color:white;\n    text-align: center;\n}\n\n.filter {\n    cursor: pointer;\n}\n",
                    "styleUrl": "./execution-campaign.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"campaign\" class=\"row page-header m-4 ps-2\">\n    <div class=\"col-md-5\">\n        <h4 [innerHTML]=\"campaign.title | linkify\">\n        </h4>\n        <small class=\"text-muted\" [innerHTML]=\"campaign.description | linkify\"></small>\n    </div>\n    <div class=\"col-md-2\" *hasAuthorization=\"[Authorization.CAMPAIGN_EXECUTE]\">\n        <div class=\"btn-toolbar\">\n            <button *ngIf=\"this.currentCampaignExecutionReport?.status === 'RUNNING'\" type=\"button\" class=\"btn btn-dark m-2\" (click)=\"stopScenario()\" [disabled]=\"stopRequested \">\n                <span class=\"fa fa-stop me-2\"></span>\n                <span class=\"btn-label\">{{ 'global.actions.stop' | translate }}</span>\n            </button>\n            <div *ngIf=\"!running\" ngbDropdown class=\"d-inline-block\">\n                <button id=\"execute-campaign-btn\" type=\"button\" class=\"btn btn-success\" ngbDropdownToggle\n                        (click)=\"executeCampaignOnToggle()\"\n                        [disabled]=\"running || (scenarios && scenarios.length == 0)\">\n                    <span class=\"fa fa-play me-2\" aria-hidden=\"true\"></span>\n                    <span class=\"btn-label\">{{ 'global.actions.execute' | translate }}</span>\n                </button>\n                <div ngbDropdownMenu aria-labelledby=\"execute-campaign-btn\">\n                    <button *ngFor=\"let env of environments\" class=\"dropdown-item\" ngbDropdownItem\n                            (click)=\"executeCampaign(env)\">{{ env }}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-md-5\">\n        <div class=\"btn-toolbar\" *hasAuthorization=\"[Authorization.CAMPAIGN_WRITE]\">\n            <button type=\"button\" class=\"btn btn-light border\" (click)=\"editCampaign(campaign)\">\n                <span class=\"fa fa-pencil-alt me-2\"></span>\n                <span class=\"btn-label\">{{ 'global.actions.edit' | translate }}</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-danger\"\n                    (click)=\"deleteCampaign(campaign.id, campaign.title)\"\n                    [disabled]=\"running\">\n                <span class=\"fa fa-trash me-2\"></span>\n                <span class=\"btn-label\">{{ 'global.actions.delete' | translate }}</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-light border\" (click)=\"exportScenarioByCampaign()\">\n                <span class=\"fa fa-file-code me-2\"></span>\n                <span class=\"btn-label\">{{ 'global.actions.export' | translate }}</span>\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"row bg-danger\" *ngIf=\"executionError\">\n    <div class=\"col-2 ps-0\">\n        <button type=\"button\" class=\"btn text-white\" (click)=\"executionError = ''\">\n            <span class=\"fa fa-times\"></span>\n        </button>\n    </div>\n    <em class=\"text-white fw-bold\">{{executionError}}</em>\n</div>\n\n<div class=\"row bg-danger\" *ngIf=\"errorMessage\">\n    <div class=\"col-2 pls0\">\n        <button type=\"button\" class=\"btn text-white\" (click)=\"errorMessage = ''\">\n            <span class=\"fa fa-times\"></span>\n        </button>\n    </div>\n    <em class=\"text-white fw-bold\">{{errorMessage}}</em>\n</div>\n\n<div class=\"row\">\n    <div class=\"history-panel col col-md-2\">\n        <h2>{{ 'campaigns.execution.last.actual' | translate }}</h2>\n        <div class=\"reports\" *ngIf=\"last\">\n            <div class=\"row tile tile-click tile-ko tile-selected\"\n                (click)=\"selectLastCompleteExecution()\"\n                [ngClass]=\"{\n                        'tile-ok': last.allPassed(),\n                        'tile-ko': last.hasFailure() && !(last.hasStopped() || last.hasNotExecuted()),\n                        'tile-stop': last.hasStopped() || last.hasNotExecuted(),\n                        'tile-selected': currentCampaignExecutionReport == null\n                    }\"\n                >\n                <div id=\"scenarioSummary\" class=\"col scenario-summary\">\n                    <span *ngIf=\"last.hasPassed()\"> {{last.passed}} {{ 'campaigns.execution.last.ok' | translate }} </span>\n                    <span *ngIf=\"last.hasFailure()\"> {{last.failed}} {{ 'campaigns.execution.last.ko' | translate }} </span>\n                </div>\n            </div>\n        </div>\n\n        <h2>{{ 'campaigns.execution.history.title' | translate }}</h2>\n        <div *ngIf=\"campaign && campaign.campaignExecutionReports\" class=\"reports\">\n            <div class=\"row tile tile-click\" *ngFor=\"let report of campaign.campaignExecutionReports\"\n                 (click)=\"selectReport(report)\"\n                 [ngClass]=\"{\n                    'tile-ok': report.status == 'SUCCESS',\n                    'tile-ko': report.status == 'FAILURE',\n                    'tile-stop': report.status == 'STOPPED',\n                    'tile-selected': report.executionId == currentCampaignExecutionReport?.executionId,\n                    'tile-running': report.status == 'RUNNING'}\">\n\n                <div class=\"col col-lg-3 title\">\n                    <i class=\"fa fa-circle\" aria-hidden=\"true\"\n                       [ngClass]=\"{\n                        'circle-ok': report.status == 'SUCCESS',\n                        'circle-ko': report.status == 'FAILURE',\n                        'circle-stop': report.status == 'STOPPED',\n                        'circle-running': report.status == 'RUNNING'}\"><span\n                        class=\"execution-id\">#{{report.executionId}}</span></i>\n                </div>\n                <div class=\"col-lg-9 time\">\n                    <span *ngIf=\"report.partialExecution\" class=\"fa fa-sync float-end\"></span>\n                    <em *ngIf=\"!isOlderThan(report.startDate, 4)\">{{report.startDate | amCalendar:{sameDay: '['.concat('scenarios.execution.history.time' | translate).concat('] h:mm')} }}</em>\n                    <em *ngIf=\"isOlderThan(report.startDate, 4)\">{{report.startDate | amDateFormat: 'DD MMM. YYYY HH:mm' }}</em>\n                    <div><em>({{ 'global.time.in' | translate }} {{report.duration | amDuration:'ms' }})</em></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"col-md-10 ps-4\" *ngIf=\"currentCampaignExecutionReport\">\n        <div *ngIf=\"current.hasFailure() || current.hasStopped()\">\n            <div class=\"d-inline-block mb-2\">\n                <button *hasAuthorization=\"[Authorization.CAMPAIGN_EXECUTE]\"\n                        id=\"replay-btn\" type=\"button\" class=\"btn btn-sm btn-success\"\n                        title=\"{{ 'campaigns.execution.replay' | translate }}\"\n                        [disabled]=\"running || (scenarios && scenarios.length == 0)\"\n                        (click)=\"replayFailed()\">\n                    <span class=\"fa fa-play me-2\" aria-hidden=\"true\"></span>\n                    <span class=\"btn-label\">{{ 'global.actions.replay' | translate }}</span>\n                </button>\n            </div>\n        </div>\n\n        <span class=\"m-2\">\n            {{'campaigns.execution.name' | translate}} <strong>#{{currentCampaignExecutionReport.executionId}}</strong>\n            {{'campaigns.execution.on_env' | translate}} <strong>{{currentCampaignExecutionReport.executionEnvironment}}</strong>\n            {{currentCampaignExecutionReport.user == '' ? '' : 'global.smallword.by' | translate }} <strong>{{currentCampaignExecutionReport.user}}</strong>\n        </span>\n        <chutney-execution-badge [status]=\"currentCampaignExecutionReport.status\"\n                                [spin]=\"true\"></chutney-execution-badge>\n        <br/>\n        <span *ngIf=\"current.hasPassed()\"> {{current.passed}} {{ 'campaigns.execution.last.ok' | translate }},</span>\n        <span *ngIf=\"current.hasFailure()\"> {{current.failed}} {{ 'campaigns.execution.last.ko' | translate }},</span>\n        <span *ngIf=\"current.hasStopped()\"> {{current.stopped}} {{ 'campaigns.execution.last.stop' | translate }},</span>\n        <span *ngIf=\"current.hasNotExecuted()\"> {{current.notexecuted}} {{ 'campaigns.execution.last.notexecuted' | translate }}</span>\n        <span> {{ 'global.smallword.of' | translate }} {{current.total}}</span>\n\n        <small class=\"text-muted ms-2\">{{ 'global.time.in' | translate }}\n            {{currentCampaignExecutionReport.duration | duration}}</small>\n        <small class=\"text-muted ms-2\">\n            {{ 'global.time.at' | translate }}\n            {{currentCampaignExecutionReport.startDate  | amDateFormat: 'DD MMM. YYYY HH:mm' }}\n        </small>\n        <div class=\"table-responsive\">\n            <table class=\"table table-sm table-striped table-hover\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\" class=\"filter w5\" (click)=\"sortCurrentBy('scenarioId')\">{{ 'campaigns.execution.scenarios.item.header.id' | translate }}\n                            <span *ngIf=\"orderBy == 'scenarioId' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                            <span *ngIf=\"orderBy == 'scenarioId' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                        </th>\n                        <th scope=\"col\" class=\"filter w5\" (click)=\"sortCurrentBy('status')\">{{ 'campaigns.execution.scenarios.item.header.state' | translate }}\n                            <span *ngIf=\"orderBy == 'status' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                            <span *ngIf=\"orderBy == 'status' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                        </th>\n                        <th scope=\"col\" class=\"filter w55\" (click)=\"sortCurrentBy('scenarioName')\">{{ 'campaigns.execution.scenarios.item.header.title' | translate }}\n                            <span *ngIf=\"orderBy == 'scenarioName' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                            <span *ngIf=\"orderBy == 'scenarioName' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                        </th>\n                        <th scope=\"col\" class=\"filter w10\" (click)=\"sortCurrentBy('duration')\">{{ 'campaigns.execution.scenarios.item.header.duration' | translate }}\n                            <span *ngIf=\"orderBy == 'duration' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                            <span *ngIf=\"orderBy == 'duration' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                        </th>\n                        <th *ngIf=\"testExecutionId\" scope=\"col\" class=\"w5\" ></th>\n                        <th *ngIf=\"testExecutionId\" scope=\"col\" class=\"w20\" >{{ 'campaigns.execution.scenarios.item.header.jiraStatus' | translate }}</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let scenarioReportOutline of currentScenariosReportsOutlines\">\n                        <td>\n                            <span class=\"fw-bold small_text\">{{scenarioReportOutline.scenarioId}}</span>\n                        </td>\n                        <td>\n                            <chutney-execution-badge [status]=\"scenarioReportOutline.status\"\n                                                [spin]=\"true\" [title]=\"scenarioReportOutline.error\"></chutney-execution-badge>\n                        </td>\n                        <td>\n                            <ng-container *hasAuthorization=\"[Authorization.SCENARIO_READ]\">\n                                <a class=\"table-link\"\n                                   [routerLink]=\"['/scenario', scenarioReportOutline.scenarioId, 'execution', scenarioReportOutline.executionId != -1 ? scenarioReportOutline.executionId : 'last']\"\n                                    title=\"{{ 'campaigns.execution.scenarios.item.executions.link' | translate }} {{scenarioReportOutline.scenarioName}}\">\n                                    {{scenarioReportOutline.scenarioName}}\n                                </a>\n                            </ng-container>\n                            <ng-container *hasAuthorization=\"{not: true, authorizations: [Authorization.SCENARIO_READ]}\">\n                                {{scenarioReportOutline.scenarioName}}\n                            </ng-container>\n                        </td>\n                        <td>\n                            <span class=\" small_text\">{{scenarioReportOutline.duration | duration:'short' }}</span>\n                        </td>\n                        <td *ngIf=\"testExecutionId && getJiraLink(scenarioReportOutline.scenarioId) !== null\">\n                            <a role=\"button\" class=\"btn btn-sm btn-link m-0\"\n                                target=\"_blank\" href=\"{{getJiraLink(scenarioReportOutline.scenarioId)}}\"\n                                ngbPopover=\"{{getJiraLink(scenarioReportOutline.scenarioId)}}\" placement=\"left\" (click)=\"$event.stopPropagation()\"\n                                triggers=\"mouseenter:mouseleave\">\n                                <span class=\"fab fa-jira\" aria-hidden=\"true\">\n                                </span>\n                            </a>\n                        </td>\n                        <td *ngIf=\"testExecutionId && getJiraLink(scenarioReportOutline.scenarioId) !== null\">\n                            <chutney-delete-confirm-dialog class=\"me-2 mt-1\"\n                                [dialogMessage]=\"('campaigns.execution.update.jira' | translate)\"\n                                [label]=null\n                                [title]=\"('global.actions.update' | translate)\"\n                                [disabled]=\"selectedStatusByScenarioId.get(scenarioReportOutline.scenarioId) !=='PASS' && selectedStatusByScenarioId.get(scenarioReportOutline.scenarioId) !=='FAIL' \"\n                                [btnSizeClass]=\"'sm'\"\n                                [btnClassIcon]=\"'fa-pencil-alt'\"\n                                [btnColor]=\"'primary'\"\n                                (deleteEvent)=\"updateStatus(scenarioReportOutline.scenarioId)\">\n                            </chutney-delete-confirm-dialog>\n                            <select class=\"custom-select small_text mt-1\" (change)=\"selectedUpdateStatus(scenarioReportOutline.scenarioId, $event)\" style=\"width: 120px;font-size: 0.5em;\"  >\n                                <option *ngFor=\"let enum of xrayStatuses()\" [selected]=\"scenarioStatus(scenarioReportOutline.scenarioId) === enum\">{{ enum }}</option>\n                                <option [selected]=\"scenarioStatus(scenarioReportOutline.scenarioId) === UNSUPPORTED\">{{UNSUPPORTED}}</option>\n                            </select>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class=\"col-md-7  ps-4\" *ngIf=\"!currentCampaignExecutionReport\">\n        <span class=\"fw-bold\">{{ 'campaigns.execution.scenarios.title' | translate }} </span>({{ scenarios.length }})\n        <div class=\"table-responsive\">\n            <table class=\"table table-sm table-striped table-hover\">\n                <thead>\n                <tr>\n                    <th scope=\"col\" class=\"w1\">&nbsp;</th>\n                    <th scope=\"col\" class=\"filter w70\" (click)=\"sortLastBy('title')\">{{ 'campaigns.execution.scenarios.header.title' | translate }}\n                        <span *ngIf=\"orderBy == 'title' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                        <span *ngIf=\"orderBy == 'title' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                    </th>\n                    <th scope=\"col\" class=\"filter w15\" (click)=\"sortLastBy('tags')\">{{ 'campaigns.execution.scenarios.header.tags' | translate }}\n                        <span *ngIf=\"orderBy == 'tags' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                        <span *ngIf=\"orderBy == 'tags' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                    </th>\n                    <th scope=\"col\" class=\"filter w14\" (click)=\"sortLastBy('creationDate')\">{{ 'campaigns.execution.scenarios.header.creation' | translate }}\n                        <span *ngIf=\"orderBy == 'creationDate' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                        <span *ngIf=\"orderBy == 'creationDate' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let scenario of orderedScenarios\"\n                    [routerLink]=\"hasAuthorization([Authorization.SCENARIO_READ]) ? ['/scenario', scenario.id, 'execution', 'last'] : null\"\n                    [ngClass]=\"hasAuthorization([Authorization.SCENARIO_READ]) ? 'pointer' : ''\">\n                    <td>\n                        <span class=\"fa\" [ngClass]=\"scenario.isComposed ? 'fa-cubes' : 'fa-pencil-alt'\"></span>\n                    </td>\n                    <td>\n                        <ng-container *hasAuthorization=\"[Authorization.SCENARIO_READ]\">\n                            <a class=\"table-link\" [routerLink]=\"['/scenario', scenario.id,'execution', 'last']\"\n                               title=\"{{ 'campaigns.execution.scenarios.item.title' | translate }} {{scenario.title}}\">{{scenario.title}}</a>\n                        </ng-container>\n                        <ng-container *hasAuthorization=\"{not: true, authorizations: [Authorization.SCENARIO_READ]}\">\n                            {{scenario.title}}\n                        </ng-container>\n                    </td>\n                    <td>\n                        <span *ngFor=\"let tag of scenario.tags\">\n                            <span class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                        </span>\n                    </td>\n                    <td scope=\"row\">\n                        {{ scenario.creationDate | amLocale:'fr' | amTimeAgo }}\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <div *ngIf=\"scenarios && scenarios.length == 0\" class=\"alert alert-dark col-md-12 not-found text-muted\">\n            <span>{{ 'campaigns.execution.scenarios.empty' | translate }}</span>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "CampaignListComponent",
            "id": "component-CampaignListComponent-c03c38d71c58bc13d3c65d7a21346bc89fba23d088803ba902d0d85313a62a4a24bdf3fd3db68bd3d8369edc5b2e9355a794c2996c76c712411805227954bdc5",
            "file": "src/app/modules/campaign/components/campaign-list/campaign-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-campaigns",
            "styleUrls": [
                "./campaign-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./campaign-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "campaignFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "campaignFilterAttributes",
                    "defaultValue": "['title', 'description', 'id']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "campaigns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Campaign>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "deletionConfirmationTextPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "deletionConfirmationTextSuffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isScheduled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "jiraMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "jiraUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "lastCampaignReports",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CampaignExecutionReport>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lastCampaignReportsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "scheduledCampaigns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CampaignScheduling>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tagFilter",
                    "defaultValue": "new SelectableTags<String>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "viewedCampaigns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Campaign>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "applyDefaultState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applySavedState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "campaignFilterChange",
                    "args": [
                        {
                            "name": "campaignFilter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignFilter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "campaignIdFromName",
                    "args": [
                        {
                            "name": "campaignName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaignName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCampaign",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCampaign",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOnAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findAllTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findLastCampaignReports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getIndexFromId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initJiraPlugin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFrequencyCampaign",
                    "args": [
                        {
                            "name": "scheduledCampaign",
                            "type": "CampaignScheduling",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scheduledCampaign",
                            "type": "CampaignScheduling",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSchedulingCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noTagPresent",
                    "args": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "noTag",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeJiraLink",
                    "args": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "campaignId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaign",
                            "type": "Campaign",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNoTagFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTagFilter",
                    "args": [
                        {
                            "name": "tag",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeLastCampaignReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateTextFilter",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { Subscription, timer } from 'rxjs';\n\nimport { Campaign, CampaignExecutionReport, SelectableTags, CampaignScheduling, Authorization } from '@model';\nimport { CampaignService, JiraPluginConfigurationService, JiraPluginService, CampaignSchedulingService } from '@core/services';\nimport { StateService } from '@shared/state/state.service';\nimport { distinct, filterOnTextContent, flatMap, intersection } from '@shared/tools/array-utils';\nimport { FREQUENCY } from '@core/model/campaign/FREQUENCY';\n\n@Component({\n    selector: 'chutney-campaigns',\n    templateUrl: './campaign-list.component.html',\n    styleUrls: ['./campaign-list.component.scss']\n})\nexport class CampaignListComponent implements OnInit, OnDestroy {\n\n    deletionConfirmationTextPrefix: string;\n    deletionConfirmationTextSuffix: string;\n\n    campaigns: Array<Campaign> = [];\n    lastCampaignReports: Array<CampaignExecutionReport> = [];\n    lastCampaignReportsSub: Subscription;\n    jiraMap: Map<string, string> = new Map();\n    jiraUrl = '';\n    isScheduled: Boolean;\n    // Filter\n    campaignFilterAttributes = ['title', 'description', 'id'];\n    campaignFilter: string;\n    viewedCampaigns: Array<Campaign> = [];\n    tagFilter = new SelectableTags<String>();\n\n    scheduledCampaigns: Array<CampaignScheduling> = [];\n\n    Authorization = Authorization;\n\n    constructor(private campaignService: CampaignService,\n                private jiraLinkService: JiraPluginService,\n                private jiraPluginConfigurationService: JiraPluginConfigurationService,\n                private router: Router,\n                private translate: TranslateService,\n                private stateService: StateService,\n                private campaignSchedulingService: CampaignSchedulingService\n    ) {\n        translate.get('campaigns.confirm.deletion.prefix').subscribe((res: string) => {\n            this.deletionConfirmationTextPrefix = res;\n        });\n        translate.get('campaigns.confirm.deletion.suffix').subscribe((res: string) => {\n            this.deletionConfirmationTextSuffix = res;\n        });\n    }\n\n    ngOnInit() {\n        this.loadAll();\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribeLastCampaignReport();\n    }\n\n    loadAll() {\n        this.initJiraPlugin();\n        this.campaignService.findAllCampaigns().subscribe(\n            (res) => {\n                this.campaigns = res;\n                this.applyDefaultState();\n                this.applySavedState();\n                this.applyFilters();\n            },\n            (error) => console.log(error)\n        );\n\n        this.findLastCampaignReports();\n\n        this.loadSchedulingCampaign();\n    }\n\n    createCampaign() {\n        const url = '/campaign/edition';\n        this.router.navigateByUrl(url);\n    }\n\n    editCampaign(campaign: Campaign) {\n        const url = '/campaign/' + campaign.id + '/edition';\n        this.router.navigateByUrl(url);\n    }\n\n    deleteCampaign(id: number, title: string) {\n        if (confirm(this.deletionConfirmationTextPrefix + title + this.deletionConfirmationTextSuffix)) {\n            this.campaignService.delete(id).subscribe(\n                () => {\n                    this.removeJiraLink(id);\n                    this.campaigns.splice(this.getIndexFromId(id), 1);\n                    this.campaigns = this.campaigns.slice();\n                    this.applyFilters();\n                });\n        }\n    }\n\n    // Filtering //\n    updateTextFilter(text: string) {\n        this.campaignFilter = text;\n        this.applyFilters();\n    }\n\n    selectAll() {\n        this.tagFilter.selectAll();\n        this.stateService.changeCampaignTags(this.tagFilter.selected());\n        this.stateService.changeCampaignNoTag(this.tagFilter.setNoTag(true));\n        this.applyFilters();\n    }\n\n    isSelectAll() {\n        return this.tagFilter.isSelectAll();\n    }\n\n    deselectAll() {\n        this.tagFilter.deselectAll();\n        this.stateService.changeCampaignNoTag(false);\n        this.applyFilters();\n    }\n\n    campaignFilterChange(campaignFilter: string) {\n        this.campaignFilter = campaignFilter;\n        this.applyFilters();\n    }\n\n    toggleNoTagFilter() {\n        this.tagFilter.toggleNoTag();\n        this.stateService.changeCampaignNoTag(this.tagFilter.isNoTagSelected());\n        this.applyFilters();\n    }\n\n    toggleTagFilter(tag: String) {\n        this.tagFilter.toggleSelect(tag);\n        this.stateService.changeCampaignTags(this.tagFilter.selected());\n        this.applyFilters();\n    }\n\n    applyFilters() {\n        this.viewedCampaigns = filterOnTextContent(this.campaigns, this.campaignFilter, this.campaignFilterAttributes);\n        this.viewedCampaigns = this.filterOnAttributes();\n    }\n\n    private applyDefaultState() {\n        this.viewedCampaigns = this.campaigns;\n        this.tagFilter.initialize(this.findAllTags());\n    }\n\n    private findAllTags() {\n        return distinct(flatMap(this.campaigns, (campaign) => campaign.tags)).sort();\n    }\n\n    private applySavedState() {\n        this.setSelectedTags();\n    }\n\n\n    private setSelectedTags() {\n        const savedTags = this.stateService.getCampaignTags();\n        if (savedTags != null) {\n            this.tagFilter.selectTags(savedTags);\n        }\n\n        const noTag = this.stateService.getCampaignNoTag();\n        if (noTag != null) {\n            this.tagFilter.setNoTag(noTag);\n        }\n    }\n\n    private filterOnAttributes() {\n        const input = this.viewedCampaigns;\n        if (this.tagFilter.isSelectAll()) {\n            return input;\n        }\n\n        const tags = this.tagFilter.selected();\n        const noTag = this.tagFilter.isNoTagSelected();\n\n        return input.filter((campaign: Campaign) => {\n            return (this.tagPresent(tags, campaign)\n                    || this.noTagPresent(noTag, campaign));\n            });\n    }\n\n    private tagPresent(tags: String[], campaign: Campaign): boolean {\n        return intersection(tags, campaign.tags).length > 0;\n    }\n\n    private noTagPresent(noTag: boolean, campaign: Campaign): boolean {\n        return noTag && campaign.tags.length === 0;\n    }\n\n    // Jira link //\n\n    initJiraPlugin() {\n        this.jiraPluginConfigurationService.getUrl()\n            .subscribe((r) => {\n                if (r !== '') {\n                    this.jiraUrl = r;\n                    this.jiraLinkService.findCampaigns()\n                        .subscribe(\n                            (result) => {\n                                this.jiraMap = result;\n                            }\n                        );\n                }\n            });\n    }\n\n    getJiraLink(id: string) {\n        return this.jiraUrl + '/browse/' + this.jiraMap.get(id);\n    }\n\n    private getIndexFromId(id: number): number {\n        return this.campaigns.findIndex((campaign: Campaign) => campaign.id === id);\n    }\n\n    private findLastCampaignReports() {\n        this.campaignService.findLastCampaignReports().subscribe(\n            (lastCampaignReports) => {\n                this.lastCampaignReports = lastCampaignReports;\n                if (CampaignService.existRunningCampaignReport(lastCampaignReports)) {\n                    this.unsubscribeLastCampaignReport();\n                    this.lastCampaignReportsSub = timer(5000).subscribe(() => this.findLastCampaignReports());\n                }\n            },\n            (error) => console.log(error)\n        );\n    }\n\n    private unsubscribeLastCampaignReport() {\n        if (this.lastCampaignReportsSub) {\n            this.lastCampaignReportsSub.unsubscribe();\n        }\n    }\n\n    private removeJiraLink(campaignId: number) {\n        this.jiraLinkService.removeForCampaign(campaignId).subscribe(\n            () => {\n            },\n            (error) => console.log(error)\n        );\n    }\n\n    private loadSchedulingCampaign() {\n        this.campaignSchedulingService.findAll().subscribe(\n            (res) => {\n                this.scheduledCampaigns = res;\n            },\n            (error) => {\n                console.log(error);\n            });\n    }\n\n    isFrequencyCampaign(scheduledCampaign: CampaignScheduling) {\n        return Object.values(FREQUENCY).includes(scheduledCampaign.frequency);\n    }\n\n    campaignIdFromName(campaignName: string) {\n        return this.campaigns.filter((c) => c.title === campaignName)\n            .map((c) => c.id)[0];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.small_text {\n    font-size:0.8em;\n}\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .popover-arrow {\n            &::after {\n                border-left-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n        padding: 0.5rem;\n    }\n}\n",
                    "styleUrl": "./campaign-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "campaignSchedulingService",
                        "type": "CampaignSchedulingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignSchedulingService",
                        "type": "CampaignSchedulingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row ms-4\">\n    <div class=\"col-md-6\">\n        <button *hasAuthorization=\"[Authorization.CAMPAIGN_WRITE]\"\n                type=\"button\"\n                class=\"btn btn-sm btn-outline-secondary\"\n                (click)=\"createCampaign()\"\n        >\n            <span class=\"fa fa-plus\" aria-hidden=\"true\"></span> {{ 'campaigns.list.actions.create' | translate }}\n        </button>\n        <button *hasAuthorization=\"[Authorization.CAMPAIGN_EXECUTE]\"\n                type=\"button\"\n                class=\"btn btn-sm btn-outline-secondary ms-2\"\n                [routerLink]=\"['scheduling']\"\n        >\n            <span class=\"fa fa-plus\" aria-hidden=\"true\"></span> {{ 'campaigns.scheduling.schedule' | translate }}\n        </button>\n    </div>\n</div>\n<div class=\"row ms-4\">\n    <div class=\"col-md-6 pe-2\">\n        <div class=\"input-group mb-3\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"{{ 'campaigns.search.placeholder' | translate }}\"\n                   [ngModel]=\"campaignFilter\" (ngModelChange)=\"campaignFilterChange($event)\">\n        </div>\n        <div class=\"row ms-2\">\n            <div class=\"w-auto\" style=\"min-width: 170px;\">\n                <button *ngIf=\" !isSelectAll()\" type=\"button\" class=\"btn btn-xs btn-default m-2\" (click)=\"selectAll()\">\n                    <span class=\"fa fa-check\"></span> {{ 'campaigns.search.selectAllText' | translate }}\n                </button>\n                <button *ngIf=\"isSelectAll()\" type=\"button\" class=\"btn btn-xs btn-default m-2\" (click)=\"deselectAll()\">\n                    <span class=\"fa fa-times\"></span> {{ 'campaigns.search.deselectAllText' | translate }}\n                </button>\n            </div>\n            <div class=\"d-flex flex-wrap w-auto\">\n                <div class=\"border-end border-dark ms-2 me-2\"></div>\n                <div class=\"align-self-center\">\n                    <button class=\"chutney-tag\"\n                            [ngClass]=\"tagFilter.isNoTagSelected() ? 'chutney-tag-selected' : 'chutney-tag-unselected'\"\n                            (click)=\"toggleNoTagFilter()\">\n                        NO_TAG\n                    </button>\n                </div>\n                <div class=\"border-end border-dark ms-2 me-2\"></div>\n                <div *ngFor=\"let tag of tagFilter.all()\" class=\"align-self-center\">\n                    <button\n                        [ngClass]=\"tagFilter.isSelected(tag)? 'chutney-tag chutney-tag-selected' : 'chutney-tag chutney-tag-unselected'\"\n                        (click)=\"toggleTagFilter(tag)\">\n                        {{tag}}\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"table-responsive\" *ngIf=\"viewedCampaigns.length > 0\">\n            <table class=\"table table-sm table-striped table-hover\">\n                <tbody>\n                <tr *ngFor=\"let campaign of (viewedCampaigns | searchTextPipe : campaignFilter:campaignFilterAttributes)\">\n                    <td class=\"small_text w93 align-middle\">\n                        <a [routerLink]=\"['/campaign',campaign.id,'execution']\"\n                           title=\"{{ 'campaigns.list.item.title.link.title' | translate }} {{campaign.title}}\">{{campaign.title}}</a>\n                    </td>\n                    <td class=\"ps-0 w1\">\n                        <a *ngIf=\"jiraMap.has(campaign.id.toString())\" role=\"button\" class=\"btn btn-sm btn-link me-0\"\n                           target=\"_blank\" href=\"{{getJiraLink(campaign.id.toString())}}\"\n                           ngbPopover=\"{{jiraMap.get(campaign.id.toString())}}\" placement=\"left\"\n                           (click)=\"$event.stopPropagation()\"\n                           triggers=\"mouseenter:mouseleave\">\n                            <span class=\"fab fa-jira\" aria-hidden=\"true\">\n                            </span>\n                        </a>\n                    </td>\n                    <td class=\"ps-0 w1\">\n                        <span *ngIf=\"campaign.tags.length <= 3\">\n                            <span *ngFor=\"let tag of campaign.tags\"\n                                  class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                        </span>\n                        <span *ngIf=\"campaign.tags.length > 3\">\n                            <span *ngFor=\"let tag of campaign.tags | slice:0:2\"\n                                  class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                            <button type=\"button\" class=\"chutney-tag chutney-tag-selected\"\n                                    ngbPopover=\"{{campaign.tags}}\" placement=\"left\"\n                                    triggers=\"mouseenter:mouseleave\" container=\"body\">\n                                ...\n                            </button>\n                        </span>\n                    </td>\n                    <td class=\"ps-0 w1\">\n                        <button type=\"button\" class=\"btn btn-link me-0\"\n                                ngbPopover=\"{{campaign.description}}\" placement=\"left\"\n                                triggers=\"mouseenter:mouseleave\">\n                            <span class=\"fa fa-info-circle\" aria-hidden=\"true\"></span>\n                        </button>\n                    </td>\n                    <td class=\"ps-0 w2\" *hasAuthorization=\"[Authorization.CAMPAIGN_WRITE]\">\n                        <button type=\"button\" class=\"btn btn-light\" (click)=\"editCampaign(campaign)\">\n                            <span class=\"fa fa-pencil-alt\"></span>\n                        </button>\n                    </td>\n                    <td class=\"ps-0 w2\" *hasAuthorization=\"[Authorization.CAMPAIGN_WRITE]\">\n                        <button type=\"button\" class=\"btn btn-outline-danger\"\n                                (click)=\"deleteCampaign(campaign.id, campaign.title)\">\n                            <span class=\"fa fa-trash\"></span>\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n        <div *ngIf=\"campaigns.length == 0\" class=\"alert alert-dark col-md-12 not-found text-muted\">\n            <span>{{ 'campaigns.list.empty' | translate }}</span>\n        </div>\n    </div>\n    <div class=\"col-md-6 ps-2\">\n        <h2 *ngIf=\"scheduledCampaigns.length > 0\">{{ 'campaigns.list.executions.next' | translate }}</h2>\n        <div class=\"table-responsive\" *ngIf=\"scheduledCampaigns.length > 0\">\n            <table class=\"table table-sm table-striped\">\n                <tbody>\n                <tr *ngFor=\"let scheduledCampaign of scheduledCampaigns\">\n                    <td class=\"w80\">#{{scheduledCampaign.campaignId}}\n                        <span data-toggle=\"tooltip\" *ngIf=\"isFrequencyCampaign(scheduledCampaign)\"\n                              title=\"{{scheduledCampaign.frequency.toLowerCase()}}\"\n                              class=\"fa fa-spinner fa-spin running\"\n                              [ngStyle]=\"{\n                                'color':scheduledCampaign.frequency=== 'Daily'? 'green':\n                                scheduledCampaign.frequency==='Weekly'? 'orange':\n                                scheduledCampaign.frequency==='Monthly'? 'red': 'blue'\n                                }\"\n                              aria-hidden=\"true\"></span>\n                        - {{scheduledCampaign.campaignTitle}}\n                    </td>\n                    <td>{{scheduledCampaign.schedulingDate | amLocal | amDateFormat: 'YYYY-MM-DD HH:mm'}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n        <h2>{{ 'campaigns.list.executions.last' | translate }}</h2>\n        <div class=\"table-responsive\" *ngIf=\"campaigns.length > 0\">\n            <table class=\"table table-sm table-striped\">\n                <tbody>\n                <tr *ngFor=\"let report of lastCampaignReports\" class=\"small_text\">\n                    <td class=\"w25\">{{ report.startDate | amDateFormat: 'DD MMM. YYYY HH:mm' }}</td>\n                    <td class=\"ps-0 w60\">\n                        <a class=\"table-link\"\n                           [routerLink]=\"['/campaign', campaignIdFromName(report.campaignName), 'execution', report.executionId]\"\n                        >\n                            {{ report.campaignName }}\n                        </a>\n                    </td>\n                    <td class=\"ps-0 w5\">\n                        <chutney-execution-badge [status]=\"report.status\" [spin]=\"true\"></chutney-execution-badge>\n                    </td>\n                    <td class=\"text-center ps-0 w10\">{{ report.duration | duration:'short'}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "CampaignSchedulingComponent",
            "id": "component-CampaignSchedulingComponent-600905b857f02cb56f0f207a0708442b58c05cbe4aa18a96167615e1308a3fb7e0d37f5b5d4ed4aba0500ea62057ea40a0543ee149690e87014adfc12075308a",
            "file": "src/app/modules/campaign/components/campaign-scheduling/campaign-scheduling.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-campaign-scheduling",
            "styleUrls": [
                "./campaign-scheduling.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./campaign-scheduling.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "campaigns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Campaign>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "frequencies",
                    "defaultValue": "Object.values(FREQUENCY)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbDateStruct",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "scheduledCampaigns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CampaignScheduling>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "submitted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSchedulingCampaign",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Campaign } from '@core/model';\nimport { CampaignService } from '@core/services';\nimport { CampaignScheduling } from '@core/model/campaign/campaign-scheduling.model';\nimport { CampaignSchedulingService } from '@core/services/campaign-scheduling.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgbDatepickerConfig, NgbDateStruct, NgbTimepickerConfig } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDate } from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-date';\nimport { NgbTime } from '@ng-bootstrap/ng-bootstrap/timepicker/ngb-time';\nimport { FREQUENCY } from '@core/model/campaign/FREQUENCY';\n\n@Component({\n    selector: 'chutney-campaign-scheduling',\n    templateUrl: './campaign-scheduling.component.html',\n    styleUrls: ['./campaign-scheduling.component.scss']\n})\nexport class CampaignSchedulingComponent implements OnInit {\n\n    scheduledCampaigns: Array<CampaignScheduling> = [];\n    form: FormGroup;\n    errorMessage: string;\n    submitted: boolean;\n    frequencies = Object.values(FREQUENCY);\n    campaigns: Array<Campaign> = [];\n\n    model: NgbDateStruct;\n\n    constructor(private campaignSchedulingService: CampaignSchedulingService,\n                private campaignService: CampaignService,\n                private formBuilder: FormBuilder,\n                private configTime: NgbTimepickerConfig,\n                private configDate: NgbDatepickerConfig\n    ) {\n        this.configTime.spinners = false;\n        const currentDate = new Date();\n        this.configDate.minDate = {\n            year: currentDate.getFullYear(),\n            month: currentDate.getMonth() + 1,\n            day: currentDate.getDate()\n        };\n        this.configDate.maxDate = {year: currentDate.getFullYear() + 1, month: 12, day: 31};\n    }\n\n    ngOnInit() {\n        this.campaignService.findAllCampaigns().subscribe(\n            (res) => {\n                this.campaigns = res;\n            },\n            (error) => {\n                this.errorMessage = 'Cannot get campaign list - ' + error;\n            });\n\n        this.loadSchedulingCampaign();\n\n\n        this.form = this.formBuilder.group({\n            campaign: [null, Validators.required],\n            date: [null, Validators.required],\n            time: [null, Validators.required],\n            frequency: [null]\n        });\n    }\n\n    create() {\n        this.submitted = true;\n        const formValue = this.form.value;\n        if (this.form.invalid) {\n            return;\n        }\n\n        const date: NgbDate = formValue['date'];\n        const time: NgbTime = formValue['time'];\n        const campaign: Campaign = this.form.get('campaign').value;\n        const dateTime = new Date(date.year, date.month - 1, date.day, time.hour, time.minute, 0, 0);\n        dateTime.setHours(time.hour - dateTime.getTimezoneOffset() / 60);\n        const frequency: FREQUENCY = formValue['frequency'];\n        const schedulingCampaign = new CampaignScheduling(\n            campaign.id,\n            campaign.title,\n            dateTime, frequency\n        );\n\n        this.campaignSchedulingService.create(schedulingCampaign).subscribe(() => {\n                this.loadSchedulingCampaign();\n            },\n            (error) => {\n                this.errorMessage = 'Cannot create - ' + error;\n            });\n\n        this.submitted = false;\n\n    }\n\n    delete(id: number) {\n        this.campaignSchedulingService.delete(id).subscribe(\n            () => {\n                this.loadSchedulingCampaign();\n            },\n            (error) => {\n                this.errorMessage = 'Cannot delete - ' + error;\n            });\n    }\n\n\n    private loadSchedulingCampaign() {\n        this.campaignSchedulingService.findAll().subscribe(\n            (res) => {\n                this.scheduledCampaigns = res;\n            },\n            (error) => {\n                this.errorMessage = 'Cannot get scheduled campaigns - ' + error;\n            });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() {\n        return this.form.controls;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.error-message{\n    color:$labelko;\n    font-size: 0.8em;\n}\n",
                    "styleUrl": "./campaign-scheduling.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignSchedulingService",
                        "type": "CampaignSchedulingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configTime",
                        "type": "NgbTimepickerConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configDate",
                        "type": "NgbDatepickerConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "campaignSchedulingService",
                        "type": "CampaignSchedulingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configTime",
                        "type": "NgbTimepickerConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configDate",
                        "type": "NgbDatepickerConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 116
                    }
                }
            },
            "templateData": "<button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-5 float-end\" [routerLink]=\"['/campaign']\">\n    <span class=\"fa fa-arrow-left\" aria-hidden=\"true\"></span> {{ 'campaigns.scheduling.back' | translate }}\n</button>\n<div class=\"row ms-5\">\n    <div class=\"w-100\" *ngIf=\"errorMessage\">\n        <p class=\"text-danger\">{{ errorMessage}}</p>\n    </div>\n    <form [formGroup]=\"form\" autocomplete=\"off\" class=\"col-md-12 ps-0\">\n        <label>{{ 'campaigns.scheduling.title' | translate }}</label>\n        <div class=\"form-group row\">\n            <div class=\"col-md-6 m-0 p-0\" *ngIf=\"campaigns.length > 0\">\n                <select id=\"campaign\" class=\"form-select\" formControlName=\"campaign\">\n                    <option *ngFor=\"let c of campaigns\" [ngValue]=\"c\">{{c.title}}</option>\n                </select>\n\n                <div class=\"error-message\" *ngIf=\"submitted && f.campaign.errors?.required\">\n                    {{ 'campaigns.scheduling.required.campaign' | translate }}\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <div class=\"col-sm-2  m-0 p-0\">\n                <div class=\"input-group\">\n                    <input class=\"form-control\" placeholder=\"yyyy-mm-dd\"\n                           name=\"dp\" formControlName=\"date\" ngbDatepicker #d=\"ngbDatepicker\">\n                    <button class=\"btn btn-outline-secondary far fa-calendar-alt\" (click)=\"d.toggle()\"\n                            type=\"button\"></button>\n                </div>\n\n                <div class=\"error-message\" *ngIf=\"submitted && f['date'].errors['required']\">\n                    {{ 'campaigns.scheduling.required.date' | translate }}\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <div class=\"col-md-4  m-0 p-0\">\n                <div class=\"input-group\">\n                    <ngb-timepicker formControlName=\"time\"></ngb-timepicker>\n                </div>\n\n                <div class=\"error-message\" *ngIf=\"submitted && f['time'].errors['required']\">\n                    {{ 'campaigns.scheduling.required.time' | translate }}\n                </div>\n            </div>\n        </div>\n\n        <div class=\"form-group row\">\n            <div class=\"col-sm-3 m-0 p-0\">\n                <select id=\"frequency\" class=\"form-select col-8\" formControlName=\"frequency\">\n                    <option *ngFor=\"let freq of frequencies\" [ngValue]=\"freq\">{{freq}}</option>\n                </select>\n            </div>\n        </div>\n\n        <button type=\"submit\" [disabled]=\"submitted && form.invalid\" class=\"btn btn-success m-2\" (click)=\"create()\">\n            <span class=\"fa fa-plus\"></span>&nbsp;\n            <span>{{ 'global.actions.add' | translate }}</span>\n        </button>\n    </form>\n</div>\n<div class=\"row ms-5\">\n    <div class=\"table-responsive\">\n        <table class=\"table table-striped table-hover\">\n            <thead>\n            <tr>\n                <th class=\"w80\"> {{ 'campaigns.scheduling.campaign' | translate }}</th>\n                <th class=\"w15\">{{ 'campaigns.scheduling.schedulingDate' | translate }}</th>\n                <th class=\"w10\">{{ 'campaigns.scheduling.frequency' | translate }}</th>\n                <th class=\"w5\"></th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let scheduledCampaign of scheduledCampaigns\">\n                <td>#{{scheduledCampaign.campaignId}} - {{scheduledCampaign.campaignTitle}}</td>\n\n                <td>{{scheduledCampaign.schedulingDate | amLocal | amDateFormat: 'YYYY-MM-DD HH:mm'}}</td>\n                <td><span\n                    *ngIf=\"scheduledCampaign.frequency !==undefined\">{{scheduledCampaign.frequency}}</span>\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-outline-danger btn-sm float-end\"\n                            (click)=\"delete(scheduledCampaign.id)\">\n                        <span class=\"fa fa-trash\"></span>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n"
        },
        {
            "name": "ChildPanelComponent",
            "id": "component-ChildPanelComponent-b5386a79d3c623cdf6a21d1b0f9232cb30a199dc60a0daff3df58e77beaddf101072aafc0a53ebcfe3381e06b6520cbb98bad4a67a9b06b7fccc55d44433e8e3",
            "file": "src/app/modules/component/components/sub/child-panel/child-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-child-panel-component",
            "styleUrls": [
                "./child-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./child-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ComponentTask",
                    "decorators": []
                },
                {
                    "name": "parents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\nimport { ComponentTask, Authorization } from '@core/model';\n\n\n@Component({\n    selector: 'chutney-child-panel-component',\n    templateUrl: './child-panel.component.html',\n    styleUrls: ['./child-panel.component.scss']\n})\nexport class ChildPanelComponent {\n\n    @Input() parents: any;\n    @Input() componentTask: ComponentTask;\n    @Input() show = false;\n\n    Authorization = Authorization;\n\n    constructor(\n    ) {\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".child-sidebar {\n    width:100%;\n    margin:auto;\n}\n\n.cursor-default {\n    cursor: default;\n}\n",
                    "styleUrl": "./child-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "templateData": "\n<div *ngIf=\"parents?.parentSteps.length > 0 || parents?.parentScenario.length > 0\"\n    class=\"fw-bold mt-3\">\n    <span class=\"cursor-default\" (click)=\"show = !show\">{{'components.shared.edition.existTitle' | translate}}</span>\n    <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n        (click)=\"show = !show\"\n        title=\"{{(!show ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n    <span class=\"fa\" [ngClass]=\"!show ? 'fa-eye' : 'fa-eye-slash'\"></span>\n    </button>\n</div>\n<div *ngIf=\"show\">\n    <ng-container *ngIf=\"parents?.parentSteps.length > 0\">\n        <span class=\"ms-2\">{{'components.shared.edition.existInStep' | translate}}</span>\n        <ul>\n            <li *ngFor=\"let parentStep of parents?.parentSteps\">\n                <a [routerLink]=\"['/component', parentStep.id]\">{{parentStep.name}}</a>\n            </li>\n        </ul>\n    </ng-container>\n    <ng-container *ngIf=\"parents?.parentScenario.length > 0\">\n        <span class=\"ms-2\"> {{'components.shared.edition.existInScenario' | translate}}</span>\n        <ul *ngIf=\"parents?.parentScenario.length > 0\">\n            <li *ngFor=\"let parentScenario of parents?.parentScenario\">\n                <ng-container *hasAuthorization=\"[Authorization.SCENARIO_READ]\">\n                    <a [routerLink]=\"['/scenario', parentScenario.id, 'execution', 'last']\">{{parentScenario.name}}</a>\n                </ng-container>\n                <ng-container *hasAuthorization=\"{not: true, authorizations: [Authorization.SCENARIO_READ]}\">\n                    {{parentScenario.name}}\n                </ng-container>\n            </li>\n        </ul>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "ChutneyEditorComponent",
            "id": "component-ChutneyEditorComponent-3131758c5451df4d3229b118eb312b6d068b53dc9449d8ec42f3173320e825f9a41e35604abd63c4a8546261b26fa8016d2e899e91a54baca39f2a8389a1259a",
            "file": "src/app/shared/components/chutney-editor/chutney-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-editor",
            "styleUrls": [
                "./chutney-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chutney-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onContentChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "aceEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ace.Editor",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "currentTheme",
                    "defaultValue": "this.themes[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "editorHtmlElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editor'"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "themes",
                    "defaultValue": "['twilight', 'tomorrow']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "changeMode",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTheme",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport * as ace from 'ace-builds';\nimport { Ace } from 'ace-builds';\n\n@Component({\n    selector: 'chutney-editor',\n    templateUrl: './chutney-editor.component.html',\n    styleUrls: ['./chutney-editor.component.scss']\n})\nexport class ChutneyEditorComponent implements OnInit, AfterViewInit, OnChanges {\n\n    @Input() content = '';\n    @Input() modes: string[];\n    @Input() mode: string;\n    currentMode: string;\n    @Output() onContentChange = new EventEmitter<string>();\n\n    themes: Array<string> = ['twilight', 'tomorrow'];\n    currentTheme = this.themes[0];\n    options: { theme: string, language: string }\n\n    @ViewChild('editor')\n    private editorHtmlElement: ElementRef<HTMLElement>;\n    private aceEditor: Ace.Editor;\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.aceEditor){\n            this.initEditor();\n        }\n    }\n\n    ngOnInit(): void {\n        if (!this.mode) {\n            this.mode = this.modes[0];\n        }\n        this.currentMode = this.mode;\n    }\n\n    ngAfterViewInit(): void {\n        this.initEditor();\n    }\n\n    changeTheme(event: any) {\n        this.currentTheme = event.target.value;\n        this.aceEditor.setTheme(`ace/theme/${this.currentTheme}`);\n    }\n\n    changeMode(event: any) {\n        this.currentMode = event.target.value;\n        this.aceEditor.session.setMode(`ace/mode/${this.currentMode}`);\n    }\n\n    private initEditor() {\n        ace.config.set('basePath', 'https://unpkg.com/ace-builds@1.4.12/src-noconflict/');\n        this.aceEditor = ace.edit(this.editorHtmlElement.nativeElement);\n        this.aceEditor.session.setValue(this.content ? this.content : '');\n        this.aceEditor.setTheme(`ace/theme/${this.currentTheme}`);\n        this.aceEditor.session.setMode(`ace/mode/${this.mode}`);\n        this.aceEditor.on('change', () => this.onContentChange.emit(this.aceEditor.getValue()))\n    }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".configuration {\n    display: flex;\n    justify-content: flex-end;\n    margin-bottom: 0.2rem;\n    white-space: nowrap;\n    div {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        font-size: 0.7rem;\n        select {\n            font-size: 0.7rem;\n        }\n    }\n\n}\n.ace-editor {\n    font-size: 13pt;\n    width: 100%;\n    height: 100%;\n}\n\n.wrapper, .wrapper-with-error {\n    width: 100%;\n    height: 100%;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: block;\n}\n\n.wrapper-with-error {\n    height: calc(100% - 70px);\n}\n\n\n",
                    "styleUrl": "./chutney-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"configuration\">\n    <div class=\"small me-3\">\n        <label for=\"edition\" class=\"form-control-label m-0 me-2\">{{ 'scenarios.edition.form.content.editor.mode' | translate }}</label>\n        <select class=\"form-select ace-combo\" id=\"edition\" name=\"editorMode\" (change)=\"changeMode($event)\">\n            <option *ngFor=\"let mode of modes\" [value]=\"mode\" [selected]=\"mode === currentMode\">{{mode}}</option>\n        </select>\n    </div>\n    <div class=\"small me-3\">\n        <label for=\"theme\" class=\"form-control-label m-0 me-2\">{{ 'scenarios.edition.form.content.editor.theme' | translate }}</label>\n        <select class=\"form-select\" id=\"theme\" (change)=\"changeTheme($event)\" name=\"editorTheme\">\n            <option *ngFor=\"let theme of themes\" [value]=\"theme\"\n                    [selected]=\"theme === currentTheme\">{{theme}}</option>\n        </select>\n    </div>\n</div>\n<div class=\"ace-editor\" #editor></div>\n"
        },
        {
            "name": "CollapsiblePanelComponent",
            "id": "component-CollapsiblePanelComponent-7617ed23710aed11a753b5ca6c6d79c8cfd691209fc062fb5d5d7d3479ffbd7142e1d1e027814fab9688d9cc0ca85ba40b3b4244459505aa6907b83042b311c2",
            "file": "src/app/molecules/panel/collapsible-panel/collapsible-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-collapsible-panel",
            "styleUrls": [
                "./collapsible-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./collapsible-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'chutney-collapsible-panel',\n  templateUrl: './collapsible-panel.component.html',\n  styleUrls: ['./collapsible-panel.component.scss']\n})\nexport class CollapsiblePanelComponent {\n\n    collapsed = true;\n    @Input() title: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n:host {\n  width: 100%;\n}\n\ndiv.collapsible-title {\n    color: $bleu1;\n    cursor: pointer;\n    overflow: hidden;\n\n    span.fa {\n        font-size: 1.5em;\n    }\n\n    &:after {\n        content:\"\";\n        display: inline-block;\n        width: 100%;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 0.4em;\n        border-top: 1px solid $bleu1;\n        z-index: -1;\n        margin-left: 10px;\n    }\n}\n.collapsible-content {\n    margin-left: 5px;\n    border: 1px solid lightgray;\n    border-top-width: 0;\n    border-right-width: 0;\n    padding: 5px;\n}\n",
                    "styleUrl": "./collapsible-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"collapsible-title\" (click)=\"collapsed = !collapsed\"><span class=\"fa fa-angle-right\"></span> {{title}}</div>\n<div *ngIf=\"!collapsed\" class=\"collapsible-content\">\n    <ng-content ></ng-content>\n</div>\n"
        },
        {
            "name": "ComponentCardComponent",
            "id": "component-ComponentCardComponent-e9e6d7d3e9c734989336c2fba9a193bfe45cdc0a6b9a7d5723069f45569c9c470ffeb82d142f4421a555984c48750c64ae907231acf77d0f68d5b7913e9ef37c",
            "file": "src/app/shared/components/component-card/component-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-component-card",
            "styleUrls": [
                "./component-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ComponentTask",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "cardForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "collapseComponentsParameters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "parametersValueChangeSubscription",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Subscription>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "uid",
                    "defaultValue": "randomIntFromInterval(1, 500)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "cleanParametersSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchCollapseComponentsParameter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { ComponentTask, Authorization } from '@model';\nimport { LoginService } from '@core/services';\nimport { randomIntFromInterval } from '@shared/tools';\n\n@Component({\n    selector: 'chutney-component-card',\n    templateUrl: './component-card.component.html',\n    styleUrls: ['./component-card.component.scss']\n})\nexport class ComponentCardComponent implements OnChanges, OnDestroy {\n\n    @Input() component: ComponentTask;\n    @Output() deleteEvent = new EventEmitter();\n\n    cardForm: FormGroup;\n    uid: number = randomIntFromInterval(1, 500);\n    collapseComponentsParameters = true;\n\n    private parametersValueChangeSubscription: Array<Subscription> = [];\n\n    Authorization = Authorization;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private loginService: LoginService\n    ) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.initForm();\n    }\n\n    ngOnDestroy(): void {\n        this.cleanParametersSubscription();\n    }\n\n    switchCollapseComponentsParameter() {\n        this.collapseComponentsParameters = !this.collapseComponentsParameters;\n        if (!this.collapseComponentsParameters) {\n            this.initForm();\n        } else {\n            this.cleanParametersSubscription();\n        }\n    }\n\n    delete() {\n        this.deleteEvent.emit();\n    }\n\n    private initForm() {\n        this.cardForm = this.formBuilder.group({});\n        if (this.component && this.component.computedParameters) {\n            this.component.computedParameters.forEach((kv, index) => {\n                const ctrl: FormControl = this.formBuilder.control(kv.value);\n                this.cardForm.addControl(kv.key, ctrl);\n                this.parametersValueChangeSubscription.push(\n                    ctrl.valueChanges.pipe(\n                        debounceTime(250)\n                    ).subscribe(v => {\n                        this.component.computedParameters[index].value = v;\n                    })\n                );\n            });\n\n            if (!this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE, Authorization.SCENARIO_WRITE])) {\n                this.cardForm.disable();\n            }\n        }\n    }\n\n    private cleanParametersSubscription() {\n        this.parametersValueChangeSubscription.forEach(s => s.unsubscribe());\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$fontsize: 0.7rem;\n\n.scenario-components-parameters {\n    font-size: $fontsize;\n\n    legend {\n        font-size: $fontsize;\n        width: auto;\n    }\n}\n\n.scenario-components-identifier {\n    font-size: $fontsize;\n}\n\n.param-value-input {\n    font-size: inherit;\n}\n\n.btn-sm {\n    font-size: $fontsize;\n}\n",
                    "styleUrl": "./component-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"component\" id=\"component-{{uid}}\" class=\"card-body pointer p-2\" [formGroup]=\"cardForm\">\n    <div class=\"float-sm-end\">\n        <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE, Authorization.SCENARIO_WRITE]\"\n            type=\"button\" class=\"btn btn-sm btn-outline-danger\"\n            (click)=\"delete()\"\n            title=\"{{'global.actions.delete' | translate}}\">\n            <span class=\"fa fa-trash\"></span>\n        </button>\n    </div>\n    <span class=\"fa\" [ngClass]=\"component.implementation ? 'fa-clone' : 'fa-cubes'\"></span>\n    <span class=\"ms-2\">\n        <ng-container *hasAuthorization=\"[Authorization.COMPONENT_READ]\">\n            <a [routerLink]=\"['/component', component.id]\">{{component.name}}</a>\n        </ng-container>\n        <ng-container *hasAuthorization=\"{ not: true, authorizations: [Authorization.COMPONENT_READ] }\">\n            {{component.name}}\n        </ng-container>\n    </span>\n    <span *ngIf=\"component.implementation?.identifier\"\n          class=\"scenario-components-identifier me-3 font-italic ps-3 float-end fw-bold\">\n        ({{component.implementation.identifier}})\n    </span>\n    <div *ngIf=\"component.computedParameters?.length > 0\" class=\"scenario-components-parameters\">\n        <fieldset class=\"w-100\" [ngClass]=\"collapseComponentsParameters ? 'border-top ps-2' : 'border p-2'\">\n            <legend class=\"px-3 mb-0 fw-bold float-none\" (click)=\"switchCollapseComponentsParameter()\">\n                <span>\n                    {{'components.shared.edition.blocks.parameters' | translate}}\n                </span>\n                <button class=\"btn btn-sm btn-light btn-outline-dark ms-sm-1 border-0\" type=\"button\"\n                        title=\"{{(collapseComponentsParameters ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                    <span class=\"fa\" [ngClass]=\"collapseComponentsParameters ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                </button>\n            </legend>\n            <div *ngIf=\"!collapseComponentsParameters\" class=\"form-group mb-0\">\n                <div class=\"row m-1\" *ngFor=\"let parameter of component.computedParameters; let j=index\">\n                    <label class=\"col-3 col-form-label\" for=\"{{'name' + uid + '_' + j}}\">{{parameter.key}}</label>\n                    <div class=\"col-9\">\n                        <input type=\"text\" class=\"param-value-input form-control\" id=\"{{'name' + uid + '_' + j}}\"\n                               [formControlName]=\"parameter.key\"/>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </div>\n</div>\n"
        },
        {
            "name": "ComponentEditionComponent",
            "id": "component-ComponentEditionComponent-273441bfb804e86bde620033775344eaa42108e629bbe58b943fdeed62f6502ac34a4afcfa6b94cd95cb14257672b24e4a0219dda7c3ec87306d4bf1f23e7647",
            "file": "src/app/modules/scenarios/components/edition/component-edition/component-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-component-edition",
            "styleUrls": [
                "./component-edition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapseParam",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "componentFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "componentForm",
                    "defaultValue": "this.formBuilder.group({\n        parameters: this.formBuilder.array([]),\n        tags: '',\n        jiraId: ''\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "componentRefTasksArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "componentTasksCreated",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "datasetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "jiraId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loadSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "modificationsSaved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "scenarioComponent",
                    "defaultValue": "new ScenarioComponent()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioComponent",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canDeactivatePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                },
                {
                    "name": "initDragAndDrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initFormComponentParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duplicate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duplicate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeComponent",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeParameter",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataset",
                    "args": [
                        {
                            "name": "datasetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchCollapseParam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScenarioParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unloadNotification",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { combineLatest, Subscription } from 'rxjs';\nimport { DragulaService } from 'ng2-dragula';\n\nimport { ComponentTask, KeyValue, ScenarioComponent } from '@model';\nimport { ComponentService } from '@core/services';\nimport { CanDeactivatePage } from '@core/guards';\nimport { JiraPluginService } from '@core/services/jira-plugin.service';\n\n@Component({\n    selector: 'chutney-component-edition',\n    templateUrl: './component-edition.component.html',\n    styleUrls: ['./component-edition.component.scss']\n})\nexport class ComponentEditionComponent extends CanDeactivatePage implements OnInit, OnDestroy {\n\n    scenarioComponent: ScenarioComponent = new ScenarioComponent();\n\n    componentRefTasksArray: Array<ComponentTask> = [];\n    componentFilter: string;\n    componentForm: FormGroup = this.formBuilder.group({\n        parameters: this.formBuilder.array([]),\n        tags: '',\n        jiraId: ''\n    });\n    componentTasksCreated: Array<ComponentTask> = [];\n    collapseParam = true;\n    modificationsSaved = false;\n    datasetId: string;\n    jiraId: string;\n    errorMessage: string;\n\n    constructor(private componentService: ComponentService,\n                private dragulaService: DragulaService,\n                private formBuilder: FormBuilder,\n                private jiraLinkService: JiraPluginService,\n                private route: ActivatedRoute,\n                private router: Router\n    ) {\n        super();\n    }\n\n    private loadSubscription: Subscription;\n\n    ngOnInit() {\n        this.initDragAndDrop();\n        this.loadSubscription = combineLatest(\n            this.componentService.findAllComponent(),\n            this.route.params\n        ).subscribe(\n            results => {\n                this.componentRefTasksArray = results[0];\n                const id = results[1]['id'];\n                const duplicate = this.route.snapshot.queryParamMap.get('duplicate');\n                if (duplicate) {\n                    this.load(id, true);\n                } else {\n                    this.load(id, false);\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.loadSubscription.unsubscribe();\n        this.dragulaService.destroy('COPYABLE');\n    }\n\n    save() {\n        this.scenarioComponent.componentSteps = this.componentTasksCreated;\n        this.updateScenarioParameters();\n        const tags = this.componentForm.value['tags'] + '';\n        this.jiraId = this.componentForm.value['jiraId'];\n        this.scenarioComponent.tags = tags.length !== 0 ? tags.split(',') : [];\n\n        this.scenarioComponent.datasetId = this.datasetId;\n        // Call service\n        this.componentService.saveComponentTestCase(this.scenarioComponent).subscribe(\n            (response) => {\n                this.modificationsSaved = true;\n                this.jiraLinkService.saveForScenario(response, this.jiraId).subscribe(\n                    () => {},\n                    (error) => { console.log(error); }\n                );\n                this.router.navigateByUrl('/scenario/' + response + '/execution/last')\n                    .then(null);\n            },\n            (error) => {\n                console.log(error);\n                if (error.error) {\n                    this.errorMessage = error.error;\n                }\n                this.scenarioComponent.computedParameters = [];\n            }\n        );\n    }\n\n    cancel() {\n        if (this.scenarioComponent.id != null) {\n            this.router.navigateByUrl('/scenario/' + this.scenarioComponent.id + '/execution/last');\n        } else {\n            this.router.navigateByUrl('/scenario');\n        }\n    }\n\n    addParameters(): void {\n        this.collapseParam = false;\n        (this.componentForm.controls['parameters'] as FormArray)\n            .push(this.formBuilder.group({\n                key: '',\n                value: ''\n            }));\n    }\n\n    removeParameter(index: number): void {\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        parameters.removeAt(index);\n        this.collapseParam = (parameters.length === 0);\n    }\n\n    removeComponent(index: number) {\n        this.componentTasksCreated.splice(index, 1);\n    }\n\n    switchCollapseParam() {\n        this.collapseParam = !this.collapseParam;\n    }\n\n    private initDragAndDrop() {\n        this.dragulaService.createGroup('COPYABLE', {\n            copy: (el, source) => {\n                return source.id === 'left';\n            },\n            copyItem: (componentTask: ComponentTask): any => {\n                return componentTask.clone();\n            },\n            accepts: (el, target, source, sibling) => {\n                // To avoid dragging from right to left container\n                return target.id !== 'left';\n            }\n        });\n    }\n\n    private load(id, duplicate: boolean) {\n        if (id != null) {\n            this.componentService.findComponentTestCase(id).subscribe(\n                (componentScenario) => {\n                    this.scenarioComponent = componentScenario;\n                    componentScenario.componentSteps.forEach((componentTask: ComponentTask) => {\n                        this.componentTasksCreated.push(componentTask.clone());\n                    });\n                    this.initFormComponentParameters();\n                    this.componentForm.controls['tags'].setValue(this.scenarioComponent.tags);\n                    this.datasetId = this.scenarioComponent.datasetId;\n                    if (duplicate) {\n                        this.scenarioComponent.id = null;\n                        this.scenarioComponent.creationDate = null;\n                        this.scenarioComponent.updateDate = null;\n                        this.scenarioComponent.author = null;\n                        this.scenarioComponent.title = '--COPY-- ' + this.scenarioComponent.title;\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                }\n            );\n            this.loadJiraLink(id);\n        }\n    }\n\n    private initFormComponentParameters() {\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        this.scenarioComponent.parameters.forEach((keyValue) => {\n            parameters.push(\n                this.formBuilder.group({\n                    key: keyValue.key,\n                    value: keyValue.value,\n                })\n            );\n        });\n    }\n\n    private updateScenarioParameters() {\n        this.scenarioComponent.parameters = [];\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        for (let i = 0; i < parameters.length; i++) {\n            const parameter = parameters.get(i.toString()) as FormGroup;\n            if (parameter.get('key').value !== '') {\n                this.scenarioComponent.parameters.push(new KeyValue(parameter.get('key').value, parameter.get('value').value));\n            }\n        }\n    }\n\n    selectDataset(datasetId: string) {\n        this.datasetId = datasetId;\n    }\n\n    loadJiraLink(id: string) {\n        this.jiraLinkService.findByScenarioId(id).subscribe(\n            (jiraId) => {\n                this.componentForm.controls['jiraId'].setValue(jiraId);\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    }\n\n    // Verify of page was updated\n    canDeactivatePage(): boolean {\n        let scenarioNotModified = true;\n\n        // check components steps id\n        if (this.scenarioComponent.componentSteps.length === this.componentTasksCreated.length) {\n            for (let i = 0; i < this.componentTasksCreated.length; i++) {\n                scenarioNotModified = scenarioNotModified &&\n                    this.scenarioComponent.componentSteps[i].id === this.componentTasksCreated[i].id;\n            }\n        } else {\n            scenarioNotModified = false;\n        }\n\n        // Check tags\n        const tmp = this.componentForm.value['tags'] + '';\n        const tags = tmp.length !== 0 ? tmp.split(',') : [];\n        if (this.scenarioComponent.tags.length === tags.length) {\n            for (let i = 0; i < this.scenarioComponent.tags.length; i++) {\n                scenarioNotModified = scenarioNotModified &&\n                    tags[i] === this.scenarioComponent.tags[i];\n            }\n        } else {\n            scenarioNotModified = false;\n        }\n\n        // Check scenario parameters\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        if (this.scenarioComponent.parameters.length === parameters.length) {\n            for (let i = 0; i < this.scenarioComponent.parameters.length; i++) {\n                const parameter = parameters.get(i.toString()) as FormGroup;\n                scenarioNotModified = scenarioNotModified &&\n                    parameter.get('key').value === this.scenarioComponent.parameters[i].key &&\n                    parameter.get('value').value === this.scenarioComponent.parameters[i].value;\n            }\n        } else {\n            scenarioNotModified = false;\n        }\n\n        // Check component parameters\n        if (this.scenarioComponent.componentSteps.length === this.componentTasksCreated.length) {\n            this.scenarioComponent.componentSteps.forEach((componentTask, componentIndex) => {\n                if (this.componentTasksCreated[componentIndex].computedParameters.length\n                            === this.componentTasksCreated[componentIndex].computedParameters.length) {\n                    componentTask.computedParameters.forEach((parameter, parameterIndex) => {\n                        scenarioNotModified = scenarioNotModified &&\n                            parameter.value === this.componentTasksCreated[componentIndex].computedParameters[parameterIndex].value;\n                    });\n                } else {\n                    scenarioNotModified = false;\n                }\n            });\n        } else {\n            scenarioNotModified = false;\n        }\n\n        return this.modificationsSaved || scenarioNotModified;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.component-edition-content {\n    position: fixed;\n    top: 50px;\n    width: calc(100vw - 50px);\n}\n\n.edition-header {\n    height: 120px;\n\n    .header-left {\n        height: 120px;\n        background-color: $vert2;\n        padding: 20px 20px 20px 0;\n    }\n\n    .header-right {\n        position: relative;\n        background-color: $vert3;\n        height: 120px;\n        text-align: center;\n        padding: 10px 20px 10px 30px;\n    }\n\n    .triangle-left:before {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-color: transparent transparent transparent $vert2;\n        border-style: solid;\n        border-width: 60px 0 60px 20px;\n    }\n\n    .header-left {\n        a {\n            position: absolute;\n            top: 100px;\n            text-transform: lowercase;\n            font-family: Ubuntu;\n            font-size: 11px;\n            color: #4a4a4a;\n        }\n\n        .title {\n            margin-left: 40px;\n            background-color: $vert2;\n            overflow: hidden;\n        }\n\n        .description {\n            margin-top: 10px;\n            background-color: $vert2;\n            margin-left: 40px;\n            overflow: hidden;\n        }\n    }\n}\n\n.edition-body {\n    .drop-zone {\n        background-color: lightgray;\n        font-size: 12px;\n        min-height: 60px;\n    }\n}\n\n.component-list {\n    position: fixed;\n\n    table {\n        table-layout: fixed;\n    }\n\n    .table-sm {\n        font-size: 12px;\n    }\n}\n\n.testcase-edition {\n    position: absolute;\n    right: 0;\n    max-height: calc(100vh - (50px + 120px + 10px));\n    overflow-y: auto;\n}\n\nfieldset legend {\n    width: auto;\n    font-size: 1rem;\n}\n\n.legend-title {\n    cursor: default;\n    display: inline-block;\n    width: 150px;\n}\n\n:host ::ng-deep chutney-forms-editable-label {\n    .row {\n        margin: 0;\n    }\n\n    .input-lbl {\n        color: white;\n        font-size: 22px;\n        line-height: 22px;\n        font-weight: bold;\n    }\n\n    .overlay-icon {\n        font-size: 18px !important;\n        padding: 2px 5px 2px 5px !important;\n        margin-left: 10px;\n    }\n}\n\n:host ::ng-deep chutney-forms-editable-text-area {\n    .row {\n        margin: 0;\n    }\n\n    .input-lbl {\n        font-size: 13px;\n        font-weight: 300;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: normal;\n        letter-spacing: normal;\n        color: #333333;\n    }\n\n    .overlay-icon {\n        font-size: 18px !important;\n        padding: 2px 5px 2px 5px !important;\n        margin-left: 10px;\n    }\n}\n\n.pointer {\n    cursor: pointer;\n}\n\n.tag-input {\n    height: 50px;\n}\n\n.table-scroll {\n    overflow-y: auto;\n    overflow-x: hidden;\n    height: calc(100vh - (50px /*menu*/ + (120px + 10px) /*header*/ + (1.5em + 0.75rem + 2px + 0.5rem + 2px) /*search*/ + 1rem /*inner table margin*/ + 0px));\n}\n\n.small-text {\n    font-size: 0.75em;\n}\n\n.delete-button-height {\n    height: 30px;\n}\n\ntextarea.no-resize {\n    resize: none;\n}\n\n.cursor-default {\n    cursor: default;\n}\n",
                    "styleUrl": "./component-edition.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CanDeactivatePage",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"componentForm\" autocomplete=\"off\">\n    <div class=\"component-edition-content\">\n        <div class=\"row m-0 edition-header\">\n            <div class=\"header-left col-md-8\">\n                <div class=\"title\">\n                    <chutney-forms-editable-label\n                        [id]=\"'title'\"\n                        [placeholder]=\"'scenarios.edition.form.title.label' | translate\"\n                        [defaultValue]=\"'scenarios.edition.form.title.label' | translate\"\n                        [(model)]=\"scenarioComponent.title\"\n                        [type]=\"'form-title'\">\n                    </chutney-forms-editable-label>\n                </div>\n                <div class=\"description\">\n                    <chutney-forms-editable-text-area\n                        [id]=\"'description'\"\n                        [placeholder]=\"'scenarios.edition.form.description' | translate\"\n                        [defaultValue]=\"'scenarios.edition.form.description' | translate\"\n                        [(model)]=\"scenarioComponent.description\"\n                        [type]=\"'form-title'\">\n                    </chutney-forms-editable-text-area>\n                </div>\n            </div>\n            <div class=\"header-right triangle-left col-md-4\">\n                <div class=\"row\">\n                    <div class=\"col-2\">\n                        <chutney-authoring-info *ngIf=\"scenarioComponent\" [testCase]=\"scenarioComponent\"></chutney-authoring-info>\n                    </div>\n                    <div class=\"col-2\">\n                        <chutney-edition-info *ngIf=\"scenarioComponent\" [testCase]=\"scenarioComponent\"></chutney-edition-info>\n                    </div>\n                    <div class=\"col-8\">\n                        <button type=\"button\" class=\"btn btn-success\" (click)=\"save()\"\n                                title=\"{{'global.actions.record' | translate}}\">\n                            <span class=\"fa fa-check\"></span>\n                        </button>\n                        <button type=\"button\" class=\"btn btn-secondary ms-2\" (click)=\"cancel()\"\n                                title=\"{{'global.actions.cancel' | translate}}\">\n                            <span class=\"fa fa-times\"></span>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-2 p-0 align-self-center\">\n                        <label class=\"form-control-label fw-bold\"\n                               for=\"tags\">{{ 'scenarios.edition.form.tags' | translate }}</label>\n                    </div>\n                    <div class=\"col\">\n                        <textarea type=\"text\" class=\"form-control tag-input no-resize\" name=\"tags\" id=\"tags\"\n                                  formControlName=\"tags\" rows=\"2\"></textarea>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div *ngIf=\"errorMessage\" class=\"text-center btn-danger text-white cursor-default\" (click)=\"this.errorMessage = null\">\n            <strong>{{ errorMessage }}</strong>\n        </div>\n        <div class=\"row edition-body\">\n            <div class=\"component-list border-right col-3\">\n                <input name=\"search\" type=\"text\" class=\"form-control mb-2\"\n                       placeholder=\"{{'components.shared.list.filter.placeholder' | translate}}\"\n                       [(ngModel)]=\"componentFilter\" [ngModelOptions]=\"{standalone: true}\"/>\n                <div class=\"table-scroll\">\n                    <table class=\"table table-sm table-striped table-hover\">\n                        <tbody dragula=\"COPYABLE\" id=\"left\"\n                               [dragulaModel]=\"componentRefTasksArray | searchTextPipe: componentFilter:['name']\">\n                        <tr *ngFor=\"let component of componentRefTasksArray | searchTextPipe: componentFilter:['name']\"\n                            class=\"pointer\">\n                            <td>\n                                <span class=\"fa\" [ngClass]=\"component.implementation ? 'fa-clone' : 'fa-cubes'\"></span>\n                                {{component.name}}\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"testcase-edition col-9\">\n                <div class=\"row mt-0\">\n                    <div class=\"col-8 border-right\">\n                        <div class=\"row fw-bold\">\n                            <span class=\"legend-title\">{{'components.testcase.edition.blocks.steps' | translate}}</span>\n                        </div>\n                        <div class=\"p-2 border drop-zone\" dragula=\"COPYABLE\"\n                             [(dragulaModel)]=\"componentTasksCreated\" id=\"right\"\n                             title=\"{{'components.shared.edition.draganddrop' | translate}}\">\n                            <div *ngFor=\"let component of componentTasksCreated; let i=index\" class=\"card\">\n                                <chutney-component-card\n                                    [component]=\"component\"\n                                    (deleteEvent)=\"removeComponent(i)\">\n                                </chutney-component-card>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-4\">\n                        <div class=\"row fw-bold\">\n                            <span class=\"me-5\">{{'menu.principal.jiraId' | translate}}</span>\n                            <input type=\"text\" class=\"form-control me-2 small-text\"\n                                formControlName=\"jiraId\"\n                                placeholder=\"id jira\"/>\n                        </div>\n                        <div class=\"row fw-bold\">\n                            <span class=\"me-5\">{{'menu.principal.dataset' | translate}}</span>\n                            <chutney-dataset-selection\n                                [selectedDatasetId]=\"scenarioComponent.datasetId\"\n                                (selectionEvent)=\"selectDataset($event)\">\n                            </chutney-dataset-selection>\n\n                        </div>\n                        <div class=\"row fw-bold\">\n                            <span class=\"me-5 cursor-default w-30\"\n                                  (click)=\"switchCollapseParam()\">{{'components.shared.edition.blocks.parameters' | translate}}</span>\n                            <button class=\"btn btn-sm btn-light btn-outline-dark border-0 w-10\" type=\"button\"\n                                    (click)=\"switchCollapseParam()\"\n                                    title=\"{{(collapseParam ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n                                <span class=\"fa\" [ngClass]=\"collapseParam ? 'fa-eye' : 'fa-eye-slash'\"></span>\n                            </button>\n                            <button id=\"addParameterBtn\" class=\"btn btn-sm btn-light btn-outline-dark border-0 ms-sm-1 w-10\"\n                                    (click)=\"addParameters()\"\n                                    title=\"{{'global.actions.add' | translate}}\">\n                                <span class=\"fa fa-plus\"></span>\n                            </button>\n                        </div>\n                        <ng-container *ngIf=\"!collapseParam\">\n                            <div class=\"row\" formArrayName=\"parameters\"\n                                 *ngFor=\"let parameter of componentForm.get('parameters')?.controls; let i = index;\">\n                                <ng-container [formGroupName]=\"i\">\n                                    <div class=\"row w-100 mb-1\">\n                                        <div class=\"col-9 ps-0\">\n                                            <input type=\"text\" class=\"form-control me-2 small-text\"\n                                                   formControlName=\"key\"\n                                                   placeholder=\"key\"/>\n                                        </div>\n                                        <div class=\"col pe-0\">\n                                            <button type=\"button\"\n                                                    class=\"btn btn-outline-danger delete-button-height float-end\"\n                                                    (click)=\"removeParameter(i)\">\n                                                <span class=\"fa fa-trash\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div class=\"w-100 ps-4\">\n                                        <textarea class=\"form-control me-2 small-text\" formControlName=\"value\" rows=\"1\"\n                                                  placeholder=\"value\"></textarea>\n                                    </div>\n                                </ng-container>\n                            </div>\n                        </ng-container>\n                        <div class=\"row\" *ngIf=\"scenarioComponent\">\n                            <chutney-scenario-campaigns\n                                [idScenario]=\"scenarioComponent.id\"></chutney-scenario-campaigns>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n"
        },
        {
            "name": "ComponentReadComponent",
            "id": "component-ComponentReadComponent-62b32f02444b692e29537b6907596b290ee4e7a77722beacdce9ef81048389a94d47cde0e37d5669741280e0d4705bb9c2cd6f885260615b3cc61e0a277218aa",
            "file": "src/app/modules/scenarios/components/execution/component-read/component-read.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-component-read",
            "styleUrls": [
                "./component-read.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-read.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ComponentTask",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showImplementation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "isNotEmpty",
                    "args": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n\nimport {  ComponentTask } from '@model';\n\n@Component({\n    selector: 'chutney-component-read',\n    templateUrl: './component-read.component.html',\n    styleUrls: ['./component-read.component.scss']\n})\nexport class ComponentReadComponent implements OnInit {\n\n    @Input() step: ComponentTask;\n    showImplementation = false;\n    ngOnInit(): void {\n\n    }\n\n    isNotEmpty(object: Object) {\n        return Object.keys(object).length > 0;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.eye-color {\n    color: $grisfonce2;\n}\n\n.step-name {\n    font-size: 1em;\n}\n\n.implementation {\n    font-size: 0.9em;\n}\n",
                    "styleUrl": "./component-read.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ms-3 mb-2 mt-2\">\n    <span *ngIf=\"step.implementation\" class=\"me-2 fa eye-color pointer\"  [ngClass]=\"showImplementation ? 'fa-angle-down' : 'fa-angle-right'\" (click)=\"showImplementation = !showImplementation\"></span>\n    <span class=\"step-name\">{{ step.name }} </span> <small *ngIf=\"step.implementation\"> ({{ step.implementation.type }})</small>\n    <span class=\"small\" *ngIf=\"step.strategy !== null && step.strategy.type === 'Retry'\">\n        <span class=\"ms-2 fa fa-sm fa-redo \" title=\"{{ step.strategy.parameters | stringify}}\"></span>\n    </span>\n    <div *ngIf=\"step.implementation\" class=\"ms-2 implementation\">\n        <div class=\"ms-2\" *ngIf=\"showImplementation\">\n            <span *ngIf=\"step.implementation.target\"> {{'global.smallword.On' | translate}} {{ step.implementation.target }} </span>\n            <div *ngIf=\"step.implementation.inputs && isNotEmpty(step.implementation.inputs)\"> inputs :\n<pre>{{step.implementation.inputs | json }}</pre>\n            </div>\n            <div *ngIf=\"step.implementation.outputs && isNotEmpty(step.implementation.outputs)\"> outputs :\n<pre>{{step.implementation.inputs | json }}</pre>\n            </div>\n            <div *ngIf=\"step.implementation.validations && isNotEmpty(step.implementation.validations)\">  validations :\n<pre>{{step.implementation.validations | json}}</pre>\n            </div>\n        </div>\n    </div>\n\n    <div *ngFor=\"let child of step.children\">\n        <chutney-component-read [step] = child></chutney-component-read>\n    </div>\n</div>\n"
        },
        {
            "name": "CreateComponent",
            "id": "component-CreateComponent-8566110c9479913df934353da621dab0d8ab88bd56bc96fd0b95ba6759b494bbe186df6a423c11617d68f2127815cf61d4ccfdc67e6a699eaf6b599772084d27",
            "file": "src/app/modules/component/components/create-component/create-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-create-component",
            "styleUrls": [
                "./create-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "actionToEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentTask",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "collapseScenario",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "componentEditionRightPanelMinimize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "componentFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "componentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "componentMinimize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "componentTasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "componentTasksCreated",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ComponentTask>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "editableComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentTask",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "executionResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "messageType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "parents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "savedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showChild",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "tagData",
                    "defaultValue": "new SelectableTags<String>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "taskFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Task>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "viewComponent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFormArray",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeExecutionPanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentTask",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteComponent",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "duplicateAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "duplicateComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editComponentTask",
                    "args": [
                        {
                            "name": "componentToEdit",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentToEdit",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFormValuesWith",
                    "args": [
                        {
                            "name": "selectedComponent",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedComponent",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initAllTasksAndComponents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initDragAndDrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initNewComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initSelectedComponent",
                    "args": [
                        {
                            "name": "componentId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshComponents",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeStep",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveComponent",
                    "args": [
                        {
                            "name": "componentTask",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentTask",
                            "type": "ComponentTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "seeChild",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNoTag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTagSelect",
                    "args": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragulaService } from 'ng2-dragula';\n\nimport {\n    ComponentTask,\n    Implementation,\n    KeyValue,\n    ListInput,\n    MapInput,\n    SelectableTags,\n    SimpleInput,\n    Task,\n    Authorization\n} from '@model';\nimport { delay } from '@shared/tools/async-utils';\nimport { ComponentService, LoginService } from '@core/services';\nimport { distinct, flatMap } from '@shared/tools';\n\n@Component({\n    selector: 'chutney-create-component',\n    templateUrl: './create-component.component.html',\n    styleUrls: ['./create-component.component.scss']\n})\nexport class CreateComponent implements OnInit, OnDestroy {\n\n    // global\n    viewComponent = true;\n    componentMinimize = false;\n    componentEditionRightPanelMinimize = false;\n    actionToEdit: ComponentTask;\n\n    // referential\n    tasks: Array<Task> = [];\n    componentTasks: Array<ComponentTask> = [];\n\n    // Message\n    message: string;\n    messageType: string;\n\n    // const message\n    private savedMessage;\n\n    // Simple component\n    taskFilter: string;\n    actionSelected: Task;\n\n    // Complex component\n    componentFilter: string;\n    editableComponent: ComponentTask;\n    componentForm: FormGroup;\n    componentTasksCreated: Array<ComponentTask> = [];\n    executionResult: any;\n\n    collapseScenario = false;\n    showChild = false;\n\n    parents: any;\n\n    private unsubscribe$ = new Subject();\n\n    // Tags\n    tagData = new SelectableTags<String>();\n\n    private routeParamsSubscription: Subscription;\n\n    Authorization = Authorization;\n\n    constructor(\n        private componentService: ComponentService,\n        private formBuilder: FormBuilder,\n        private dragulaService: DragulaService,\n        private translate: TranslateService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private loginService: LoginService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.initForm();\n        this.initTranslation();\n        this.initDragAndDrop();\n\n        this.initAllTasksAndComponents().subscribe((results) => {\n\n            this.tasks = results[0];\n            this.componentTasks = results[1];\n\n            this.setSelectedTags();\n            this.routeParamsSubscription = this.route.params.pipe(\n                takeUntil(this.unsubscribe$)\n            ).subscribe((params) => {\n                this.initSelectedComponent(params['id']);\n            });\n        });\n    }\n\n    private initForm() {\n        this.componentForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            parameters: this.formBuilder.array([]),\n            tags: '',\n            strategy: new FormControl()\n        });\n        if (!this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE])) {\n            this.componentForm.disable();\n        }\n    }\n\n    private initTranslation() {\n        this.translate.get('global.actions.done.saved').subscribe((res: string) => {\n            this.savedMessage = res;\n        });\n    }\n\n    private initDragAndDrop() {\n        const userHasWritePermission = this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE]);\n        this.dragulaService.createGroup('COPYABLE', {\n            copy: (el, source) => {\n                return source.id === 'left';\n            },\n            copyItem: (componentTask: ComponentTask): any => {\n                return componentTask.clone();\n            },\n            accepts: (el, target, source, sibling) => {\n                // To avoid dragging from right to left container\n                return target.id !== 'left';\n            },\n            moves: (el, container, handle, sibling) => userHasWritePermission\n        });\n    }\n\n    private initAllTasksAndComponents(): Observable<any> {\n        return combineLatest(\n            this.componentService.findAllTasks(),\n            this.componentService.findAllComponent()\n        ).pipe(\n            takeUntil(this.unsubscribe$)\n        );\n    }\n\n    private setSelectedTags() {\n        this.tagData.initialize(this.findAllTags());\n    }\n\n    private findAllTags() {\n        return distinct(flatMap(this.componentTasks, (sc) => sc.tags)).sort();\n    }\n\n    initSelectedComponent(componentId) {\n        if (componentId != null) {\n            const foundComponent = this.componentTasks.find(c => c.id === componentId);\n            if (foundComponent != null) {\n                this.editComponentTask(foundComponent);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.dragulaService.destroy('COPYABLE');\n        this.unsubscribe$.complete();\n    }\n\n    initNewComponent() {\n        this.fillFormValuesWith(new ComponentTask('', null, [], [], [], [], null));\n    }\n\n    editComponentTask(componentToEdit: ComponentTask) {\n        this.resetData();\n\n        if (componentToEdit.implementation == null) {\n            this.componentService.findParents(componentToEdit.id).subscribe(\n                (res) => { this.parents = res; }\n            );\n            this.fillFormValuesWith(componentToEdit);\n        } else {\n            this.editableComponent = null;\n            this.componentTasksCreated = [];\n            this.actionToEdit = componentToEdit;\n        }\n        this.router.navigateByUrl(`/component/${componentToEdit.id}`);\n    }\n\n    save() {\n        this.saveComponent(this.createComponent());\n    }\n\n    private createComponent(): ComponentTask {\n        return new ComponentTask(\n            this.componentForm.value['name'],\n            null,\n            this.componentTasksCreated,\n            this.componentForm.value['parameters'].map((p) => new KeyValue(p.key, p.value)),\n            [],\n            this.componentForm.value['tags'].split(','),\n            this.componentForm.value['strategy'],\n            this.editableComponent.id\n        );\n    }\n\n    deleteComponent(id: string) {\n        this.componentService.delete(id).subscribe(\n            () => {\n                this.refreshComponents();\n                this.resetData();\n                this.editableComponent = null;\n            },\n            (error) => console.log(error)\n        );\n    }\n\n    duplicateComponent() {\n        this.editableComponent = Object.assign({}, this.editableComponent);\n        this.editableComponent.id = null;\n        this.componentForm.controls['name'].patchValue('--COPY-- ' + this.editableComponent.name);\n        this.router.navigateByUrl(`/component/list`);\n    }\n\n    duplicateAction() {\n        this.router.navigateByUrl(`/component/list`);\n    }\n\n    removeStep(index: number) {\n        this.componentTasksCreated.splice(index, 1);\n    }\n\n    resetData() {\n        this.actionSelected = null;\n        this.actionToEdit = null;\n        this.collapseScenario = false;\n        this.executionResult = null;\n        this.showChild = false;\n        this.message = null;\n\n        this.router.navigateByUrl(`/component`);\n    }\n\n    execute(environment: string) {\n        this.componentService.execute(this.editableComponent, environment).subscribe(\n            (res) => { this.executionResult = res; },\n            (error) => { this.executionResult = error; }\n        );\n    }\n\n    /////////// Action\n    select(task: Task) {\n        this.resetData();\n\n        this.actionSelected = task;\n\n        const mapImpl = task.inputs.filter(i => i.type === 'java.util.Map').map(i => {\n            return new MapInput(i.name, []);\n        });\n\n        const listImpl = task.inputs.filter(i => i.type === 'java.util.List').map(i => {\n            return new ListInput(i.name, []);\n        });\n\n        const simpleImpl = task.inputs.filter(i => i.type !== 'java.util.Map' && i.type !== 'java.util.List').map(i => {\n            return new SimpleInput(i.name, '', i.type);\n        });\n\n        const implementation = new Implementation(task.identifier, '', task.target, mapImpl, listImpl, simpleImpl, [], []);\n        this.actionToEdit = new ComponentTask('', implementation, [], [], [], [], null);\n    }\n\n    cancel() {\n        this.resetData();\n        this.fillFormValuesWith(/*nothing*/);\n    }\n\n    closeExecutionPanel() {\n        this.executionResult = null;\n    }\n\n    private refreshComponents(id?: string): void {\n        this.componentService.findAllComponent().subscribe(\n            (res) => {\n                this.componentTasks = res;\n                this.setSelectedTags();\n                if (id) {\n                    this.router.navigateByUrl(`/component/${id}`).then(() => {\n                        this.viewComponent = true;\n                        this.showMessage(this.savedMessage);\n                    });\n                }\n            },\n            (error) => console.log(error)\n        );\n    }\n\n    private fillFormValuesWith(selectedComponent?: ComponentTask) {\n        this.editableComponent = null;\n        this.componentTasksCreated = [];\n        this.componentForm.reset();\n\n        if (selectedComponent === undefined) {\n            this.componentForm.controls['name'].reset();\n            this.componentForm.controls['strategy'].reset();\n            this.componentForm.controls ['tags'].reset();\n        } else {\n            this.editableComponent = selectedComponent;\n            this.componentTasksCreated = this.editableComponent.children;\n\n            this.componentForm.controls['name'].patchValue(this.editableComponent.name);\n            (this.componentForm.controls['tags'] as FormControl).patchValue(this.editableComponent.tags.join(', '));\n        }\n\n        this.clearFormArray(this.componentForm.controls['parameters'] as FormArray);\n    }\n\n    clearFormArray(formArray: FormArray) {\n        while (formArray.length !== 0) {\n            formArray.removeAt(0);\n        }\n    }\n\n    saveComponent(componentTask: ComponentTask) {\n        this.componentService.save(componentTask)\n            .subscribe(\n                (id) => {\n                    if (this.editableComponent) {\n                        this.editableComponent.id = id;\n                    }\n                    this.refreshComponents(id);\n                },\n                (err) => this.showMessage(err.error, true)\n            );\n    }\n\n    showMessage(message: string, error: boolean = false) {\n        (async () => {\n            this.messageType = error ? 'danger' : 'info';\n            this.message = message;\n            await delay(3000);\n            this.message = null;\n            this.messageType = null;\n        })();\n    }\n\n    seeChild() {\n        this.showChild = !this.showChild;\n    }\n\n    isSelectAll() {\n        return this.tagData.isSelectAll();\n    }\n\n    selectAll() {\n        this.tagData.selectAll();\n    }\n\n    unSelectAll() {\n        this.tagData.deselectAll();\n    }\n\n    toggleNoTag() {\n        this.tagData.toggleNoTag();\n    }\n\n    toggleTagSelect(tag: any) {\n        this.tagData.toggleSelect(tag);\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.small-font {\n    font-size: 0.7em;\n}\n\n.table-scroll {\n    overflow-y: auto;\n    height: calc(100vh - (50px /*menu*/ + 10px /*row margin*/ + 38px /*menu buttons*/ + (1.5em + 0.75rem + 2px + 0.5rem + 2px) /*search*/ + 1rem /*inner table margin*/ + 0px));\n}\n\n.table-scroll-with-tags-filter {\n    overflow-y: auto;\n    overflow-x: hidden;\n    height: calc(100vh - (50px /*menu*/ + 10px /*row margin*/ + 38px /*menu buttons*/ + (1.5em + 0.75rem + 2px + 0.5rem + 2px) /*search*/ + (35px + 102px) /*tags*/ + (1px + 2rem) /*hr*/ + 1rem /*inner table margin*/ + 0px));\n}\n\n.tags-scroll {\n    height: 102px;\n    overflow-y: auto;\n}\n\n.component-list {\n    padding-right: 10px;\n\n    table {\n        table-layout: fixed;\n    }\n\n    .table-sm {\n        font-size: 12px;\n    }\n}\n\n.selected {\n    color: black;\n    font-weight: bold;\n    box-shadow: none;\n}\n\n.not-selected {\n    color: lightsteelblue;\n    font-weight: normal;\n    box-shadow: none;\n}\n\n.pointer {\n    cursor: pointer;\n}\n\n.selected-component {\n    background-color: $grisclair1 !important;\n}\n\n.btn-toolbar {\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    top: -28px;\n    margin-bottom: -28px;\n    margin-left: auto;\n}\n\n.components-list-container {\n    position: fixed;\n}\n\n.edition {\n    position: absolute;\n    right: 0;\n\n    .edition-header {\n        height: 140px;\n    }\n\n    .edition-body {\n        height: calc(100vh - (50px + 10px + 140px + 10px + 10px));\n        overflow-y: auto;\n    }\n}\n\ntextarea.no-resize {\n    resize: none;\n}\n\n.bg-draggable {\n    background-color: lightgray;\n}\n\n.drop-zone {\n    font-size: 12px;\n    padding: .5rem .5rem 0rem !important;\n}\n\n.drop-zone-empty {\n    padding: 2rem !important;\n}\n\n.component-list-container-minimize {\n    width: 70px;\n}\n\n.edition-component-minimize {\n    width: calc(100% - 70px /*component-list*/)\n}\n\n.right-panel-minimize {\n    width: 45px;\n}\n\n.edition-component-right-panel-minimize {\n    width: calc(100% - 45px/*right-panel*/);\n}\n\n.right-panel-minimize-btn {\n    position: fixed;\n    margin-left: -5px;\n    height: calc(80vh);\n}\n\n.left-panel-minimize-btn {\n    position: absolute;\n    right: 5px;\n    height: calc(100vh);\n}\n\n.right-panel-minimize-btn:hover, .left-panel-minimize-btn:hover {\n    background-color: lightgray;\n}\n\n.right-panel-content {\n    margin-left: 15px;\n}\n",
                    "styleUrl": "./create-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dragulaService",
                        "type": "DragulaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"components-list-container m-0 border-right\"\n         [ngClass]=\"{'col p-0 h100 component-list-container-minimize':componentMinimize, 'col-3 px-3':!componentMinimize}\">\n        <button type=\"button\" class=\"left-panel-minimize-btn btn btn-xs btn-default ms-2 shadow-none p-0\"\n                title=\"{{(componentMinimize ? 'global.actions.show' : 'global.actions.hide') | translate}}\"\n                (click)=\"componentMinimize = !componentMinimize;\">\n            <span class=\"fa\" [ngClass]=\"{'fa-angle-double-right':componentMinimize, 'fa-angle-double-left':!componentMinimize}\"></span>\n        </button>\n        <button type=\"button\" class=\"btn btn-xs btn-default ms-2\"\n                [ngClass]=\"{'selected':viewComponent, 'not-selected':!viewComponent, 'd-none': componentMinimize}\"\n                (click)=\"viewComponent = true; cancel();\">\n            <span class=\"fa fa-cubes\"></span> {{'components.menu.components' | translate}}\n        </button>\n        <button type=\"button\" class=\"btn btn-xs btn-default\"\n                [ngClass]=\"{'selected':!viewComponent, 'not-selected':viewComponent, 'd-none': componentMinimize}\"\n                (click)=\"viewComponent = false; cancel();\">\n            <span class=\"fa fa-clone\"></span> {{'components.menu.actions' | translate}}\n        </button>\n\n        <div *ngIf=\"viewComponent\" class=\"component-list\"\n             [ngClass]=\"{'d-none': componentMinimize}\">\n            <div class=\"mb-2\">\n                <input name=\"search\" type=\"text\" class=\"form-control mb-2\"\n                       placeholder=\"{{'components.shared.list.filter.placeholder' | translate}}\"\n                       [(ngModel)]=\"componentFilter\"/>\n                <button *ngIf=\" !isSelectAll()\" type=\"button\" class=\"btn btn-xs btn-default small-font\"\n                        (click)=\"selectAll()\">\n                    <span class=\"fa fa-check\"></span> Tout sélectionner\n                </button>\n                <button *ngIf=\"isSelectAll()\" type=\"button\" class=\"btn btn-xs btn-default small-font\"\n                        (click)=\"unSelectAll()\">\n                    <span class=\"fa fa-times\"></span> Tout désélectionner\n                </button>\n                <button class=\"chutney-tag\"\n                        [ngClass]=\"tagData.isNoTagSelected() ? 'chutney-tag-selected' : 'chutney-tag-unselected'\"\n                        (click)=\"toggleNoTag()\">\n                    NO_TAG\n                </button>\n                <div class=\"tags-scroll d-flex flex-wrap align-content-start\">\n                    <div *ngFor=\"let tag of tagData.all()\">\n                        <button\n                            [ngClass]=\"tagData.isSelected(tag)? 'chutney-tag chutney-tag-selected' : 'chutney-tag chutney-tag-unselected'\"\n                            (click)=\"toggleTagSelect(tag)\">\n                            {{tag}}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <hr/>\n            <div class=\"table-scroll-with-tags-filter\">\n                <table class=\"table table-sm table-striped table-hover\">\n                    <tbody dragula=\"COPYABLE\" id=\"left\"\n                           [dragulaModel]=\"componentTasks |  componentSearch : tagData.selected() : tagData.isNoTagSelected() : tagData.isSelectAll() | searchTextPipe  : componentFilter : ['name']\">\n                    <tr class=\"pointer d-flex me-auto\"\n                        *ngFor=\"let component of (componentTasks |  componentSearch : tagData.selected() : tagData.isNoTagSelected() : tagData.isSelectAll() | searchTextPipe  : componentFilter : ['name'])\"\n                        (click)=\"editComponentTask(component)\"\n                        [ngClass]=\"{'selected-component': editableComponent?.name === component.name || actionToEdit?.name === component.name}\">\n                        <td class=\"w-100\">\n                            <span class=\"fa\" [ngClass]=\"component.implementation ? 'fa-clone' : 'fa-cubes'\"></span>\n                            {{component.name}}\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div *ngIf=\"!viewComponent\" class=\"component-list\"\n             [ngClass]=\"{'d-none': componentMinimize}\">\n            <input name=\"search\" type=\"text\" class=\"sticky-content form-control mb-2\"\n                   placeholder=\"{{'components.action.list.filter.placeholder' | translate}}\"\n                   [(ngModel)]=\"taskFilter\"/>\n            <div class=\"table-scroll\">\n                <table class=\"table table-sm table-striped table-hover\">\n                    <tbody>\n                    <tr *ngFor=\"let task of tasks | searchTextPipe: taskFilter:['identifier']\" (click)=\"select(task)\"\n                        class=\"pointer\"\n                        [ngClass]=\"{'selected-component': task?.identifier === actionSelected?.identifier }\">\n                        <td> {{task.identifier}} </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"edition\" [formGroup]=\"componentForm\"\n         [ngClass]=\"{'col edition-component-minimize':componentMinimize, 'col-9':!componentMinimize}\">\n        <div class=\"text-center bg-info text-white\"\n             [ngClass]=\"'bg-' + messageType\">\n            <strong *ngIf=\"message\">{{ message }}</strong>\n        </div>\n\n        <!-- Component panel -->\n        <ng-container *ngIf=\"viewComponent && !actionToEdit\">\n            <div class=\"edition-header row mt-0\">\n                <ng-container *ngIf=\"!executionResult && !editableComponent\">\n                    <div class=\"col text-center\">\n                        <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                                type=\"button\"\n                                class=\"btn btn-success\"\n                                (click)=\"initNewComponent()\"\n                                title=\"{{'components.component.create' | translate}}\">\n                            <span class=\"fa fa-plus-circle\"></span><br/>\n                        </button>\n                    </div>\n                </ng-container>\n                <ng-container *ngIf=\"editableComponent\">\n                    <div class=\"col-7\">\n                        <div class=\"row\">\n                            <div>\n                                <span class=\"fa fa-cubes\"></span>\n                                <span class=\"ms-2 fw-bold\">{{'components.menu.components' | translate}}</span>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-1\"></div>\n                            <textarea formControlName=\"name\" rows=\"2\"\n                                      class=\"col form-control no-resize\"\n                                      [ngClass]=\"{\n                                        'is-valid': componentForm.get('name').valid && componentForm.get('name').enabled,\n                                        'is-invalid': !componentForm.get('name').valid && componentForm.get('name').enabled\n                                      }\"\n                                      placeholder=\"{{'components.shared.edition.fields.intention.placeholder' | translate}}\">\n                            </textarea>\n                            <div class=\"col-1\"></div>\n                        </div>\n                    </div>\n                    <div class=\"col-5\">\n                        <div class=\"row\">\n                            <div class=\"col text-center\">\n                                <ng-container *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\">\n                                    <chutney-toolbar-component\n                                        (editEvent)=\"save()\"\n                                        (cancelEvent)=\"cancel()\"\n                                        (executeEvent)=\"execute($event)\"\n                                        (childEvent)=\"seeChild()\"\n                                        (deleteEvent)=\"deleteComponent(editableComponent.id)\"\n                                        (duplicateEvent)=\"duplicateComponent()\"\n                                        [editComponent]=\"editableComponent\"\n                                        [parents]=\"parents\">\n                                    </chutney-toolbar-component>\n                                </ng-container>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"p-0 align-self-center\">\n                                <label class=\"form-control-label fw-bold\"\n                                       for=\"tags\">{{ 'scenarios.edition.form.tags' | translate }}</label>\n                            </div>\n                            <div class=\"col\">\n                                <textarea formControlName=\"tags\" type=\"text\" class=\"form-control no-resize\" name=\"tags\"\n                                          id=\"tags\" rows=\"2\"></textarea>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n            </div>\n            <div class=\"edition-body row\">\n                <div *ngIf=\"editableComponent\" class=\"border-right\"\n                     [ngClass]=\"{'col edition-component-right-panel-minimize':componentEditionRightPanelMinimize, 'col-7':!componentEditionRightPanelMinimize}\">\n                        <div class=\"ps-3 fw-bold\">\n                            <span class=\"legend-title\">{{'components.component.edition.blocks.steps' | translate}}</span>\n                        </div>\n                        <div class=\"bg-draggable mt-2 border\"\n                             title=\"{{'components.shared.edition.draganddrop' | translate}}\">\n                            <div [ngClass]=\"componentTasksCreated.length > 0 ? 'drop-zone' : 'drop-zone-empty'\"\n                                 dragula=\"COPYABLE\"\n                                 [(dragulaModel)]=\"componentTasksCreated\" id=\"right\">\n                                <div *ngFor=\"let component of componentTasksCreated; let i=index\" class=\"card mb-2\">\n                                    <chutney-component-card\n                                        [component]=\"component\"\n                                        (deleteEvent)=\"removeStep(i)\">\n                                    </chutney-component-card>\n                                </div>\n                            </div>\n                        </div>\n                </div>\n                <div [ngClass]=\"{'p-0 right-panel-minimize':componentEditionRightPanelMinimize, 'col-5':!componentEditionRightPanelMinimize}\">\n                    <button *ngIf=\"editableComponent\" type=\"button\" class=\"right-panel-minimize-btn btn btn-xs mt-4 btn-default shadow-none\"\n                            [ngClass]=\"{'p-0':!componentEditionRightPanelMinimize}\"\n                            title=\"{{(componentEditionRightPanelMinimize ? 'global.actions.show' : 'global.actions.hide') | translate}}\"\n                            (click)=\"componentEditionRightPanelMinimize = !componentEditionRightPanelMinimize;\">\n                        <span class=\"fa\" [ngClass]=\"{'fa-angle-double-left':componentEditionRightPanelMinimize, 'fa-angle-double-right':!componentEditionRightPanelMinimize}\"></span>\n                    </button>\n                    <div class=\"right-panel-content mt-4\" [ngClass]=\"{'d-none':componentEditionRightPanelMinimize}\">\n                        <ng-container *ngIf=\"!executionResult\">\n                            <div *ngIf=\"editableComponent\">\n                                <chutney-strategy-form [strategy]=\"editableComponent.strategy\" formControlName=\"strategy\"></chutney-strategy-form>\n                                <chutney-parameters-component [parentForm]=\"componentForm\" [editableComponent]=\"editableComponent\"></chutney-parameters-component>\n                                <chutney-child-panel-component [parents]=\"parents\" [show]=\"showChild\"></chutney-child-panel-component>\n                            </div>\n                        </ng-container>\n                        <ng-container *ngIf=\"executionResult\">\n                            <chutney-execution-panel-component [executionResult]=\"executionResult\" (closeEvent)=\"closeExecutionPanel()\"></chutney-execution-panel-component>\n                        </ng-container>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n\n        <!-- Actions panel edit -->\n        <ng-container *ngIf=\"viewComponent && actionToEdit\">\n            <chutney-action-edit-component\n                [editComponent]=\"actionToEdit\"\n                [rightPanelMinimize]=\"componentEditionRightPanelMinimize\"\n                (createEvent)=\"saveComponent($event)\"\n                (deleteEvent)=\"deleteComponent($event)\"\n                (cancelEvent)=\"cancel()\"\n                (duplicateEvent)=\"duplicateAction()\">\n            </chutney-action-edit-component>\n        </ng-container>\n\n        <!-- Actions panel create -->\n        <ng-container *ngIf=\"!viewComponent\">\n            <div *ngIf=\"!actionSelected\" class=\"fw-bold text-center\">\n                {{'components.action.edition.select' | translate}}\n            </div>\n            <chutney-action-edit-component *ngIf=\"actionSelected\"\n                [editComponent]=\"actionToEdit\"\n                [rightPanelMinimize]=\"componentEditionRightPanelMinimize\"\n                (createEvent)=\"saveComponent($event)\"\n                (deleteEvent)=\"deleteComponent($event)\"\n                (cancelEvent)=\"cancel()\">\n            </chutney-action-edit-component>\n        </ng-container>\n    </div>\n</div>\n"
        },
        {
            "name": "DatabaseAdminComponent",
            "id": "component-DatabaseAdminComponent-109c3602165e50f98c21ea66c14bc1542e1d8d4b9ceca985a2840f42fb2cce627452bf8bfc287fbb46448a362899d9001f90a4545b3df33c9071d54e91366055",
            "file": "src/app/modules/database-admin/components/database-admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-database-admin",
            "styleUrls": [
                "./database-admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./database-admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "database",
                    "defaultValue": "'jdbc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "itemsPerPage",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "paginate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "paginationInstanceConfig",
                    "defaultValue": "{\n        id: 'admin-pagination',\n        currentPage: 1,\n        itemsPerPage: this.itemsPerPage\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginationInstance",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sqlResult",
                    "defaultValue": "new Sqlresult()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "statement",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPaginationChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { Sqlresult, sqlResultFromObject } from '@model';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { DatabaseAdminService } from '@core/services';\n\n@Component({\n    selector: 'chutney-database-admin',\n    templateUrl: './database-admin.component.html',\n    styleUrls: ['./database-admin.component.scss']\n})\nexport class DatabaseAdminComponent {\n\n    itemsPerPage: number = 5;\n    database: string = 'jdbc';\n    paginate: boolean = false;\n    statement: string = '';\n    errorMessage: string;\n    sqlResult = new Sqlresult();\n\n    paginationInstanceConfig: PaginationInstance = {\n        id: 'admin-pagination',\n        currentPage: 1,\n        itemsPerPage: this.itemsPerPage\n    };\n\n    constructor(\n        private databaseAdminService: DatabaseAdminService\n    ) {\n    }\n\n    execute() {\n        if (this.statement.length === 0) {\n            return;\n        }\n\n        this.paginationInstanceConfig.itemsPerPage = this.itemsPerPage;\n\n        this.errorMessage = null;\n        if (this.paginate) {\n            this.databaseAdminService.paginate(this.statement, this.database, this.paginationInstanceConfig.currentPage, this.paginationInstanceConfig.itemsPerPage)\n                .subscribe(\n                    (res: Array<Object>) => {\n                        this.sqlResult = sqlResultFromObject(res['data'][0]);\n                        this.paginationInstanceConfig.totalItems = res['totalCount'];\n                    },\n                    (error) => {\n                        this.errorMessage = error.error;\n                        this.sqlResult = new Sqlresult();\n                    }\n                );\n        } else {\n            this.databaseAdminService.execute(this.statement, this.database)\n                .subscribe(\n                    (res: Array<Object>) => {\n                        this.sqlResult = sqlResultFromObject(res);\n                    },\n                    (error) => {\n                        this.errorMessage = error.error;\n                        this.sqlResult = new Sqlresult();\n                    }\n                );\n        }\n    }\n\n    onPaginationChange() {\n        if (this.paginate) {\n            this.execute();\n        }\n    }\n\n    pageChange(event: number) {\n        this.paginationInstanceConfig.currentPage = event;\n        this.execute();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\nlabel {\n  margin-bottom: 0;\n}\n\nlabel, input, select {\n  vertical-align: middle;\n}\n\n#admin-prperties {\n  height: 30px;\n}\n\n#pagination-props-container {\n  font-size: small;\n  font-style: italic;\n}\n\n.syntax-link {\n  font-size: 10px;\n  font-style: italic;\n}\n\n#itemsPerPage {\n  width: 35px;\n}\n\n.no-border {\n  border: 0;\n  background-color: transparent;\n}\n",
                    "styleUrl": "./database-admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "databaseAdminService",
                        "type": "DatabaseAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "databaseAdminService",
                        "type": "DatabaseAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"col-sm-12 px-3\">\n    <div id=\"admin-prperties\" class=\"row\">\n        <div class=\"col-md-2 pt-1 ps-4\">\n          <label for=\"database\" class=\"me-2\">Database</label>\n          <select id=\"database\" [(ngModel)]=\"database\" class=\"no-border\">\n            <option value=\"jdbc\">JDBC</option>\n            <option value=\"orient\">ORIENT</option>\n          </select>\n        </div>\n        <div class=\"col-md-1 pt-1\">\n          <input id=\"paginate\" type=\"checkbox\" [(ngModel)]=\"paginate\" (change)=\"onPaginationChange()\" class=\"me-1\" />\n          <label for=\"paginate\">Paginate</label>\n        </div>\n        <div id=\"pagination-props-container\" class=\"col-md-2 pt-1\" *ngIf=\"paginate\">\n          <label for=\"itemsPerPage\" class=\"me-1\">Items per page</label>\n          <input id=\"itemsPerPage\" type=\"number\" min=\"1\" max=\"50\" [(ngModel)]=\"itemsPerPage\" (change)=\"onPaginationChange()\" class=\"no-border\" />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-11\">\n            <a class=\"syntax-link\" *ngIf=\"database === 'jdbc'\" href=\"https://en.wikibooks.org/wiki/Structured_Query_Language\" target=\"_blank\">query syntax</a>\n            <a class=\"syntax-link\" *ngIf=\"database === 'orient'\" href=\"https://orientdb.com/docs/3.0.x/sql/\" target=\"_blank\">query syntax</a>\n            <textarea id=\"statement\" class=\"form-control\" rows=\"5\" [(ngModel)]=\"statement\"></textarea>\n        </div>\n        <div class=\"col-md-1\" style=\"text-align: center; align-self: center\">\n            <button class='btn btn-success' (click)=\"execute()\">\n                <span class=\"fa fa-play me-2\" aria-hidden=\"true\"></span> {{'global.actions.execute' | translate}}\n            </button>\n        </div>\n    </div>\n    <div class=\"col-md-12\" style=\"overflow-x: auto;\">\n        <chutney-error-panel [errorMessage]=\"errorMessage\"></chutney-error-panel>\n        <chutney-error-panel [errorMessage]=\"sqlResult.error\"></chutney-error-panel>\n        <div [hidden]=\"sqlResult.updatedRows === undefined || sqlResult.updatedRows === null\" style=\"margin-bottom: 5px;\">\n            {{sqlResult.updatedRows}} {{'admin.database.updated_rows' | translate}}\n        </div>\n        <chutney-table-panel [table]=\"sqlResult.table\" [paginationInstanceConfig]=\"paginate ? paginationInstanceConfig : undefined\" (pageChangeEvent)=\"pageChange($event)\"></chutney-table-panel>\n    </div>\n</div>\n"
        },
        {
            "name": "DatasetEditionComponent",
            "id": "component-DatasetEditionComponent-92972e1c04253523b321144f19cf9f670a73d51a456194d553fe593596d04971eb86336977856a8298ffb21b979bcbea4735791e2a1b9784e167dfc19ca95b85",
            "file": "src/app/modules/dataset/components/dataset-edition/dataset-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-dataset-edition",
            "styleUrls": [
                "./dataset-edition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dataset-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "'keyValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "dataset",
                    "defaultValue": "new Dataset('', '', [], new Date(), [], [], 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dataset",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "datasetForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dataSetName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dataSetName'"
                        }
                    ]
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "modificationsSaved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "previousDataSet",
                    "defaultValue": "this.dataset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dataset",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "savedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canDeactivatePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                },
                {
                    "name": "createDataset",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dataSetNameFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteDataset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentDataSet",
                    "args": [
                        {
                            "name": "res",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unloadNotification",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { delay } from '@shared/tools';\nimport { CanDeactivatePage } from '@core/guards';\nimport { DataSetService } from '@core/services';\nimport { ValidationService } from '../../../../molecules/validation/validation.service';\nimport { Dataset, KeyValue } from '@model';\n\n@Component({\n    selector: 'chutney-dataset-edition',\n    templateUrl: './dataset-edition.component.html',\n    styleUrls: ['./dataset-edition.component.scss']\n})\nexport class DatasetEditionComponent extends CanDeactivatePage implements OnInit, OnDestroy, AfterViewInit {\n\n    dataset: Dataset = new Dataset('', '', [], new Date(), [], [], 0);\n\n    activeTab = 'keyValue';\n    datasetForm: FormGroup;\n    private routeParamsSubscription: Subscription;\n    private previousDataSet: Dataset = this.dataset;\n    private modificationsSaved = false;\n    message;\n    private savedMessage: string;\n\n    @ViewChild('dataSetName') dataSetName: ElementRef;\n\n    constructor(private dataSetService: DataSetService,\n                private router: Router,\n                private route: ActivatedRoute,\n                private validationService: ValidationService,\n                private translate: TranslateService,\n                private formBuilder: FormBuilder,\n                private location: Location) {\n        super();\n    }\n\n    ngOnInit(): void {\n\n        this.datasetForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            description: '',\n            tags: [],\n            keyValues: new FormControl(),\n            multiKeyValues: new FormControl()\n        });\n\n        this.routeParamsSubscription = this.route.params.subscribe((params) => {\n            this.load(params['id']);\n        });\n\n        this.initTranslation();\n\n    }\n\n    ngAfterViewInit(): void {\n        this.dataSetNameFocus();\n    }\n\n    private initTranslation() {\n        this.translate.get('global.actions.done.saved').subscribe((res: string) => {\n            this.savedMessage = res;\n        });\n    }\n\n    ngOnDestroy() {\n        this.routeParamsSubscription.unsubscribe();\n    }\n\n    load(id) {\n        if (id != null) {\n            this.dataSetService.findById(id).subscribe(\n                (res) => {\n                    this.setCurrentDataSet(res);\n                }\n            );\n        }\n    }\n\n    private setCurrentDataSet(res) {\n        this.dataset = res;\n        this.previousDataSet = this.dataset;\n        this.datasetForm.controls['name'].patchValue(this.dataset.name);\n        this.datasetForm.controls['description'].patchValue(this.dataset.description);\n        this.datasetForm.controls['tags'].patchValue(this.dataset.tags.join(', '));\n        this.datasetForm.controls['keyValues'].patchValue(this.dataset.uniqueValues);\n        this.datasetForm.controls['multiKeyValues'].patchValue(this.dataset.multipleValues);\n    }\n\n    isValid(): boolean {\n        return this.validationService.isNotEmpty(this.datasetForm.value['name']);\n    }\n\n    save() {\n        const dataset = this.createDataset();\n        this.dataSetService.save(dataset)\n            .subscribe( (res) => {\n                this.setCurrentDataSet(res);\n                this.location.replaceState('/dataset/' + this.dataset.id + '/edition');\n                this.notify(this.savedMessage);\n                this.modificationsSaved = true;\n            });\n    }\n\n    notify(message: string) {\n        (async () => {\n            this.message = message;\n            await delay(3000);\n            this.message = null;\n        })();\n    }\n\n    canDeactivatePage(): boolean {\n        return this.modificationsSaved || this.createDataset().equals(this.previousDataSet);\n    }\n\n    cancel() {\n        this.router.navigateByUrl('/dataset');\n    }\n\n    selectTab(tab: string) {\n        this.activeTab = tab;\n    }\n\n    deleteDataset() {\n        this.dataSetService.delete(this.dataset.id).subscribe(\n            () => {\n                this.modificationsSaved = true;\n                this.router.navigateByUrl('/dataset');\n            },\n            error => console.log(error));\n    }\n\n    private createDataset() {\n        const name = this.datasetForm.value['name'] ? this.datasetForm.value['name'] : '';\n        const desc = this.datasetForm.value['description'] ? this.datasetForm.value['description'] : '';\n        const tags = this.datasetForm.value['tags'] ? this.datasetForm.value['tags'].split(',') : [];\n        const date = new Date();\n\n        const kv = this.datasetForm.controls['keyValues'] as FormArray;\n        const keyValues = kv.value ? kv.value.map((p) => new KeyValue(p.key, p.value)) : [];\n\n        const mkv = this.datasetForm.controls['multiKeyValues'] as FormArray;\n        const multiKeyValues = mkv.value ? mkv.value.map(a => a.map((p) => new KeyValue(p.key, p.value))) : [];\n\n        const version = this.dataset.id ? this.dataset.version : 0;\n        const id = this.dataset.id ? this.dataset.id : null;\n\n        return new Dataset(\n            name,\n            desc,\n            tags,\n            date,\n            keyValues,\n            multiKeyValues,\n            version,\n            id\n        );\n    }\n\n    private dataSetNameFocus(): void {\n        if (this.dataset.id == null || this.dataset.id.length === 0) {\n            this.dataSetName.nativeElement.focus();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box2 {\n    display: inline-block;\n    margin: 1em;\n}\n\n.notification {\n    position: absolute;\n    top: 0;\n    padding: 2px;\n    width: 100%;\n}\n\n.notification:empty\n{\n    display:none;\n}\n",
                    "styleUrl": "./dataset-edition.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataSetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "dataSetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CanDeactivatePage",
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"notification text-center bg-info text-white\">\n    <strong *ngIf=\"message\">{{ message }}</strong>\n</div>\n<div class=\"p-3\">\n    <ng-container [formGroup]=\"datasetForm\">\n        <div class=\"box2\">\n            <input #dataSetName id=\"datasetName\" class=\"form-control\" placeholder=\"Name\" formControlName=\"name\" required/>\n        </div>\n        <div class=\"box2\">\n            <input id=\"datasetDescription\" class=\"form-control\" placeholder=\"Description\" formControlName=\"description\"/>\n        </div>\n        <div class=\"box2\">\n            <input id=\"datasetTags\"  class=\"form-control\" placeholder=\"Tags\" formControlName=\"tags\"/>\n        </div>\n\n        <div class=\"box2\">\n            <button type=\"button\" [disabled]=\"!isValid()\" (click)=\"save()\" class=\"btn btn-success m-2\">\n                <span class=\"fa fa-check\"></span>&nbsp;\n                <span>{{ 'global.actions.record' | translate }}</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary m-2\" (click)=\"cancel()\">\n                <span class=\"fa fa-times\"></span>&nbsp;\n                <span>{{ 'global.actions.cancel' | translate }}</span>\n            </button>\n        </div>\n\n        <div *ngIf=\"dataset.name\" class=\"box2 float-end\">\n            <chutney-delete-confirm-dialog\n                [dialogMessage]=\"('global.confirm.question' | translate) + ' ' + ('global.actions.delete' | translate) + '\\n' + dataset.name\"\n                [label]=\"'Delete dataset'\"\n                [disabled]=\"null\"\n                (deleteEvent)=\"deleteDataset()\">\n            </chutney-delete-confirm-dialog>\n            <span class=\"ms-4\">v{{dataset.version}} - {{ dataset.lastUpdated.toString() | amLocale:'fr' | amTimeAgo }}</span>\n        </div>\n\n        <div>\n            <ul class=\"nav nav-tabs\">\n                <li class=\"nav-item pointer\">\n                    <a class=\"nav-link\" [ngClass]=\"{ 'active':activeTab==='keyValue'}\"\n                       (click)=\"selectTab('keyValue')\"><span class=\"fa fa-list\" aria-hidden=\"true\"></span></a>\n                </li>\n                <li class=\"nav-item pointer\">\n                    <a class=\"nav-link\" [ngClass]=\"{ 'active':activeTab==='multiKeyValue'}\"\n                       (click)=\"selectTab('multiKeyValue')\"><span class=\"fa fa-th\" aria-hidden=\"true\"></span></a>\n                </li>\n            </ul>\n\n            <div class=\"tab-content clearfix\">\n                <div class=\"tab-pane\" id=\"keyValue\" [ngClass]=\"{ 'active':activeTab==='keyValue'}\">\n                    <chutney-forms-key-value formControlName=\"keyValues\"></chutney-forms-key-value>\n                </div>\n                <div class=\"tab-pane\" id=\"mulitKeyValue\" [ngClass]=\"{ 'active':activeTab==='multiKeyValue'}\">\n                    <chutney-forms-data-grid formControlName=\"multiKeyValues\"></chutney-forms-data-grid>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "DatasetListComponent",
            "id": "component-DatasetListComponent-b8379c554c50f6a9353794fbe6f5b905dacf4433bfc3026cc28b92d9dfd4dc0e1e665312aa9fb020c167d4244856d408710f57f526def51016e8d1597a9599b8",
            "file": "src/app/modules/dataset/components/dataset-list/dataset-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-dataset-list",
            "styleUrls": [
                "./dataset-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dataset-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dataSetFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "datasets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Dataset>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "itemList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "preview",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dataset",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "settings",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "filterSearchChange",
                    "args": [
                        {
                            "name": "searchFilter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchFilter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemDeSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemDeSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemSelect",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPreview",
                    "args": [
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "Dataset",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { newInstance } from '@shared/tools';\nimport { distinct, flatMap } from '@shared/tools/array-utils';\nimport { DataSetService } from '@core/services';\nimport { Dataset, Authorization } from '@model';\n\n@Component({\n    selector: 'chutney-dataset-list',\n    templateUrl: './dataset-list.component.html',\n    styleUrls: ['./dataset-list.component.scss']\n})\nexport class DatasetListComponent implements OnInit {\n\n    datasets: Array<Dataset> = [];\n\n    preview: Dataset = null;\n\n    dataSetFilter = '';\n    itemList = [];\n    settings = {};\n    selectedTags: string[] = [];\n    selectedItem: any[];\n\n    Authorization = Authorization;\n\n    constructor(\n        private dataSetService: DataSetService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.dataSetService.findAll().subscribe(\n            (res) => {\n                this.datasets = res;\n                this.initTags();\n            },\n            (error) => console.log(error)\n        );\n\n        this.settings = {\n            enableCheckAll: false,\n            autoPosition: false\n        };\n    }\n\n    showPreview(dataset: Dataset) {\n        if (this.preview == null || this.preview.id !== dataset.id) {\n            this.dataSetService.findById(dataset.id).subscribe(\n                (res) => {\n                    this.preview = res;\n                },\n                (error) => console.log(error)\n            );\n        } else {\n            this.preview = null;\n        }\n    }\n\n    private initTags() {\n        const allTagsInDataset: string[] = distinct(flatMap(this.datasets, (sc) => sc.tags)).sort();\n        let index = 0;\n        this.itemList = allTagsInDataset.map(t => {\n            index++;\n            return { 'id': index, 'itemName': t };\n        });\n    }\n\n    filterSearchChange(searchFilter: string) {\n        this.dataSetFilter = searchFilter;\n    }\n\n    onItemSelect(item: any) {\n        this.selectedTags.push(item.itemName);\n        this.selectedTags = newInstance(this.selectedTags);\n    }\n\n    onItemDeSelect(item: any) {\n        this.selectedTags.splice(this.selectedTags.indexOf(item.itemName), 1);\n        this.selectedTags = newInstance(this.selectedTags);\n    }\n\n    onItemDeSelectAll() {\n        this.selectedTags = newInstance([]);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .arrow {\n            margin-top: -8px !important;\n\n            &::after {\n                border-left-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n    }\n}\n",
                    "styleUrl": "./dataset-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataSetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dataSetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-3\">\n    <div class=\"row\">\n        <div class=\"col-md-5\">\n            <chutney-forms-search-field [id]=\"'dataset-search'\" [placeholder]=\"'global.actions.search' | translate\"\n                                        (searchInputEvent)=\"filterSearchChange($event)\">\n            </chutney-forms-search-field>\n        </div>\n        <div class=\"col-md-4\">\n            <button *hasAuthorization=\"[Authorization.DATASET_WRITE]\"\n                type=\"button\" class=\"btn btn-outline-primary\" [routerLink]=\"['/dataset', 'edition']\"\n            >\n                <span class=\"fa fa-plus\" aria-hidden=\"true\"></span> {{ 'global.actions.create' | translate }}\n            </button>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <angular2-multiselect [data]=\"itemList\"\n                                  [settings]=\"settings\"\n                                  (onSelect)=\"onItemSelect($event)\"\n                                  (onDeSelect)=\"onItemDeSelect($event)\"\n                                  (onDeSelectAll)=\"onItemDeSelectAll()\"\n                                  [(ngModel)]=\"selectedItem\"\n            >\n            </angular2-multiselect>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div [ngClass]=\"preview ? 'col-md-8' : 'col'\">\n            <table class=\"table table-sm table-striped table-hover\">\n                <thead>\n                <tr>\n                    <th scope=\"col\" class=\"w10\">&nbsp;</th>\n                    <th scope=\"col\" class=\"w25\">Name</th>\n                    <th scope=\"col\" class=\"w10\">Tags</th>\n                    <th scope=\"col\" class=\"w40\">Description</th>\n                    <th scope=\"col\" class=\"w15\">LastUpdated</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let dataset of (datasets |  dataSetSearch : selectedTags | searchTextPipe  : dataSetFilter : ['name', 'description'])\"\n                    (click)=\"showPreview(dataset)\"\n                    style=\"cursor: pointer\">\n\n                    <td>\n                        <button *hasAuthorization=\"[Authorization.DATASET_WRITE]\"\n                                type=\"button\" class=\"btn btn-outline-primary btn-sm\"\n                                [routerLink]=\"['/dataset', dataset.id, 'edition']\">\n                            <span class=\"fa fa-pencil-alt\"\n                                  aria-hidden=\"true\"></span> {{ 'global.actions.edit' | translate }}\n                        </button>\n                    </td>\n                    <td><span>{{dataset.name}}</span></td>\n\n                    <td>\n                        <span *ngIf=\"dataset.tags.length <= 3\">\n                            <span *ngFor=\"let tag of dataset.tags\"\n                                  class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                        </span>\n                        <span *ngIf=\"dataset.tags.length > 3\">\n                            <span *ngFor=\"let tag of dataset.tags | slice:0:2\"\n                                  class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                            <button type=\"button\" class=\"chutney-tag chutney-tag-selected\"\n                                    ngbPopover=\"{{dataset.tags}}\" placement=\"left\"\n                                    triggers=\"mouseenter:mouseleave\">\n                                ...\n                            </button>\n                        </span>\n                    </td>\n                    <td><span>{{dataset.description}}</span></td>\n                    <td><span>{{dataset.lastUpdated | amDateFormat: 'YYYY-MM-DD HH:mm'}}</span></td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n        <div *ngIf=\"preview\" class=\"col-md-4 border pt-2 ps-3 pe-2\" style=\"overflow-y: auto;overflow-x: auto;\">\n            <button type=\"button\" class=\"btn-close float-end\" aria-label=\"Close\" (click)=\"preview = null\">\n            </button>\n            <span>{{preview.name}}</span>\n            <div *ngFor=\"let uniqueValue of preview.uniqueValues\">\n                <span>{{uniqueValue.key}}: {{uniqueValue.value}}</span>\n            </div>\n            <div class=\"row\">\n                <table class=\"table table-sm table-striped table-hover\">\n                    <thead>\n                    <tr>\n                        <th *ngFor=\"let header of preview.getMultipleValueHeader()\">{{ header }}</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr *ngFor=\"let multipleValue of preview.multipleValues\">\n                        <td *ngFor=\"let value of multipleValue\">{{ value.value }}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"scrollbar scrollbar-primary\">\n\n</div>\n"
        },
        {
            "name": "DatasetSelectionComponent",
            "id": "component-DatasetSelectionComponent-4595e35849d722de077497bdcd7476434b1d7ea3004d90ad1e0244471dce1859be2604375e66eb7f39056ec99d08cd5a1e9ace17eefb5072f18330490f2c5160",
            "file": "src/app/shared/components/dataset-selection/dataset-selection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-dataset-selection",
            "styleUrls": [
                "./dataset-selection.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dataset-selection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedDatasetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "String",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "datasets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Dataset>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changingValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DataSetService } from '@core/services';\nimport { Dataset } from '@model';\n\n\n@Component({\n    selector: 'chutney-dataset-selection',\n    templateUrl: './dataset-selection.component.html',\n    styleUrls: ['./dataset-selection.component.scss']\n})\nexport class DatasetSelectionComponent implements OnInit {\n\n    @Input() selectedDatasetId: String;\n    @Output() selectionEvent = new EventEmitter();\n\n    datasets: Array<Dataset>;\n\n    constructor(private datasetService: DataSetService) {\n    }\n\n    ngOnInit(): void {\n        this.datasetService.findAll().subscribe((res: Array<Dataset>) => {\n            this.datasets = res;\n        });\n    }\n\n    changingValue(event: any) {\n        this.selectionEvent.emit(event.target.value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dataset-combo {\n    min-width:200px;\n    display: inline-block;\n}\n",
                    "styleUrl": "./dataset-selection.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datasetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "datasetService",
                        "type": "DataSetService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<select class=\"form-select dataset-combo\" (change)=\"changingValue($event)\">\n    <option value=\"\"></option>\n    <option *ngFor=\"let dataset of datasets\" [selected]=\"dataset.id === selectedDatasetId\"\n            [title]=\"dataset.description\" [value]=\"dataset.id\">\n        {{ dataset.name }}\n    </option>\n</select>\n"
        },
        {
            "name": "DeleteConfirmDialogComponent",
            "id": "component-DeleteConfirmDialogComponent-97861387bb8372dc60c4e9e65d7e10fbe9eefe4a12ac8856e4540a1393f317d5c172bfcd7f7445ae934f040e681dd2ede027d58a2797f359b7adb329ed667d81",
            "file": "src/app/molecules/dialog/delete-confirm-dialog/delete-confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-delete-confirm-dialog",
            "styleUrls": [
                "./delete-confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnClassIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "btnColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "btnSizeClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dialogMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'trash-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disabledBoolean",
                    "defaultValue": "disabledBoolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "decline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { disabledBoolean } from '@shared/tools/bool-utils';\n\n@Component({\n    selector: 'chutney-delete-confirm-dialog',\n    templateUrl: './delete-confirm-dialog.component.html',\n    styleUrls: ['./delete-confirm-dialog.component.scss']\n})\nexport class DeleteConfirmDialogComponent {\n\n    modalRef: BsModalRef;\n    @Input() dialogMessage: string;\n    @Input() type = 'trash-button';\n    @Input() label: string;\n    @Input() title: string;\n    @Input() disabled = false;\n    @Input() btnSizeClass: string;\n    @Input() btnClassIcon: string;\n    @Input() btnColor: string;\n    @Output() deleteEvent = new EventEmitter();\n\n    disabledBoolean = disabledBoolean;\n\n    constructor(private modalService: BsModalService) {\n    }\n\n    openModal(template: TemplateRef<any>) {\n        this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n        document.getElementById('no-btn').focus();\n    }\n\n    confirm(): void {\n        this.modalRef.hide();\n        this.deleteEvent.emit();\n    }\n\n    decline(): void {\n        this.modalRef.hide();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./delete-confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button *ngIf=\"type === 'trash-button'\" type=\"button\" class=\"btn{{btnSizeClass ? '-' + btnSizeClass : ''}} btn btn-{{btnColor ? btnColor : 'danger'}} trash-btn\"\n        (click)=\"openModal(template)\"\n        title=\"{{title ? title : 'global.actions.delete' | translate}}\"\n        [attr.disabled]=\"disabledBoolean(disabled)\">\n    <span class=\"fa {{btnClassIcon ? btnClassIcon : 'fa-trash'}}\"></span>\n</button>\n<chutney-link *ngIf=\"type === 'link'\" [model]=\"label\" (click)=\"openModal(template)\">\n</chutney-link>\n<ng-template #template>\n    <div class=\"modal-body text-center\">\n        <p>{{dialogMessage ? dialogMessage : ('global.confirm.delete' | translate)}}</p>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"confirm()\">{{'global.confirm.yes' | translate}}</button>\n        <button id=\"no-btn\" type=\"button\" class=\"btn btn-primary\" (click)=\"decline()\">{{'global.confirm.no' | translate}}</button>\n    </div>\n</ng-template>\n"
        },
        {
            "name": "DocumentationComponent",
            "id": "component-DocumentationComponent-64501df83b8fd676ecb29f600777370cf6acc2af4c3353377e5f9de14aca5d0b60c3ced03be05cb4d3a00979b2233dd64422b6be30b36717069c3a38f8898969",
            "file": "src/app/organisms/documentation/documentation.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-doc-page",
            "styleUrls": [
                "./documentation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./documentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "documentation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'chutney-doc-page',\n  templateUrl: './documentation.component.html',\n  styleUrls: ['./documentation.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DocumentationComponent implements OnInit {\n\n  documentation: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    fetch('/assets/doc/user_manual.adoc')\n    .then(response => response.text())\n    .then((data) => {\n      this.documentation = data;\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".documentation {\n  padding: 25px;\n}\n",
                    "styleUrl": "./documentation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"documentation\">\n  <chutney-asciidoctor [doc]=\"documentation\" [tocLeft]=\"true\" [tocScrollHack]=\"true\">\n  </chutney-asciidoctor>\n</div>\n"
        },
        {
            "name": "EditableBadgeComponent",
            "id": "component-EditableBadgeComponent-af865ed2055269dd51dd45d488cdeb14681bda2937354ead93443b2059c6ff210c52534077c434add49c3ae58ba5329495c1dc687786c651cbff7d9d47584dcc",
            "file": "src/app/molecules/forms/editable-badge/editable-badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-editable-badge",
            "styleUrls": [
                "./editable-badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editable-badge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxlength",
                    "defaultValue": "150",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'simple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'chutney-forms-editable-badge',\n  templateUrl: './editable-badge.component.html',\n  styleUrls: ['./editable-badge.component.scss']\n})\nexport class EditableBadgeComponent {\n\n    editMode = false;\n\n    @Input() id: string;\n    @Input() placeholder: string;\n    @Input() type = 'simple';\n    @Input() model: string;\n    @Input() maxlength = 150;\n    @Input() defaultValue = '';\n    @Output() modelChange = new EventEmitter<string>();\n\n    constructor() { }\n\n    onInputChange(newValue: string) {\n        this.model = newValue;\n        this.modelChange.emit(this.model);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n    .editable-field {\n        border-radius: 2px;\n        transition: box-shadow 150ms ease-in 0ms;\n        display: inline-block;\n        cursor: text;\n        padding-left: 2px;\n  \n        &:hover {\n            box-shadow: 0 0 0 1px #ccc;\n\n            .overlay-icon {\n                -webkit-transition: opacity 150ms ease-in 0ms;\n                transition: opacity 150ms ease-in 0ms;\n                opacity: 1;\n            }\n        }\n\n        .overlay-icon {\n            background-color: #f0f0f0;\n            opacity: 0;\n            border-left: 1px solid #ccc;\n            padding-left: 5px;\n            box-sizing: border-box;\n            vertical-align: top;\n            cursor: pointer;\n        }\n    }\n\n    input {\n        width: 90%;\n    }\n}\n\n@mixin input-size($font-size, $font-weight, $padding-top) {\n    .editable-field {\n        font-size: $font-size;\n        font-weight: $font-weight;\n\n        .overlay-icon {\n            width: $font-size * 1,5;\n            font-size: $font-size;\n            padding-top: $padding-top;\n            padding-bottom: $padding-top + 4px;\n            padding-right: $padding-top;\n        }\n    }\n    input {\n        font-size: $font-size;\n    }\n}\n\n.simple { @include input-size(16px, 200, 3px); }\n\n.form-title { @include input-size(24px, 400, 7px); }",
                    "styleUrl": "./editable-badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<div class=\"row {{type}}\">\n        <div class=\"editable-field\" (click)=\"editMode = true\" *ngIf=\"!editMode\">\n            <span>{{model}}</span>\n            <span class=\"fa fa-pencil-alt overlay-icon\"></span>\n        </div>\n        <input\n            *ngIf=\"editMode\"\n            type=\"text\"\n            id=\"{{id}}\"\n            placeholder=\"{{placeholder}}\"\n            maxlength=\"{{maxlength}}\"\n            value=\"{{defaultValue}}\"\n            [ngModel]=\"model\"\n            (ngModelChange)=\"onInputChange($event)\"\n            chutneyFocusOnShow\n            (focusout)=\"editMode = false\"/>\n    </div>\n"
        },
        {
            "name": "EditableLabelComponent",
            "id": "component-EditableLabelComponent-76772ee115bf168ac189000fa18716213dca5bbd069000a0bdca2c627c6d7d963ffb25ec72d448b0969cd23caa4b535b2270e606ccbb458b4108b8102df053c8",
            "file": "src/app/molecules/forms/editable-label/editable-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-editable-label",
            "styleUrls": [
                "./editable-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editable-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxlength",
                    "defaultValue": "150",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'simple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'chutney-forms-editable-label',\n  templateUrl: './editable-label.component.html',\n  styleUrls: ['./editable-label.component.scss']\n})\nexport class EditableLabelComponent {\n\n    editMode = false;\n\n    @Input() id: string;\n    @Input() placeholder: string;\n    @Input() type = 'simple';\n    @Input() model: string;\n    @Input() maxlength = 150;\n    @Input() defaultValue = '';\n    @Output() modelChange = new EventEmitter<string>();\n\n    constructor() { }\n\n    onInputChange(newValue: string) {\n        this.model = newValue;\n        this.modelChange.emit(this.model);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n    .editable-field {\n        border-radius: 2px;\n        transition: box-shadow 150ms ease-in 0ms;\n        display: inline-block;\n        cursor: text;\n        padding-left: 2px;\n\n        &:hover {\n            box-shadow: 0 0 0 1px #ccc;\n\n            .overlay-icon {\n                -webkit-transition: opacity 150ms ease-in 0ms;\n                transition: opacity 150ms ease-in 0ms;\n                opacity: 1;\n            }\n        }\n\n        .overlay-icon {\n            background-color: #f0f0f0;\n            opacity: 0;\n            border-left: 1px solid #ccc;\n            padding-left: 5px;\n            box-sizing: border-box;\n            vertical-align: top;\n            cursor: pointer;\n        }\n    }\n\n    input {\n        width: 90%;\n    }\n}\n\n@mixin input-size($font-size, $font-weight, $padding-top) {\n    .editable-field {\n        font-size: $font-size;\n        font-weight: $font-weight;\n\n        .overlay-icon {\n            width: $font-size * 1,5;\n            font-size: $font-size;\n            padding-top: $padding-top;\n            padding-bottom: $padding-top + 4px;\n            padding-right: $padding-top;\n        }\n    }\n    input {\n        font-size: $font-size;\n    }\n}\n\n.simple { @include input-size(16px, 200, 3px); }\n\n.form-title { @include input-size(24px, 400, 7px); }\n",
                    "styleUrl": "./editable-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "templateData": "<div class=\"row {{type}}\">\n    <div class=\"editable-field\" (click)=\"editMode = true\" *ngIf=\"!editMode\">\n        <span class=\"input-lbl\">{{model}}</span>\n        <span class=\"fa fa-pencil-alt overlay-icon\"></span>\n    </div>\n    <input\n        *ngIf=\"editMode\"\n        type=\"text\"\n        id=\"{{id}}\"\n        placeholder=\"{{placeholder}}\"\n        maxlength=\"{{maxlength}}\"\n        value=\"{{defaultValue}}\"\n        [ngModel]=\"model\"\n        (ngModelChange)=\"onInputChange($event)\"\n        chutneyFocusOnShow\n        (focusout)=\"editMode = false\"/>\n</div>\n"
        },
        {
            "name": "EditableTextAreaComponent",
            "id": "component-EditableTextAreaComponent-8c0c7da402aaa440b444aa6f77ec3718125c04c67dbebd832591c3d70ede85b93fd1bd0f2f4d5daefd3223916815d89c1c098a88d13bf4f5fc3ed1ae8f281da6",
            "file": "src/app/molecules/forms/editable-text-area/editable-text-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-editable-text-area",
            "styleUrls": [
                "./editable-text-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editable-text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'simple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'chutney-forms-editable-text-area',\n  templateUrl: './editable-text-area.component.html',\n  styleUrls: ['./editable-text-area.component.scss']\n})\nexport class EditableTextAreaComponent {\n\n    editMode = false;\n\n    @Input() id: string;\n    @Input() placeholder: string;\n    @Input() type = 'simple';\n    @Input() model: string;\n    @Input() defaultValue = '';\n    @Output() modelChange = new EventEmitter<string>();\n\n    constructor() { }\n\n    onInputChange(newValue: string) {\n        this.model = newValue;\n        this.modelChange.emit(this.model);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n    .editable-field {\n        border-radius: 2px;\n        transition: box-shadow 150ms ease-in 0ms;\n        display: inline-block;\n        cursor: text;\n        padding-left: 2px;\n\n        &:hover {\n            box-shadow: 0 0 0 1px #ccc;\n\n            .overlay-icon {\n                -webkit-transition: opacity 150ms ease-in 0ms;\n                transition: opacity 150ms ease-in 0ms;\n                opacity: 1;\n            }\n        }\n\n        .overlay-icon {\n            background-color: #f0f0f0;\n            opacity: 0;\n            border-left: 1px solid #ccc;\n            padding-left: 5px;\n            box-sizing: border-box;\n            vertical-align: top;\n            cursor: pointer;\n        }\n    }\n\n    textarea {\n        width: 100%;\n        resize: none;\n    }\n}\n\n@mixin input-size($font-size, $font-weight, $padding-top) {\n    .editable-field {\n        font-size: $font-size;\n        font-weight: $font-weight;\n\n        .overlay-icon {\n            width: $font-size * 1,5;\n            font-size: $font-size;\n            padding-top: $padding-top;\n            padding-bottom: $padding-top + 4px;\n            padding-right: $padding-top;\n        }\n    }\n    input {\n        font-size: $font-size;\n    }\n}\n\n.simple { @include input-size(16px, 200, 3px); }\n\n.form-title { @include input-size(24px, 400, 7px); }",
                    "styleUrl": "./editable-text-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "templateData": "<div class=\"row {{type}}\">\n        <div class=\"editable-field\" (click)=\"editMode = true\" *ngIf=\"!editMode\">\n            <span class=\"input-lbl\">{{model}}</span>\n            <span class=\"fa fa-pencil-alt overlay-icon\"></span>\n        </div>\n        <textarea\n            *ngIf=\"editMode\"\n            type=\"text\"\n            id=\"{{id}}\"\n            placeholder=\"{{placeholder}}\"\n            value=\"{{defaultValue}}\"\n            [ngModel]=\"model\"\n            (ngModelChange)=\"onInputChange($event)\"\n            chutneyFocusOnShow\n            (focusout)=\"editMode = false\">\n        </textarea>\n    </div>\n"
        },
        {
            "name": "EditionInfoComponent",
            "id": "component-EditionInfoComponent-11737c27180c50c2788f7d654642461dc27fb7ec09562862a55be0d98c352bd594263435cb1303ba7fca3e897bf4353dd6178262153aade023089cd88f7c7581",
            "file": "src/app/modules/scenarios/components/edition/edition-info/edition-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-edition-info",
            "styleUrls": [
                "./edition-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edition-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "testCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestCaseEdition",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "editions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<TestCaseEdition>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload'"
                        }
                    ],
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, SimpleChanges, Input, OnChanges, OnDestroy } from '@angular/core';\n\nimport { EditionService } from '@core/services';\nimport { TestCaseEdition } from '@model';\n\n@Component({\n    selector: 'chutney-edition-info',\n    templateUrl: './edition-info.component.html',\n    styleUrls: ['./edition-info.component.scss']\n})\nexport class EditionInfoComponent implements OnChanges, OnDestroy {\n    @Input() testCase;\n\n    edition: TestCaseEdition;\n    editions: Array<TestCaseEdition> = [];\n\n    constructor(private editionService: EditionService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.testCase && this.testCase.id) {\n            const id = this.testCase.id;\n            this.editionService.editTestCase(id).subscribe(\n                edition => {\n                    this.edition = edition;\n                    this.editionService.findAllTestCaseEditions(id).subscribe(\n                        editions => { this.editions = editions.filter(e => e.editionUser != edition.editionUser); }\n                    );\n                },\n                error => {\n                    console.log(error);\n                }\n            );\n        }\n    }\n\n    @HostListener('window:beforeunload')\n    async ngOnDestroy() {\n        if (this.testCase.id != null) {\n            await this.editionService.endTestCaseEdition(this.testCase.id)\n                .toPromise();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'node_modules/bootstrap/scss/bootstrap';\n@import 'colors';\n@import 'mixins';\n@import 'animations';\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .arrow {\n            &::after {\n                border-bottom-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n    }\n}\n\n@include box-shadow-animation(\n  $animation_name: edition-btn-anim,\n  $fromOffsetX: 4px,\n  $fromOffsetY: 4px,\n  $fromBlur: 8px,\n  $fromSpread: 0,\n  $fromColor: rgba($warning, 30),\n  $toOffsetX: 8px,\n  $toOffsetY: 8px,\n  $toBlur: 16px,\n  $toSpread: 0,\n  $toColor: rgba($danger, 30)\n);\n\n.edition-btn-anim {\n    @include animation(\n        $animation_name: edition-btn-anim,\n        $animation_duration: 1000ms,\n        $animation_timing-function: linear,\n        $animation_iteration-count: infinite,\n        $animation_direction: alternate);\n}\n",
                    "styleUrl": "./edition-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "editionService",
                        "type": "EditionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "editionService",
                        "type": "EditionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"edition\">\n    <ng-template #editionsInfo>\n        <div>\n            <div class=\"row m-0 text-nowrap justify-content-center\">\n                <label class=\"form-control-label m-0 fw-bold\">Edition depuis</label>\n                <span class=\"form-control border-0 text-center\">{{ edition.editionStartDate  | amDateFormat:'YYYY-MM-DD HH:mm:ss' }}</span>\n            </div>\n            <ng-container *ngIf=\"editions && editions.length > 0\">\n                <div class=\"row mb-0 text-nowrap justify-content-center fw-bold\">Editions concurrentes</div>\n                <div *ngFor=\"let e of editions\" class=\"row m-0 mb-1 bg-warning text-white text-nowrap border border-white rounded fw-bold\">\n                    <div class=\"col-4 p-0 ps-1 m-0 text-left\">{{ e.editionUser }}</div>\n                    <div class=\"col-8 p-0 pe-1 m-0 text-right\">{{ e.editionStartDate | amDateFormat:'YYYY-MM-DD HH:mm:ss' }}</div>\n                </div>\n            </ng-container>\n        </div>\n    </ng-template>\n    <button type=\"button\" class=\"btn me-0\"\n            [ngClass]=\"editions && editions.length > 0 ? 'btn-warning edition-btn-anim' : 'btn-info'\"\n            [ngbPopover]=\"editionsInfo\" placement=\"bottom\"\n            triggers=\"mouseenter:mouseleave\">\n        <span class=\"fa fa-pen-square\" aria-hidden=\"true\"></span>\n    </button>\n</ng-container>\n"
        },
        {
            "name": "EnvironmentAdminComponent",
            "id": "component-EnvironmentAdminComponent-7b6df53dbe493474535f5cd65af68093b65b16ba3a66fb562f6962f4e068eb10f5196c5044aa811407760457148bb32b7b0463adcad9a8acbf8ed9cae48cdf6e",
            "file": "src/app/organisms/environment-admin/environment-admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-environment-admin",
            "styleUrls": [
                "./environment-admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "envForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentMetadata[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "environmentsNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "envUpdate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "help",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "reloading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedEnvironment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentMetadata",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedTarget",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Target",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedTargetName",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "targetFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "targets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Target>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "validationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addTarget",
                    "args": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelSelectedTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changingValue",
                    "args": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delay",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTarget",
                    "args": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findDuplicate",
                    "args": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Target[]",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findDuplicateEnv",
                    "args": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentMetadata[]",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importEnvironment",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importTarget",
                    "args": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForUpdateEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidEnv",
                    "args": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nameAlreadyExistFor",
                    "args": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "EnvironmentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTarget",
                    "args": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toEnvironment",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EnvironmentMetadata>",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTarget",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Target>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTarget",
                    "args": [
                        {
                            "name": "oldTargetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newTarget",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oldTargetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newTarget",
                            "type": "Target",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscriber } from 'rxjs';\nimport { FileSaverService } from 'ngx-filesaver';\n\nimport { EnvironmentMetadata, Target } from '@model';\nimport { ValidationService } from '../../molecules/validation/validation.service';\nimport { EnvironmentAdminService } from '@core/services';\n\n@Component({\n    selector: 'chutney-environment-admin',\n    templateUrl: './environment-admin.component.html',\n    styleUrls: ['./environment-admin.component.scss']\n})\nexport class EnvironmentAdminComponent implements OnInit {\n\n    errorMessage: string = null;\n    targetFilter = '';\n\n    selectedTargetName: string = null;\n    selectedTarget: Target = null;\n    targets: Array<Target> = [];\n\n    environments: EnvironmentMetadata[];\n    environmentsNames: Array<string>;\n    selectedEnvironment: EnvironmentMetadata;\n    envForm: FormGroup;\n    envUpdate = false;\n    help: boolean;\n    private reloading = false;\n\n    constructor(\n        private environmentAdminService: EnvironmentAdminService,\n        public validationService: ValidationService,\n        private fileSaverService: FileSaverService,\n        private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.loadEnvironment();\n    }\n\n    loadEnvironment() {\n        this.environmentAdminService.listEnvironments().subscribe(\n            (res) => {\n                this.environments = res;\n                this.selectedEnvironment = this.environments[0];\n                this.environmentsNames = res.map(e => e.name);\n                this.loadTarget();\n            },\n            (error) => { this.errorMessage = error.error; },\n            () => { this.reloading = false; }\n        );\n    }\n\n    loadTarget() {\n        if (this.selectedEnvironment) {\n            this.environmentAdminService.listTargets(this.selectedEnvironment.name).subscribe(\n                (res) => {\n                    this.targets = res.sort((t1, t2) =>  t1.name.toUpperCase() > t2.name.toUpperCase() ? 1 : 0);\n                },\n                (error) => { console.log(error); this.errorMessage = error.error; }\n            );\n            this.selectedTarget = null;\n            this.selectedTargetName = null;\n        }\n    }\n\n    selectTarget(target: Target) {\n        this.selectedTarget = target;\n        this.selectedTargetName = target.name;\n    }\n\n    deleteTarget(target: Target) {\n        this.environmentAdminService.deleteTarget(this.selectedEnvironment.name, target.name).subscribe(\n            (res) => {\n                this.loadTarget();\n            },\n            (error) => { console.log(error); this.errorMessage = error.error; }\n        );\n    }\n\n    updateSelectedTarget() {\n        this.updateTarget(this.selectedTargetName, this.selectedTarget);\n    }\n\n    updateTarget(oldTargetName: string, newTarget: Target) {\n        if (!this.isValid(newTarget)) {\n            this.errorMessage = 'Name cannot be empty and url must match xxx://xxxxx:12345';\n        } else {\n\n            this.environmentAdminService.updateTarget(this.selectedEnvironment.name, oldTargetName, newTarget).subscribe(\n                (res) => {\n                    this.selectedTargetName = newTarget.name;\n                    this.loadTarget();\n                },\n                (error) => { console.log(error); this.errorMessage = error.toString(); }\n            );\n\n        }\n    }\n\n    addTarget(target: Target) {\n        this.environmentAdminService.addTarget(this.selectedEnvironment.name, target).subscribe(\n            (savedTarget) => { this.loadTarget(); },\n            (error) => { console.log(error); this.errorMessage = error.error; }\n        );\n    }\n\n    exportTarget() {\n        const fileName = `${this.selectedEnvironment.name}-${this.selectedTarget.name}.chutney.json`;\n        this.environmentAdminService.exportTarget(this.selectedEnvironment.name, this.selectedTarget.name).subscribe(\n            res => { this.fileSaverService.saveText(JSON.stringify(res), fileName); },\n            error => { console.log(error); this.errorMessage = error.error; }\n        );\n    }\n\n    importTarget(files: Array<File>) {\n        files.map(f => this.toTarget(f).subscribe(\n            (t) => {\n                if (!this.isValid(t)) {\n                    this.errorMessage +=\n                        '<br>Error found in ' + f.name + ', target name cannot be empty and url must match xxx://xxxxx:12345';\n                } else {\n                    try {\n                        const duplicates = this.findDuplicate(t);\n                        if (duplicates.length !== 0) {\n                            if (confirm('Target ['  + t.name + '] exists already.\\n\\n Do you want to update it ?')) {\n                                this.updateTarget(duplicates[0].name, t);\n                            }\n                        } else {\n                            this.addTarget(t);\n                            console.log('Upload '  + t.name + ': ' + t.url);\n                        }\n                    } catch ( error ) {\n                        console.error( 'File upload failed.' );\n                        console.error( error );\n                        this.errorMessage += '<br>' + error.toString();\n                    }\n                }\n            }\n        ));\n    }\n\n    private toTarget(file: File): Observable<Target> {\n        return Observable.create(\n            (sub: Subscriber<string>): void => {\n                const r = new FileReader();\n                r.onload = (ev: ProgressEvent): void => {\n                    let target;\n                    try {\n                        target = JSON.parse((ev.target as any).result);\n                    } catch (ex) {\n                        this.errorMessage += '<br>' + 'Error found in: ' + file.name + ' -> ' + ex.toString();\n                    }\n                    sub.next(target);\n                };\n                r.readAsText(file);\n            }\n        );\n    }\n\n    private findDuplicate(target: Target): Target[] {\n        return this.targets.filter(t => Object.is(t.name, target.name));\n    }\n\n    cancelSelectedTarget() {\n        this.selectedTarget = null;\n        this.selectedTargetName = null;\n        this.errorMessage = null;\n    }\n\n    scrollToTop() {\n        window.scroll(0, 0);\n    }\n\n    isValid(target: Target): boolean {\n        return this.validationService.isNotEmpty(target.name)\n            && this.validationService.isValidUrl(target.url);\n    }\n\n    deleteEnvironment() {\n        this.environmentAdminService.deleteEnvironment(this.selectedEnvironment.name).subscribe(\n            (res) => { this.reload(); },\n            (error) => { this.errorMessage = error.error; }\n        );\n    }\n\n    initEnvironment() {\n        this.cancelSelectedTarget();\n        this.envForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            description: ''\n        });\n    }\n\n    initForUpdateEnvironment() {\n        this.cancelSelectedTarget();\n        this.envForm = this.formBuilder.group({\n            name: [this.selectedEnvironment.name, Validators.required],\n            description: this.selectedEnvironment.description\n        });\n        this.envUpdate = true;\n    }\n\n    updateEnvironment () {\n        const name = this.envForm.value['name'];\n        const description = this.envForm.value['description'];\n        if (!this.envUpdate) {\n            this.environmentAdminService.createEnvironment(new EnvironmentMetadata(name, description)).subscribe(\n                (res) => this.reload(),\n                (error) => { console.log(error); this.errorMessage = error.error; }\n            );\n        } else {\n            this.environmentAdminService.updateEnvironment(this.selectedEnvironment.name, new EnvironmentMetadata(name, description))\n            .subscribe(\n                (res) => this.reload(),\n                (error) => { console.log(error); this.errorMessage = error.error; }\n            );\n        }\n    }\n\n    // Import/Export Env------------------------------------------------\n\n\texportEnvironment() {\n        const fileName = `env.${this.selectedEnvironment.name}.chutney.json`;\n        this.environmentAdminService.exportEnvironment(this.selectedEnvironment.name).subscribe(\n            res => { this.fileSaverService.saveText(JSON.stringify(res), fileName); },\n            error => { console.log(error); this.errorMessage = error.error; }\n        );\n    }\n\n    private isValidEnv(env: EnvironmentMetadata): boolean {\n        return this.validationService.isNotEmpty(env.name);\n    }\n\n    private nameAlreadyExistFor(env: EnvironmentMetadata) {\n        const duplicates = this.findDuplicateEnv(env);\n        return duplicates.length !== 0;\n    }\n\n    private findDuplicateEnv(env: EnvironmentMetadata): EnvironmentMetadata[] {\n        return this.environments.filter(e => Object.is(e.name, env.name));\n    }\n\n    importEnvironment(file: File) {\n        this.toEnvironment(file).subscribe(\n            (env) => {\n                if (!this.isValidEnv(env)) {\n                    this.errorMessage +=\n                        '<br>Error found in ' + file.name + ', environment name cannot be empty and url must match xxx://xxxxx:12345';\n                } else {\n                    try {\n                        if (this.nameAlreadyExistFor(env)) {\n                            if (confirm('Environment ['  + env.name + '] exists already.\\n\\n Do you want to update it ?')) {\n                                this.environmentAdminService.updateEnvironment(env.name, env).subscribe(\n                                    (res) => { this.errorMessage = env.name + ' has been updated'; },\n                                    (error) => { this.errorMessage = error.error;}\n                                );\n                            }\n                        } else {\n                            this.environmentAdminService.createEnvironment(env).subscribe(\n                                (res) => {\n                                    this.environments.push(env);\n                                    this.environments.sort((t1, t2) =>  t1.name.toUpperCase() > t2.name.toUpperCase() ? 1 : 0);\n                                    this.errorMessage = env.name + ' has been created';\n                                },\n                                (error) => { this.errorMessage = error.error;}\n                            );\n                        }\n                    } catch ( error ) {\n                        console.error( 'File upload failed.' );\n                        console.error( error );\n                        this.errorMessage += '<br>' + error.toString();\n                    }\n                }\n            }\n        );\n    }\n\n    private toEnvironment(file: File): Observable<EnvironmentMetadata> {\n        return Observable.create(\n            (sub: Subscriber<string>): void => {\n                const r = new FileReader();\n                r.onload = (ev: Event): void => {\n                    let environment;\n                    try {\n                        environment = JSON.parse((ev.target as any).result);\n                    } catch (ex) {\n                        this.errorMessage += '<br>' + 'Error found in: ' + file.name + ' -> ' + ex.toString();\n                    }\n                    sub.next(environment);\n                };\n                r.readAsText(file);\n            }\n        );\n    }\n\n    // Import/Export Env------------------------------------------------\n\n    reload() {\n        this.reloading = true;\n        (async () => {\n            await this.delay(500);\n            this.errorMessage = null;\n            this.envUpdate = null;\n            this.envForm = null;\n            this.loadEnvironment();\n          })();\n\n    }\n\n    delay(ms: number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    cancelEnvironment() {\n        this.envForm = null;\n        this.errorMessage = null;\n    }\n\n    changingValue(envName: string) {\n        if (!this.reloading) {\n            this.errorMessage = null;\n            this.selectedEnvironment = this.environments.filter(e => e.name === envName)[0];\n            this.loadTarget();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.pointer {\n    cursor: pointer;\n}\n\n.sticky-top-admin {\n    position:sticky;\n    top:100px;\n}\n\n.left-panel {\n  width:400px;\n}\n\ntable {\n  table-layout: fixed;\n  width:400px;\n}\n\nth,\ntd {\n  overflow: hidden;\n}\n",
                    "styleUrl": "./environment-admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row m-5 pointer\" *ngIf=\"errorMessage\" (click)=\"errorMessage = null\">\n    <chutney-error-panel [errorMessage]=\"errorMessage\"></chutney-error-panel>\n</div>\n<ng-container *ngIf=\"envForm\">\n    <div class=\"row m-3\">\n        <div class=\"col-md-6\">\n            <form [formGroup]=\"envForm\">\n                <div class=\"form-group row\">\n                    <label for=\"name\" class=\"col-3 col-form-label\">Name</label>\n                    <div class=\"col-9 pe-0\">\n                        <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\"/>\n                    </div>\n                    <label for=\"description\" class=\"col-3 col-form-label\">Description</label>\n                    <div class=\"col-9 pe-0\">\n                            <input id=\"description\" type=\"text\" class=\"form-control\" formControlName=\"description\"/>\n                    </div>\n                </div>\n                <button *ngIf=\"!envUpdate\" type=\"button\" class=\"btn btn-success m-3\" (click)=\"updateEnvironment()\">{{ 'global.actions.create' | translate }}</button>\n                <button *ngIf=\"envUpdate\" type=\"button\" class=\"btn btn-success m-3\" (click)=\"updateEnvironment()\">{{ 'global.actions.edit' | translate }}</button>\n                <button type=\"button\" class=\"btn btn-secondary m-3\" (click)=\"cancelEnvironment()\">{{ 'global.actions.cancel' | translate }}</button>\n            </form>\n        </div>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"!envForm\">\n    <div class=\"row m-3\" >\n        <div class=\"col\" *ngIf=\"environments\">\n            {{ 'admin.targets.environment' | translate }}:\n            <chutney-environment-combo [environments]=\"environmentsNames\" (selectionEvent)=\"changingValue($event)\">\n            </chutney-environment-combo>\n            <div class=\"btn-group mx-3\" role=\"group\">\n                <button type=\"button\" class=\"btn btn-info\" (click)=\"initForUpdateEnvironment()\">{{ 'global.actions.update' | translate }}</button>\n                <button type=\"button\" class=\"btn btn-info mx-1\" (click)=\"initEnvironment()\">{{ 'global.actions.add' | translate }}</button>\n                <chutney-delete-confirm-dialog [dialogMessage]=\"('global.confirm.question' | translate) + ' ' + ('global.actions.delete' | translate) + '\\n' + selectedEnvironment.name\"\n                                               [label]=\"'Delete Environment'\"\n                                               [disabled]=\"!selectedEnvironment\"\n                                               (deleteEvent)=\"deleteEnvironment()\"\n                                                class=\"align-self-center\">\n                </chutney-delete-confirm-dialog>\n            </div>\n            <div class=\"btn-group ms-3\" role=\"group\">\n                <button type=\"button\" class=\"btn btn-success ms-1 align-self-center\" (click)=\"exportEnvironment()\">{{ 'global.actions.export' | translate }}</button>\n                <chutney-import-button (submitEvent)=\"importEnvironment($event)\"></chutney-import-button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row m-3\">\n        <div class=\"left-panel\">\n            <input name=\"search\" type=\"text\" class=\"form-control mb-2\" placeholder=\"Search target\" [(ngModel)]=\"targetFilter\"/>\n            <table class=\"table table-striped table-hover\">\n                <tbody>\n                    <tr *ngFor=\"let target of targets | searchTextPipe: targetFilter:['name']\" (click)=\"selectTarget(target)\"  class=\"pointer\" >\n                        <td  style=\"width:325px;\">\n                            {{target.name}}\n                        </td>\n                        <td>\n                            <small>\n                                ({{target.url.split(':')[0]}})\n                            </small>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class=\"col ps-4\">\n            <div class=\"sticky-top-admin\">\n                <div *ngIf=\"!selectedTarget\">\n                    <chutney-add-target-dialog (onSave)=\"addTarget($event)\"></chutney-add-target-dialog>\n                    <chutney-import-file (importEvent)=\"importTarget($event)\" [multiple]=\"true\"></chutney-import-file>\n                </div>\n                <div *ngIf=\"selectedTarget\">\n                    <div  class=\"col-md-12\">\n                        <button type=\"button\" class=\"btn btn-success me-3\" (click)=\"updateSelectedTarget()\"> <span class=\"fa fa-check\"></span> {{'global.actions.save' | translate}}</button>\n                        <button type=\"button\" class=\"btn btn-success accept-spinner me-3\" (click)=\"exportTarget()\"><span class=\"fa fa-download\"> </span> {{'global.actions.export' | translate}}</button>\n                        <button type=\"button\" class=\"btn btn-secondary me-4\" (click)=\"cancelSelectedTarget()\">{{'global.actions.cancel' | translate}}</button>\n                        <chutney-delete-confirm-dialog\n                            [dialogMessage]=\"('global.confirm.question' | translate) + ' ' + ('global.actions.delete' | translate) + '\\n' + selectedTarget.name\"\n                            [label]=\"'Delete Target'\"\n                            [disabled]=\"null\"\n                            (deleteEvent)=\"deleteTarget(selectedTarget)\">\n                        </chutney-delete-confirm-dialog>\n                        <chutney-forms-editable-label style=\"min-width: 70%;\" [id]=\"'targetName'\" [placeholder]=\"'Name'\" [(model)]=\"selectedTarget.name\" [type]=\"'form-title'\"></chutney-forms-editable-label>\n\n                        <chutney-forms-input-line [id]=\"'targetUrl'\" [label]=\"'Url'\" [placeholder]=\"'protocol://server:port'\" [(model)]=\"selectedTarget.url\" [validate]=\"validationService.isValidUrl.bind(validationService)\"></chutney-forms-input-line>\n                        <div class=\"mt-2\">\n                            <button class=\"btn btn-sm btn-info float-right ms-1\" title=\"{{'global.actions.help' | translate}}\" (click)=\"help = !help\">\n                                {{'global.actions.help' | translate}} <span class=\"fa fa-info\"></span>\n                            </button>\n                            <div *ngIf=\"help\">\n                                <pre class=\"text-white bg-info rounded overflow-auto\">\n\n  Some properties that could be defined :\n   - user / username / password / userPassword              : user id to be used and associated password\n   - trustStore / trustStorePassword                        : path to a truststore and associated password\n   - keyStore / keyStorePassword / keyPassword              : path to a keystore and associated passwords\n   - privateKey / privateKeyPassword / privateKeyPassphrase : path to a keystore and associated password\n                                </pre>\n                            </div>\n                            <chutney-property-table-panel [entries]=\"selectedTarget.properties\"></chutney-property-table-panel>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</ng-container>\n"
        },
        {
            "name": "EnvironmentComboComponent",
            "id": "component-EnvironmentComboComponent-de9f16568f9dff33e4cac36e1350bf3b39434767d84ffbf89ea0596c9909a6fb40720b25aec63a17c257de51e5a8d5eb0ffa9a69afc7d7db4bc23a8abd8b5279",
            "file": "src/app/shared/components/environment-combo/environment-combo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-environment-combo",
            "styleUrls": [
                "./environment-combo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-combo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Array<string>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedEnvironment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "changingValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\n@Component({\n    selector: 'chutney-environment-combo',\n    templateUrl: './environment-combo.component.html',\n    styleUrls: ['./environment-combo.component.scss']\n})\nexport class EnvironmentComboComponent implements OnChanges {\n\n    @Input() environments: Array<string>;\n    @Input() defaultValue: string;\n    @Output() selectionEvent = new EventEmitter();\n\n    selectedEnvironment: string;\n\n    constructor() {\n    }\n\n    ngOnChanges() {\n        this.setSelectedEnvironment();\n    }\n\n    changingValue(event: any) {\n        this.selectedEnvironment = this.environments.filter(env => env === event.target.value)[0];\n        this.selectionEvent.emit(this.selectedEnvironment);\n    }\n\n    private setSelectedEnvironment() {\n        if (this.environments && this.environments.length > 0) {\n            const envFound = this.environments.find(e => e === this.defaultValue);\n            if (envFound) {\n                this.selectedEnvironment = envFound;\n            } else {\n                this.selectedEnvironment = this.environments[0];\n            }\n            this.selectionEvent.emit(this.selectedEnvironment);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".env-combo {\n    width:200px;\n    display: inline-block;\n}",
                    "styleUrl": "./environment-combo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<select class=\"form-select env-combo\" (change)=\"changingValue($event)\">\n    <option *ngFor=\"let env of environments\" [selected]=\"env === selectedEnvironment\">{{ env }}</option>\n</select>\n"
        },
        {
            "name": "ErrorPanelComponent",
            "id": "component-ErrorPanelComponent-e004b24ce231a946ff7914961266d0e1622a6ae69b6039d5c26ec448116053805ea69659fe79d0f03fb06b972d50b3ffab3fb3c6a1feca87346e6b398696ae9b",
            "file": "src/app/molecules/panel/error-panel/error-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-error-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'chutney-error-panel',\n  templateUrl: './error-panel.component.html'\n})\nexport class ErrorPanelComponent {\n\n  @Input() errorMessage: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div>\n    <div [hidden]=\"!errorMessage\">\n        <p class=\"text-danger\">\n            <b>Error: </b>\n            <br>\n        </p>\n        <div class=\"text-danger\" [innerHTML]=\"errorMessage\"></div>\n    </div>\n</div>\n"
        },
        {
            "name": "ExecuteComponent",
            "id": "component-ExecuteComponent-eaf260433939eefca46bead4c1c688b887e151ee15a8c70b5a8af4b05f29ba9f669e74649e85ac666e95c14213e1c496907a00ae8a38fcd4f746c71f0fdb9f87",
            "file": "src/app/modules/scenarios/components/execute/execute.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-execute",
            "styleUrls": [
                "./execute.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./execute.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "computedParameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValue>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "env",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isComposed",
                    "defaultValue": "TestCase.isComposed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "testCase$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TestCase>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "testCaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildDataSetFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<KeyValue>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initComponentForm",
                    "args": [
                        {
                            "name": "computedParams",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "computedParams",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScenario",
                    "args": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "testCaseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { delay, map, tap } from 'rxjs/operators';\n\nimport { TestCase, KeyValue } from '@model';\nimport { ScenarioExecutionService, ComponentService, ScenarioService } from '@core/services';\n\n@Component({\n    selector: 'chutney-execute',\n    templateUrl: './execute.component.html',\n    styleUrls: ['./execute.component.scss']\n})\nexport class ExecuteComponent implements OnInit, OnDestroy {\n\n    testCase$: Observable<TestCase>;\n    private computedParameters: Array<KeyValue>;\n    private testCaseId: string;\n\n    componentForm: FormGroup;\n    env: string;\n    private isComposed = TestCase.isComposed;\n    private routeParamsSubscription: Subscription;\n\n    constructor(private scenarioExecutionService: ScenarioExecutionService,\n                private componentService: ComponentService,\n                private scenarioService: ScenarioService,\n                private formBuilder: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n        this.routeParamsSubscription = this.route.params.subscribe((params) => {\n            this.loadScenario(params['id']);\n            this.env = params['env'];\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.routeParamsSubscription) {\n            this.routeParamsSubscription.unsubscribe();\n        }\n    }\n\n    execute(event: Event) {\n        (event.currentTarget as HTMLButtonElement).disabled = true;\n        this.scenarioExecutionService.executeScenarioAsync(this.testCaseId, this.buildDataSetFromForm(), this.env)\n            .pipe(\n                delay(1000)\n            )\n            .subscribe(\n            executionId =>\n                this.router.navigateByUrl(`/scenario/${this.testCaseId}/execution/${executionId}`)\n                    .then(null),\n            error =>\n                this.router.navigateByUrl(`/scenario/${this.testCaseId}/execution/last`)\n                    .then(null)\n        );\n    }\n\n    private loadScenario(testCaseId: string) {\n        this.testCaseId = testCaseId;\n\n        let tmp$: Observable<TestCase>;\n        if (this.isComposed(testCaseId)) {\n            tmp$ = this.componentService.findComponentTestCase(testCaseId).pipe(\n                map(sc => TestCase.fromComponent(sc))\n            );\n        } else {\n            tmp$ = this.scenarioService.findRawTestCase(testCaseId);\n        }\n\n        this.testCase$ = tmp$.pipe(tap(tc => this.initComponentForm(tc.computedParameters)));\n    }\n\n    private initComponentForm(computedParams: Array<KeyValue>) {\n        this.computedParameters = computedParams;\n\n        this.componentForm = this.formBuilder.group({\n            parameters: this.formBuilder.array([])\n        });\n\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        computedParams.forEach((keyValue) => {\n            parameters.push(\n                this.formBuilder.control(keyValue.value, Validators.required)\n            );\n        });\n    }\n\n    private buildDataSetFromForm(): Array<KeyValue> {\n        const computedParameters: Array<KeyValue> = [];\n        const parameters = this.componentForm.controls['parameters'] as FormArray;\n        parameters.controls.forEach((ctlr, i) => {\n            computedParameters.push(new KeyValue(this.computedParameters[i].key, ctlr.value));\n        });\n        return computedParameters;\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.edition-header {\n    margin-top: 0;\n    margin-bottom: 0;\n\n    .header-left {\n        height: 120px;\n        background-color: $vert2;\n        width: 50%;\n        float: left;\n\n        .title {\n            margin-top: 20px;\n            margin-left: 40px;\n            background-color: $vert2;\n            color: white;\n            font-size: 22px;\n            line-height: 22px;\n            font-weight: bold;\n            overflow: hidden;\n        }\n\n        .description{\n            margin-top: 10px;\n            background-color: $vert2;\n            font-size: 13px;\n            font-weight: 300;\n            font-style: normal;\n            font-stretch: normal;\n            line-height: normal;\n            letter-spacing: normal;\n            color: #333333;\n            margin-left: 40px;\n            overflow: hidden;\n        }\n    }\n\n    .header-right {\n        background-color: $vert3;\n        width:50%;\n        height: 120px;\n        float: left;\n        text-align: center;\n        position: relative;\n        padding-left: 20px;\n    }\n\n    .triangle-left:before {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-color: transparent transparent transparent $vert2;\n        border-style: solid;\n        border-width: 60px 0 60px 20px;\n    }\n}\n",
                    "styleUrl": "./execute.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"(testCase$ | async) as testCase\">\n    <div class=\"row edition-header\">\n        <div class=\"header-left\">\n            <div class=\"title\" [innerHTML]=\"testCase.title | linkify\"></div>\n            <div class=\"description\" [innerHTML]=\"testCase.description | linkify\"></div>\n        </div>\n        <div class=\"header-right triangle-left\">\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col text-center\">\n                <button type=\"button\" class=\"btn btn-success\"\n                        (click)=\"execute($event)\"\n                        [title]=\"'global.actions.execute' | translate\"\n                        [disabled]=\"!componentForm.valid\">\n                    <span class=\"fa fa-play\"></span>\n                </button>\n            </div>\n        </div>\n        <div class=\"row\">\n            <form [formGroup]=\"componentForm\" autocomplete=\"off\" class=\"col text-center was-validated\">\n                <fieldset class=\"form-group border p-2\" formArrayName=\"parameters\">\n                    <legend class=\"px-3 float-none\"\n                            style=\"width: auto;\">{{'scenarios.execution.dataset.title' | translate}}</legend>\n                    <div class=\"row\"\n                         *ngFor=\"let parameter of componentForm.get('parameters')?.controls; let i=index\">\n                        <label for=\"{{i}}\" class=\"col-3 mb-0 align-self-center\">\n                            {{testCase.computedParameters[i].key}}\n                        </label>\n                        <textarea id=\"{{i}}\" [rows]=\"1\" type=\"text\" class=\"col-9 form-control\"\n                                  [formControlName]=\"i\" required></textarea>\n                    </div>\n                </fieldset>\n            </form>\n        </div>\n    </div>\n</ng-container>\n"
        },
        {
            "name": "ExecutionBadgeComponent",
            "id": "component-ExecutionBadgeComponent-72364ff19909c0388b0b282d9a2a446e4fc8791be5d2cb49c6fcb7ef1e999feaa54e36c4f4f40467ac95b342568f14d03127f693d7308911d057b15758c70363",
            "file": "src/app/shared/components/execution-badge/execution-badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-execution-badge",
            "styleUrls": [
                "./execution-badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./execution-badge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status_h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\n\n\n@Component({\n  selector: 'chutney-execution-badge',\n  templateUrl: './execution-badge.component.html',\n  styleUrls: ['./execution-badge.component.scss']\n})\nexport class ExecutionBadgeComponent implements OnChanges {\n\n  @Input() status: String;\n  @Input() spin = false;\n\n  status_h: String;\n  constructor() { }\n\n  ngOnChanges(): void {\n\n    switch (this.status) {\n      case 'SUCCESS':\n        this.status_h = 'OK';\n        break;\n      case 'FAILURE':\n        this.status_h = 'KO';\n        break;\n      case 'RUNNING':\n        this.status_h = 'RUNNING';\n        break;\n      case 'PAUSED':\n        this.status_h = 'PAUSE';\n        break;\n      case 'STOPPED':\n        this.status_h = 'STOP';\n        break;\n      case 'NOT_EXECUTED':\n        this.status_h = 'NOT EXECUTED';\n        break;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n@keyframes running-animation {\n    0% {background-color: Chartreuse ;}\n    75% {background-color: Cyan;}\n    100% {background-color: Chartreuse ;}\n}\n\n.badge-running {\n    font-style: italic;\n    animation-duration: 1s;\n    animation-name: running-animation;\n    animation-iteration-count: infinite;\n}\n\n.badge-stopped {\n    font-style: italic;\n    background-color: grey;\n}\n\n.badge-not-executed{\n    color: black;\n}\n",
                    "styleUrl": "./execution-badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<span class=\"badge\"\n[ngClass]=\"{'bg-primary': status == 'SUCCESS',\n            'bg-danger':status == 'FAILURE',\n            'badge-stopped': status == 'STOPPED',\n            'badge-running': status == 'RUNNING' || status == 'PAUSED',\n            'badge-not-executed': status == 'NOT_EXECUTED'\n      }\">\n    {{ status_h }}\n    <span *ngIf=\"spin\" [hidden]=\"!(status == 'RUNNING')\"\n          class=\"fa fa-spinner fa-pulse running\"\n          aria-hidden=\"true\"></span>\n</span>\n"
        },
        {
            "name": "ExecutionPanelComponent",
            "id": "component-ExecutionPanelComponent-be50baf6b09abb8d5e13630a854a6b9d29a70336a3ebe3bf1393f0b09832310ec20ecf885fe6d234862eb9931e8f61e55abf7a780ad93c75d11663465371bf7a",
            "file": "src/app/modules/component/components/sub/execution-panel/execution-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-execution-panel-component",
            "styleUrls": [
                "./execution-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./execution-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "executionResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInfos",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchErrors",
                    "args": [
                        {
                            "name": "report",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "result",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchInfo",
                    "args": [
                        {
                            "name": "report",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "result",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "Array<Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, OnChanges} from '@angular/core';\n\n@Component({\n    selector: 'chutney-execution-panel-component',\n    templateUrl: './execution-panel.component.html',\n    styleUrls: ['./execution-panel.component.scss']\n})\nexport class ExecutionPanelComponent implements OnChanges {\n\n\n    @Input() executionResult: any;\n    @Output() closeEvent = new EventEmitter();\n\n    info: Object[];\n    errors: Object[];\n\n    constructor(\n    ) {\n    }\n\n    ngOnChanges()  {\n\n        this.info = this.getInfos();\n        this.errors = this.getErrors();\n    }\n\n    close() {\n        this.info = [];\n        this.errors = [];\n        this.closeEvent.emit();\n    }\n\n    getErrors() {\n        const result = [];\n        if (this.executionResult.report) {\n            this.searchErrors(this.executionResult.report, result);\n        }\n        return result;\n    }\n\n    getInfos() {\n        const result = [];\n        if (this.executionResult.report) {\n            this.searchInfo(this.executionResult.report, result);\n        }\n        return result;\n    }\n\n    private searchInfo(report: Object, result: Array<Object>) {\n        if ((report['steps'] as Array<Object>).length > 0) {\n            (report['steps'] as Array<Object>).forEach(s => this.searchInfo(s, result));\n            (report['information'] as Array<Object>).forEach(s => result.push(s));\n        } else {\n            (report['information'] as Array<Object>).forEach(s => result.push(s));\n        }\n    }\n\n    private searchErrors(report: Object, result: Array<Object>) {\n        if ((report['steps'] as Array<Object>).length > 0) {\n            (report['steps'] as Array<Object>).forEach(s => this.searchErrors(s, result));\n            (report['errors'] as Array<Object>).forEach(s => result.push(s));\n        } else {\n            (report['errors'] as Array<Object>).forEach(s => result.push(s));\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.execution-panel {\n    background-color: $grisclair1;\n    padding: 10px;\n    border-radius: 10px;\n}",
                    "styleUrl": "./execution-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"executionResult\" class=\"execution-panel\">\n    <button type=\"button\" class=\"btn-close float-end\" aria-label=\"Close\" (click)=\"close()\">\n    </button>\n\n    <h5 class=\"fw-bold\">Execution result</h5>\n\n    <ng-container *ngIf=\"executionResult.report\">\n        <span class=\"fw-bold\">Status:</span> {{executionResult.report.status}} <br />\n        <div *ngIf=\"executionResult.report.duration\"> <span class=\"fw-bold\">Duration:</span> {{executionResult.report.duration}} ms</div>\n\n        <span *ngIf=\"info && info.length > 0\" class=\"fw-bold\">Logs:</span>\n        <pre *ngIf=\"info  && info.length > 0\" [innerHTML]=\"info | prettyPrint: true | safe: 'html'\"></pre>\n\n        <span *ngIf=\"errors  && errors.length > 0\" class=\"fw-bold\">Errors:</span>\n        <pre *ngIf=\"errors  && errors.length > 0\"\n            [innerHTML]=\"errors | prettyPrint: true | safe: 'html'\"></pre>\n    </ng-container>\n    <ng-container *ngIf=\"!executionResult.report\">\n        <span class=\"fw-bold\">Status:</span> KO <br />\n        {{ executionResult.error }}\n    </ng-container>\n</div>\n"
        },
        {
            "name": "FormsDataGridComponent",
            "id": "component-FormsDataGridComponent-e27fb50f3b1d9ad56ba821290a4456915e104ceb53013af9094a5241301d8fd2502afc155315d93b3284e6791897fd03b38235f735a879b4b8e74562e1151df1",
            "file": "src/app/modules/dataset/components/dataset-edition/forms-data-grid/forms-data-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormsDataGridComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormsDataGridComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "chutney-forms-data-grid",
            "styleUrls": [
                "./forms-data-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms-data-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataGridForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 182
                }
            ],
            "methodsClass": [
                {
                    "name": "addColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addLine",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cleanLastSemicolon",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createKeyValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLine",
                    "args": [
                        {
                            "name": "line",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormArray",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportMultiKeyValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "headerLine",
                    "args": [
                        {
                            "name": "delimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "delimiter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importMultiKeyValue",
                    "args": [
                        {
                            "name": "files",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertLine",
                    "args": [
                        {
                            "name": "line",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLastColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeColumn",
                    "args": [
                        {
                            "name": "col",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeLine",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "thereIsNoHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "thereIsNoLine",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateHeader",
                    "args": [
                        {
                            "name": "col",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newHeader",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "Array<Array<KeyValue>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "Array<Array<KeyValue>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef } from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    FormArray,\n    FormBuilder,\n    FormGroup,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors\n} from '@angular/forms';\nimport { KeyValue } from '@model';\nimport { FileSaverService } from 'ngx-filesaver';\n\n@Component({\n    selector: 'chutney-forms-data-grid',\n    templateUrl: './forms-data-grid.component.html',\n    styleUrls: ['./forms-data-grid.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => FormsDataGridComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => FormsDataGridComponent),\n            multi: true\n        }\n    ]\n})\nexport class FormsDataGridComponent implements ControlValueAccessor {\n\n    dataGridForm: FormArray;\n    headers: Array<string> = [];\n\n    constructor(private fb: FormBuilder,\n                private fileSaverService: FileSaverService) {\n        this.dataGridForm = this.fb.array([]);\n    }\n\n    // Columns\n\n    updateHeader(col: number, newHeader: string) {\n        this.headers[col] = newHeader;\n        const lines = this.dataGridForm.controls;\n        lines.forEach((line: FormArray) => {\n            let cell = line.controls[col];\n            cell.patchValue(new KeyValue(newHeader, cell.value.value));\n        });\n    }\n\n    addColumn() {\n        if (this.thereIsNoLine()) {\n            this.insertLine(this.createLine([]))\n        }\n\n        this.headers.push('');\n        this.dataGridForm.controls.forEach((line: FormArray) => {\n            line.push(this.createKeyValue('', ''));\n            line.updateValueAndValidity();\n        });\n        this.dataGridForm.updateValueAndValidity();\n    }\n\n    private thereIsNoLine() {\n        return this.dataGridForm.controls.length === 0;\n    }\n\n    removeColumn(col: number) {\n        this.headers.splice(col, 1);\n        this.dataGridForm.controls.forEach((line: FormArray) => {\n            line.removeAt(col);\n        });\n\n        if (this.isLastColumn()) {\n            this.clearForm()\n        }\n    }\n\n    private isLastColumn() {\n        return !this.dataGridForm.value.some((element) => element.length > 0);\n    }\n\n    private clearForm() {\n        this.headers = [];\n        while (this.dataGridForm.length !== 0) {\n            this.dataGridForm.removeAt(0)\n        }\n    }\n\n    // Lines\n\n    addLine() {\n        if (this.thereIsNoHeader()) {\n            this.headers.push('');\n        }\n\n        let line: Array<KeyValue> = this.headers.map(h => {\n            return new KeyValue(h, '');\n        });\n        this.insertLine(this.createLine(line));\n    }\n\n    private thereIsNoHeader() {\n        return this.headers.length === 0;\n    }\n\n    removeLine(i: number) {\n        this.dataGridForm.removeAt(i);\n    }\n\n    // Import / Export\n\n    exportMultiKeyValue() {\n        const fileName = 'chutney_dataset_multi_keyvalues.csv';\n        let fileContent = '';\n        const delimiter = ';';\n\n        fileContent = this.headerLine(delimiter);\n\n        this.dataGridForm.value\n            .map(line => {\n                let lineContent = '\\n';\n                line.forEach(kv => {\n                    lineContent += kv.value + delimiter;\n                });\n                return lineContent;\n            })\n            .forEach(line => fileContent += line  );\n\n        this.fileSaverService.saveText(fileContent, fileName);\n    }\n\n    private headerLine(delimiter: string) {\n        let headerLine = '';\n        this.headers.forEach(header => {\n            headerLine += header + delimiter;\n        });\n        return headerLine;\n    }\n\n    importMultiKeyValue(files: any) {\n        const file = files.item(0);\n        const fileReader = new FileReader();\n        fileReader.onload = (e) => {\n            this.clearForm();\n            const content = '' + fileReader.result;\n            const lines = content.split('\\n');\n\n            this.headers = this.cleanLastSemicolon(lines.shift()).split(';');\n\n            lines.forEach(l => {\n                const lineValues = this.cleanLastSemicolon(l).split(';');\n\n                const kv = this.headers\n                    .map( (header, i) => [header, lineValues[i]])\n                    .map( ([key, value]) => new KeyValue(key, value) );\n\n                this.insertLine(this.createLine(kv));\n            });\n\n            this.dataGridForm.enable();\n        };\n        fileReader.readAsText(file);\n    }\n\n    private cleanLastSemicolon(value: string): string{\n        if(value.length > 0 && value[value.length - 1] === ';') {\n            value = value.slice(0, value.length - 1);\n        }\n        return value;\n    }\n\n    // CVA\n    onChanged: any = () => {\n    };\n\n    onTouched: any = () => {\n    };\n\n    propagateChange: any = () => {\n    };\n\n    writeValue(val: Array<Array<KeyValue>>): void {\n        this.clearForm();\n        if (val != null && val.length > 0) {\n            if (this.dataGridForm.length === 0) {\n                val.map(l => this.createLine(l))\n                   .forEach(l => this.insertLine(l));\n            }\n\n            this.headers = this.getHeaders();\n        }\n    }\n\n    private getHeaders(): Array<string> {\n        if (this.dataGridForm.length > 0) {\n            return this.dataGridForm.controls[0].value.map(kv => kv.key);\n        }\n        return [];\n    }\n\n    private createLine(line: Array<KeyValue>): FormArray {\n        let lineArray = this.fb.array([]);\n        line.map(kv => this.createKeyValue(kv.key, kv.value))\n            .forEach(cell => {\n                lineArray.push(cell);\n            });\n        return lineArray;\n    }\n\n    private createKeyValue(key?: string, value?: string): FormGroup {\n        return this.fb.group({\n            key: key ? key : '',\n            value: value ? value : ''\n        });\n    }\n\n    private insertLine(line: FormArray, i?: number) {\n        if (i == null) {\n            i = this.dataGridForm.length;\n        }\n\n        this.dataGridForm.insert(i, line);\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n        this.dataGridForm.valueChanges.subscribe(fn);\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        isDisabled ? this.dataGridForm.disable() : this.dataGridForm.enable();\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.dataGridForm.valid ? null : {\n            invalidForm: {\n                valid: false,\n                message: 'fields are invalid'\n            }\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\ntable {\n    overflow: hidden;\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}\n\ntd, th {\n    position: relative;\n    border: 0;\n}\n\n.header {\n    background: #cccccc;\n}\n\n.removeBtn:hover::after {\n    content: \"\";\n    position: absolute;\n    background-color: $grisclair1;\n    left: 0;\n    top: -5000px;\n    height: 10000px;\n    width: 100%;\n    z-index: -1;\n}\n\n.div-file {\n    position: relative;\n    overflow: hidden;\n}\n\n.input-file {\n    position: absolute;\n    font-size: 50px;\n    opacity: 0;\n    right: 0;\n    top: 0;\n}\n\n.index-col {\n    text-align: center;\n}\n",
                    "styleUrl": "./forms-data-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"mt-3\" [formGroup]=\"dataGridForm\">\n    <button type=\"button\" class=\"btn btn-info\" (click)=\"addLine()\">\n        {{ 'global.actions.add' | translate }} <span class=\"fa fa-grip-lines\" aria-hidden=\"true\"></span>\n    </button>\n    <button type=\"button\" class=\"btn btn-info ms-2\" (click)=\"addColumn()\">\n        {{ 'global.actions.add' | translate }} <span class=\"fa fa-grip-lines-vertical\" aria-hidden=\"true\"></span>\n    </button>\n    <div class=\"float-end\">\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"exportMultiKeyValue()\">\n            <span class=\"fa fa-file-csv\" aria-hidden=\"true\"></span> {{ 'global.actions.export' | translate }}\n        </button>\n        <div class=\"btn btn-info div-file ms-2\">\n            <span class=\"fa fa-file-import\" aria-hidden=\"true\"></span> {{ 'global.actions.import' | translate }}\n            <input class=\"input-file\" type=\"file\" name=\"file\" multiple=\"false\"\n                   (change)=\"importMultiKeyValue($event.target.files)\"/>\n        </div>\n    </div>\n\n    <div>\n        <table class=\"table table-sm table-striped table-hover\">\n            <thead>\n            <tr>\n                <th style=\"width:30px\">\n                </th>\n                <th class=\"header index-col\">#</th>\n                <th class=\"header\" scope=\"col\" *ngFor=\"let header of headers; let i = index\" style=\"min-width:250px \">\n                    <div style=\"text-align: center; margin-bottom: 2px;\">\n                        <button type=\"button\" class=\"btn btn-outline-danger delete-button-height removeBtn\"\n                                (click)=\"removeColumn(i)\"\n                                title=\"{{'global.actions.delete' | translate}}\">\n                            <span class=\"fa fa-times\"></span>\n                        </button>\n                    </div>\n                    <input type=\"text\" class=\"form-control\" id=\"{{i}}-header\" placeholder=\"{{ 'dataset.key' | translate }}\" value=\"{{header}}\"\n                           (change)=\"updateHeader(i, $event.target.value)\"/>\n                </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let line of dataGridForm.controls; let i = index\">\n                <td style=\"width:30px\">\n                    <button type=\"button\" class=\"btn btn-outline-danger delete-button-height\" (click)=\"removeLine(i)\"\n                            title=\"{{'global.actions.delete' | translate}}\">\n                        <span class=\"fa fa-times\"></span>\n                    </button>\n                </td>\n                <td class=\"index-col\">{{i+1}}</td>\n                <td [formGroupName]=\"i\" *ngFor=\"let keyValue of line.controls; let j = index\" style=\"min-width:250px\">\n                    <div [formGroupName]=\"j\">\n                        <input type=\"text\" class=\"form-control\" id=\"{{i-j}}-value\"\n                               formControlName=\"value\" placeholder=\"{{ 'dataset.value' | translate }}\"/>\n                    </div>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n"
        },
        {
            "name": "FormsKeyValueComponent",
            "id": "component-FormsKeyValueComponent-f90a4d3f90427768b42b9d4a4a239c0fb81ea139051e6d20fb7e9795961ed0f75a74e1879334b3583fec35f5be896ceb40e295aa061a416d53b776969906a8a4",
            "file": "src/app/modules/dataset/components/dataset-edition/forms-key-value/forms-key-value.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormsKeyValueComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => FormsKeyValueComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "chutney-forms-key-value",
            "styleUrls": [
                "./forms-key-value.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms-key-value.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "keyValuesForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 112
                }
            ],
            "methodsClass": [
                {
                    "name": "addKeyValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createKeyValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportKeyValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "importKeyValue",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertNewKeyValue",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeKeyValueLine",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "Array<KeyValue>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef } from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    FormArray,\n    FormBuilder, FormGroup,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors\n} from '@angular/forms';\nimport { KeyValue } from '@model';\nimport { FileSaverService } from 'ngx-filesaver';\n\n@Component({\n    selector: 'chutney-forms-key-value',\n    templateUrl: './forms-key-value.component.html',\n    styleUrls: ['./forms-key-value.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => FormsKeyValueComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => FormsKeyValueComponent),\n            multi: true\n        }\n    ]\n})\nexport class FormsKeyValueComponent implements ControlValueAccessor {\n\n    keyValuesForm: FormArray;\n    isDisabled: boolean;\n\n    constructor(\n        private fb: FormBuilder,\n        private fileSaverService: FileSaverService,\n    ) {\n        this.keyValuesForm = this.fb.array([]);\n    }\n\n    insertNewKeyValue(i?: number) {\n        this.addKeyValue('', '', i+1);\n    }\n\n    private addKeyValue(key?: string, value?: string, i?: number): void {\n        if (i == null) {\n            i = this.keyValuesForm.length + 1;\n        }\n\n        this.keyValuesForm.insert(i, this.createKeyValue(key, value));\n    }\n\n    private createKeyValue(key?: string, value?: string): FormGroup {\n        return this.fb.group({\n            key: key ? key : '',\n            value: value ? value : ''\n        });\n    }\n\n    removeKeyValueLine(i?: number) {\n        if (i == null) {\n            i = this.keyValuesForm.length;\n        }\n\n        this.keyValuesForm.removeAt(i);\n    }\n\n    private clearForm() {\n        const lineCount = this.keyValuesForm.controls.length;\n        for (let index = 0; index < lineCount; index++) {\n            this.keyValuesForm.removeAt(0);\n        }\n    }\n\n    exportKeyValue() {\n        const fileName = 'chutney_dataset_keyvalues.csv';\n        let fileContent = '';\n        const delimiter = ';';\n\n        this.keyValuesForm.value.forEach(element => {\n            fileContent += element.key + delimiter + element.value + '\\n';\n        });\n\n        this.fileSaverService.saveText(fileContent, fileName);\n    }\n\n    importKeyValue(files: FileList) {\n        const file = files.item(0);\n        const fileReader = new FileReader();\n        fileReader.onload = (e) => {\n            this.clearForm();\n            const content = '' + fileReader.result;\n            const lines = content.split('\\n');\n            lines.forEach(l => {\n                const oneLine = l.split(';');\n                if (oneLine.length === 2) {\n                    this.addKeyValue(oneLine[0], oneLine[1]);\n                }\n            });\n            this.keyValuesForm.enable();\n        };\n        fileReader.readAsText(file);\n    }\n\n    // CVA\n    onChanged: any = () => {};\n\n    onTouched: any = () => {};\n\n    propagateChange: any = () => {};\n\n    writeValue(val: Array<KeyValue>): void {\n        this.clearForm();\n        if (val != null && val.length > 0) {\n            if (this.keyValuesForm.length === 0) {\n                val.forEach(kv => {\n                   this.addKeyValue(kv.key, kv.value)\n                });\n            }\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n        this.keyValuesForm.valueChanges.subscribe(fn);\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.isDisabled = isDisabled;\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.keyValuesForm.valid ? null : {\n            invalidForm: {\n                valid: false,\n                message: 'fields are invalid'\n            }\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".div-file {\n    position: relative;\n    overflow: hidden;\n}\n\n.input-file {\n    position: absolute;\n    font-size: 50px;\n    opacity: 0;\n    right: 0;\n    top: 0;\n}",
                    "styleUrl": "./forms-key-value.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"mt-3\">\n    <button type=\"button\" class=\"btn btn-info\" (click)=\"insertNewKeyValue()\">\n        {{ 'global.actions.add' | translate }} <span class=\"fa fa-grip-lines\" aria-hidden=\"true\"></span>\n    </button>\n    <div class=\"float-end\">\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"exportKeyValue()\">\n            <span class=\"fa fa-file-csv\" aria-hidden=\"true\"></span> {{ 'global.actions.export' | translate }}\n        </button>\n        <div class=\"btn btn-info div-file ms-2\">\n            <span class=\"fa fa-file-import\" aria-hidden=\"true\"></span> {{ 'global.actions.import' | translate }}\n            <input class=\"input-file\" type=\"file\" name=\"file\" multiple=\"false\"\n                   (change)=\"importKeyValue($event.target.files)\"/>\n        </div>\n    </div>\n\n    <div [formGroup]=\"keyValuesForm\" *ngFor=\"let keyValue of keyValuesForm.controls; let i = index\">\n        <div [formGroupName]=\"i\" class=\"row\">\n            <div style=\"flex: 0 0 110px;\">\n                <button type=\"button\" class=\"btn btn-outline-info delete-button-height\"\n                        (click)=\"insertNewKeyValue(i)\"\n                        title=\"{{'global.actions.add' | translate}}\">\n                    <span class=\"fa fa-plus\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-outline-danger delete-button-height ms-1\"\n                        (click)=\"removeKeyValueLine(i)\"\n                        title=\"{{'global.actions.delete' | translate}}\">\n                    <span class=\"fa fa-times\"></span>\n                </button>\n            </div>\n            <div class='col-md-2'>\n                <input type=\"text\" class=\"form-control\" id=\"key\" formControlName=\"key\"\n                       placeholder=\"{{ 'dataset.key' | translate }}\"/>\n            </div>\n            <div class='col-md-8'>\n                <textarea class=\"form-control\" rows=\"1\" max-rows=\"20\" cols=\"100%\" formControlName=\"value\"\n                          placeholder=\"{{ 'dataset.value' | translate }}\"></textarea>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n"
        },
        {
            "name": "GitBackupComponent",
            "id": "component-GitBackupComponent-1c2775473f274c7c937c433f53de5d82b8e5eb6a25325e7771fe7e552d727b400298ddb0ac6004934d66c4e581eef1eca670d9f73a2e08291733621d156d0ef4",
            "file": "src/app/modules/plugins/components/git-backup/git-backup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-config-git-backup",
            "styleUrls": [
                "./git-backup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./git-backup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isErrorNotification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "remoteConfigForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "remotes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<GitRemoteConfig>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "importFrom",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadRemotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "remote",
                            "type": "GitRemoteConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ValidationService } from '../../../../molecules/validation/validation.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { delay } from '@shared/tools';\nimport { GitRemoteConfig } from '@model';\nimport { GitBackupService } from '@core/services';\n\n@Component({\n    selector: 'chutney-config-git-backup',\n    templateUrl: './git-backup.component.html',\n    styleUrls: ['./git-backup.component.scss']\n})\nexport class GitBackupComponent implements OnInit {\n\n    remoteConfigForm: FormGroup;\n\n    message: string;\n    isErrorNotification = false;\n\n    remotes: Array<GitRemoteConfig> = [];\n\n    constructor(private fb: FormBuilder,\n                private gitBackupService: GitBackupService,\n                private validationService: ValidationService) {\n    }\n\n    ngOnInit() {\n        this.remoteConfigForm = this.fb.group({\n            name: ['', Validators.required],\n            url: ['', Validators.required],\n            branch: [''],\n            privateKeyPath: ['', Validators.required],\n            passphrase: ['', Validators.required],\n        });\n\n        this.loadRemotes();\n    }\n\n    private loadRemotes() {\n        this.gitBackupService.loadConfig().subscribe(\n            (remotes: Array<GitRemoteConfig>) => {\n                this.remotes = remotes;\n                if (this.remotes.length > 0) {\n                    this.remoteConfigForm.controls['name'].patchValue(remotes[0].name);\n                    this.remoteConfigForm.controls['url'].patchValue(remotes[0].url);\n                    this.remoteConfigForm.controls['branch'].patchValue(remotes[0].branch);\n                    this.remoteConfigForm.controls['privateKeyPath'].patchValue(remotes[0].privateKeyPath);\n                    this.remoteConfigForm.controls['passphrase'].patchValue(remotes[0].privateKeyPassphrase);\n                }\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    isValid(): boolean {\n        return this.validationService.isNotEmpty(this.remoteConfigForm.value['name'])\n            && this.validationService.isNotEmpty(this.remoteConfigForm.value['url'])\n            && this.validationService.isNotEmpty(this.remoteConfigForm.value['privateKeyPath']);\n    }\n\n    saveConfig() {\n        const remoteConfig = new GitRemoteConfig(\n            this.remoteConfigForm.value['name'],\n            this.remoteConfigForm.value['url'],\n            this.remoteConfigForm.value['branch'],\n            this.remoteConfigForm.value['privateKeyPath'],\n            this.remoteConfigForm.value['passphrase']\n        );\n        this.gitBackupService.add(remoteConfig).subscribe(\n            (res) => {\n                this.notify('Remote configuration added', false);\n                this.loadRemotes();\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    edit(remote: GitRemoteConfig) {\n        this.remoteConfigForm.controls['name'].patchValue(remote.name);\n        this.remoteConfigForm.controls['url'].patchValue(remote.url);\n        this.remoteConfigForm.controls['branch'].patchValue(remote.branch);\n        this.remoteConfigForm.controls['privateKeyPath'].patchValue(remote.privateKeyPath);\n        this.remoteConfigForm.controls['passphrase'].patchValue(remote.privateKeyPassphrase);\n    }\n\n    export(remote: GitRemoteConfig) {\n        this.gitBackupService.backupTo(remote).subscribe(\n            (res) => {\n                this.notify('Chutney has been successfully backed up on ' + remote.name, false);\n                this.loadRemotes();\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    importFrom(remote: GitRemoteConfig) {\n        if (confirm(\"/!\\\\ WARNING /!\\\\\" +\n            \"\\nImporting content will overwrite existing data.\" +\n            \"\\nAre you sure you want to import content from \" + remote.name + \" ?\")) {\n\n            let name = prompt(\"Please enter the name of the repository you want to import:\");\n            if (name === remote.name) {\n                this.gitBackupService.importFrom(remote).subscribe(\n                    (res) => {\n                        this.notify('Chutney has been successfully imported from ' + remote.name, false);\n                        this.loadRemotes();\n                    },\n                    (error) => {\n                        this.notify(error.error, true);\n                    }\n                );\n            } else {\n                this.notify('Unknown repository: ' + name, true);\n            }\n        }\n    }\n\n    remove(remote: GitRemoteConfig, i: number) {\n        this.remotes.splice(i);\n        this.gitBackupService.remove(remote).subscribe(\n            (res) => {\n                this.notify('Remote configuration removed', false);\n                this.loadRemotes();\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    notify(message: string, isErrorNotification: boolean) {\n        (async () => {\n            this.isErrorNotification = isErrorNotification;\n            this.message = message;\n            await delay(6000);\n            this.message = null;\n        })();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"alias\";\n\n.box2 {\n    display: inline-block;\n    margin: 1em;\n}\n\n.notification {\n    position: absolute;\n    top: 0;\n    width: 100%;\n}\n",
                    "styleUrl": "./git-backup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gitBackupService",
                        "type": "GitBackupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gitBackupService",
                        "type": "GitBackupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n    <fieldset class=\"w99 border p-2\">\n        <legend class=\"w-auto px-3 mb-0 float-none\">\n            <span>Git backup repository </span>\n        </legend>\n        <div [ngClass]=\"isErrorNotification ? 'bg-danger' : 'bg-info'\" class=\"notification text-center text-white\">\n            <strong *ngIf=\"message\">{{ message }}</strong>\n        </div>\n\n        <div class=\"row m-1\" [formGroup]=\"remoteConfigForm\">\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"name\">Name</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\"\n                       placeholder=\"Remote name (ex. origin)\"/>\n            </div>\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"url\">URL</label>\n                <input type=\"text\" class=\"form-control\" id=\"url\" formControlName=\"url\"\n                       placeholder=\"Remote url (ex. git@github.com:chutney-testing/chutney.git)\"/>\n            </div>\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"branch\">Branch</label>\n                <input type=\"text\" class=\"form-control\" id=\"branch\" formControlName=\"branch\"\n                       placeholder=\"Branch name (default to 'backup')\"/>\n            </div>\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"privateKeyPath\">PrivateKey path</label>\n                <input type=\"text\" class=\"form-control\" id=\"privateKeyPath\" name=\"username\" formControlName=\"privateKeyPath\"\n                       placeholder=\"/private/key/path\"/>\n            </div>\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"passphrase\">PrivateKey passphrase</label>\n                <input type=\"password\" class=\"form-control\" id=\"passphrase\" name=\"password\" formControlName=\"passphrase\"\n                       placeholder=\"Private key passphrase\"/>\n            </div>\n        </div>\n\n        <div class=\"box2\">\n            <button type=\"submit\" [disabled]=\"!isValid()\" class=\"btn btn-success\" (click)=\"saveConfig()\">\n                Test & Save\n                <span class=\"fa fa-check\"></span>\n            </button>\n        </div>\n        <table class=\"table table-sm table-striped table-hover\">\n            <thead>\n            <tr>\n                <th scope=\"col\" class=\"w20\">Name</th>\n                <th scope=\"col\" class=\"w30\">URL</th>\n                <th scope=\"col\" class=\"w20\">Branch</th>\n                <th scope=\"col\" class=\"w30\">Private Key Path</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let remote of remotes; let i = index\">\n                <td> {{ remote.name }} </td>\n                <td> {{ remote.url }} </td>\n                <td> {{ remote.branch }} </td>\n                <td> {{ remote.privateKeyPath }} </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-danger\" title=\"Import from repository\"\n                            (click)=\"importFrom(remote)\">\n                        <span class=\"fa fa-download\">Import</span>\n                    </button>\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-primary\" title=\"Export to repository\"\n                        (click)=\"export(remote)\">\n                        <span class=\"fa fa-upload\">Export</span>\n                    </button>\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-outline-primary ms-1\"\n                            (click)=\"edit(remote)\"\n                            title=\"{{'global.actions.edit' | translate}}\">\n                        <span class=\"fa fa-pencil-alt\"></span>\n                    </button>\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-outline-danger delete-button-height ms-1\"\n                            (click)=\"remove(remote, i)\"\n                            title=\"{{'global.actions.delete' | translate}}\">\n                        <span class=\"fa fa-trash\"></span>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </fieldset>\n</div>\n"
        },
        {
            "name": "GlobalVariableEditionComponent",
            "id": "component-GlobalVariableEditionComponent-29e890e253f184bea64d400c0d3a0d061466e67107aaa3579e94117889019b308f393775c9ebdbbc8c8f9eee484d3dd094096aed189cd6c1e310429044664429",
            "file": "src/app/modules/global-variable/components/global-variable-edition/global-variable-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-global-variable-edition",
            "styleUrls": [
                "./global-variable-edition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./global-variable-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "data",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fileNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "help",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "callBackFunc",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delay",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFileContent",
                    "args": [
                        {
                            "name": "selectedFileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedFileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {GlobalVariableService} from '@core/services/global-var.service';\nimport {HttpErrorResponse} from '@angular/common/http';\n\nimport { Authorization } from '@model';\n\n@Component({\n    selector: 'chutney-global-variable-edition',\n    templateUrl: './global-variable-edition.component.html',\n    styleUrls: ['./global-variable-edition.component.scss']\n})\nexport class GlobalVariableEditionComponent implements OnInit {\n\n    data = '';\n    fileNames;\n    currentFileName;\n    message: string;\n\n    help = false;\n\n    Authorization = Authorization;\n\n    constructor(private globalVariableService: GlobalVariableService) {\n    }\n\n    ngOnInit(): void {\n        this.globalVariableService.list().subscribe(\n            response => {\n                this.fileNames = response;\n                this.currentFileName = this.fileNames[0];\n                this.updateFileContent(this.currentFileName);\n            }\n        );\n    }\n\n    callBackFunc(data) {\n        this.data = data;\n    }\n\n    save() {\n        (async () => {\n            this.message = 'Saving...';\n            await this.delay(1000);\n            this.globalVariableService.save(this.currentFileName, this.data).subscribe(\n                res => {\n                    this.message = 'Document saved';\n                    if (this.fileNames.indexOf(this.currentFileName) === -1) {\n                        this.fileNames.push(this.currentFileName);\n                    }\n                },\n                error => this.handleError(error));\n        })();\n    }\n\n    delay(ms: number) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    private handleError(err: HttpErrorResponse) {\n        if (err.error instanceof ProgressEvent) {\n            this.message = 'Back-end server not reachable';\n        } else {\n            this.message = err.error;\n        }\n    }\n\n    updateFileContent(selectedFileName: string) {\n        if (selectedFileName === undefined) {\n            this.data = '';\n            this.data = '';\n        } else {\n            this.globalVariableService.get(selectedFileName).subscribe(\n                response => {\n                    this.data = response;\n                    this.data = response;\n                }\n            );\n        }\n    }\n\n    deleteFile() {\n        (async () => {\n            this.message = 'Deleting...';\n            await this.delay(1000);\n            this.globalVariableService.delete(this.currentFileName).subscribe(\n                res => {\n                    this.fileNames.splice(this.fileNames.indexOf(this.currentFileName), 1);\n                    this.currentFileName = this.fileNames[0];\n                    this.message = 'Document deleted';\n                    this.updateFileContent(this.currentFileName);\n                },\n                error => this.handleError(error));\n        })();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box2 {\n    display: inline-block;\n    margin: 1em;\n}\n\n.globalvar-editor {\n    height: calc(100vh - 225px);\n    width:99%;\n}\n",
                    "styleUrl": "./global-variable-edition.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "globalVariableService",
                        "type": "GlobalVariableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "globalVariableService",
                        "type": "GlobalVariableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"data !== null\" class=\"ms-3 mt-3\">\n\n    <div class=\"box2\">\n        <button *hasAuthorization=\"[Authorization.GLOBAL_VAR_WRITE]\"\n            type=\"button\" class=\"btn btn-success m-2 box2\" (click)=\"save()\">\n            Save\n            <span class=\"fa fa-check\"></span>\n        </button>\n    </div>\n    <div class=\"box2\">\n        <select class=\"form-select\" [(ngModel)]=\"currentFileName\" (ngModelChange)=\"updateFileContent($event)\">\n            <option [value]=\"fileName\" *ngFor=\"let fileName of fileNames\">{{fileName}}</option>\n        </select>\n    </div>\n    <div class=\"box2\">\n        <input *hasAuthorization=\"[Authorization.GLOBAL_VAR_WRITE]\"\n            id=\"filename\" type=\"text\" class=\"form-control\" name=\"filename\"\n            placeholder=\"Add a new file\" [(ngModel)]=\"currentFileName\"/>\n    </div>\n    <div class=\"box2\">\n        <chutney-delete-confirm-dialog *hasAuthorization=\"[Authorization.GLOBAL_VAR_WRITE]\"\n            [dialogMessage]=\"('global.confirm.question' | translate) + ' ' + ('global.actions.delete' | translate) + '\\n' + currentFileName\"\n            [label]=\"'Delete file'\"\n            [disabled]=\"null\"\n            (deleteEvent)=\"deleteFile()\">\n        </chutney-delete-confirm-dialog>\n    </div>\n    <div class=\"box2\">\n        <button type=\"button\" class=\"btn btn-primary m-2 box2\" (click)=\"help = !help\">\n            Help\n            <span class=\"fa fa-help\"></span>\n        </button>\n    </div>\n    <div class=\"box2\" *ngIf=\"message\"> {{ message }}</div>\n\n    <div *ngIf=\"help\">\n        <pre>\nGlobal variable can be user in your scenario or components with **global_variable_name**.\nYou can defined variable in json in this file.\nFor example :\n{{\"{\n        key1: value1,\n        key2: {\n                subKey1: subValue1,\n                subKey2: subValue2\n        },\n        key3: [\n                {\n                alias: nico,\n                test:value\n                },\n                {\n                test:value\n                }\n        ]\n}\"}}\nwill generate keys :\n        - subKey1\n        - key2.subKey1\n        - key2.subKey2\n        - nico.test\n        - key3[1].test\n\n        </pre>\n    </div>\n\n    <div class=\"globalvar-editor\">\n        <chutney-editor\n            [modes]=\"['json', 'hjson']\"\n            [mode]=\"'hjson'\"\n            [content]=\"data\"\n            (onContentChange)=\"callBackFunc($event)\">\n        </chutney-editor>\n    </div>\n</div>\n"
        },
        {
            "name": "GwtReadComponent",
            "id": "component-GwtReadComponent-20d94044892ad94870f27702d13c7d8f995b15869d716ed56d62ee62d0e4751b0b919e7425ee138abc1df544d40b43da28033d1ffba0d851ae47bd793b830b4c",
            "file": "src/app/modules/scenarios/components/execution/gwt-read/gwt-read.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-gwt-read",
            "styleUrls": [
                "./gwt-read.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gwt-read.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FunctionalStep",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showImplementation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n\nimport {  FunctionalStep } from '@model';\n\n@Component({\n    selector: 'chutney-gwt-read',\n    templateUrl: './gwt-read.component.html',\n    styleUrls: ['./gwt-read.component.scss']\n})\nexport class GwtReadComponent implements OnInit {\n\n    @Input() step: FunctionalStep;\n    @Input() type: string;\n\n    showImplementation = false;\n    ngOnInit(): void {\n\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.eye-color {\n    color: $grisfonce2;\n}\n\n.step-name {\n    font-size: 1em;\n}\n\n.implementation {\n    font-size: 0.9em;\n}",
                    "styleUrl": "./gwt-read.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ms-3 mb-2 mt-2\">\n    <span *ngIf=\"step.implementation\" class=\"me-2 fa fa-sm eye-color pointer\"  [ngClass]=\"showImplementation ? 'fa-angle-down' : 'fa-angle-right'\" (click)=\"showImplementation = !showImplementation\"></span>\n    <span class=\"step-name\">{{ step.sentence }}</span>\n    <span class=\"small\" *ngIf=\"step.strategy !== null && step.strategy.type === 'retry-with-timeout'\"> \n        <span class=\"ms-2 fa fa-sm fa-redo\" title=\"{{ step.strategy.parameters | stringify}}\"></span>\n    </span>\n    <ng-container *ngIf=\"step.implementation\">\n        <pre class=\"ms-2 small implementation\" *ngIf=\"showImplementation\">\n{{ step.implementation.task }}\n        </pre>\n    </ng-container>\n\n    <div *ngFor=\"let child of step.subSteps\">\n        <chutney-gwt-read [step] = child [type] = ''></chutney-gwt-read>\n    </div>\n\n</div>\n\n\n\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-16f04996c0198de000c505b768c00b55e018fe40f7f1cd23a6a855c96948663c5ab75e2d2aa5af137fcf888da8eb71ba8c8ccc5583eabbaf60ffcd2c1b7a2f36-1",
            "file": "src/app/modules/scenarios/components/sub/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canExecute",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "testCaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "executeEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "executeDropDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<NgbDropdown>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "NgbDropdown"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isComposed",
                    "defaultValue": "TestCase.isComposed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "testCaseMetadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioIndex",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "duplicateScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "executeScenario",
                    "args": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeScenarioOnToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNotComposed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNotEditable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNotLocalSource",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit, ViewChildren, QueryList } from '@angular/core';\nimport { disabledBoolean } from '@shared/tools/bool-utils';\n\nimport { TestCase, ScenarioIndex, Authorization } from '@model';\nimport { ScenarioService, ComponentService, EnvironmentAdminService, JiraPluginService, LoginService } from '@core/services';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { FileSaverService } from 'ngx-filesaver';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n    selector: 'chutney-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n    @Input() testCaseId: string;\n    @Input() canExecute = true;\n\n    @Output() executeEvent = new EventEmitter<string>();\n\n    isComposed = TestCase.isComposed;\n\n    environments: Array<string>;\n    testCaseMetadata: ScenarioIndex;\n\n    @ViewChildren(NgbDropdown)\n    private executeDropDown: QueryList<NgbDropdown>;\n\n    Authorization = Authorization;\n\n    constructor(private componentService: ComponentService,\n                private environmentAdminService: EnvironmentAdminService,\n                private fileSaverService: FileSaverService,\n                private jiraLinkService: JiraPluginService,\n                private router: Router,\n                private scenarioService: ScenarioService,\n                private loginService: LoginService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.scenarioService.findScenarioMetadata(this.testCaseId).subscribe(\n            (res) => this.testCaseMetadata = res\n        );\n        if (this.loginService.hasAuthorization(Authorization.SCENARIO_EXECUTE)) {\n            this.environmentAdminService.listEnvironmentsNames().subscribe(\n                (res) => this.environments = res\n            );\n        }\n    }\n\n    executeScenario(envName: string) {\n        this.executeEvent.emit(envName);\n    }\n\n    executeScenarioOnToggle() {\n        if (this.environments.length == 1) {\n            this.executeDropDown.first.close();\n            this.executeScenario(this.environments[0]);\n        }\n    }\n\n    deleteScenario(id: string) {\n        let deleteObs: Observable<any>;\n        if (TestCase.isComposed(this.testCaseId)) {\n            deleteObs = this.componentService.deleteComponentTestCase(id);\n        } else {\n            deleteObs = this.scenarioService.delete(id);\n        }\n        deleteObs.subscribe(() => {\n            this.removeJiraLink(id);\n            this.router.navigateByUrl('/scenario')\n                .then(null);\n        });\n    }\n\n    duplicateScenario() {\n        if (TestCase.isComposed(this.testCaseId)) {\n            this.router.navigateByUrl('/scenario/' + this.testCaseId + '/component-edition?duplicate=true');\n        } else {\n            this.router.navigateByUrl('/scenario/' + this.testCaseId + '/raw-edition?duplicate=true');\n        }\n    }\n\n    exportScenario() {\n        const fileName = `${this.testCaseId}-${this.testCaseMetadata.title}.chutney.hjson`;\n        this.scenarioService.findRawTestCase(this.testCaseId).subscribe((testCase: TestCase) => {\n            this.fileSaverService.saveText(testCase.content, fileName);\n        });\n    }\n\n    isNotEditable() {\n        return disabledBoolean(this.isNotLocalSource());\n    }\n\n    isNotComposed() {\n        return !TestCase.isComposed(this.testCaseId);\n    }\n\n    private isNotLocalSource(): boolean {\n        const source = this.testCaseMetadata.repositorySource;\n        return !((source == 'local') || (source == 'ComposableTestCase'));\n    }\n\n    private removeJiraLink(id: string) {\n        this.jiraLinkService.removeForScenario(id).subscribe(\n            () => {},\n            (error) => { console.log(error); }\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\nbutton span:not(:first-child) {\n    display: block;\n}\n\n.accept-spinner {\n    margin-right: 5px;\n}\n\n.edition-header {\n    margin-top: 0;\n    margin-bottom: 0;\n\n    .header-left {\n        height: 120px;\n        background-color: $vert2;\n        width: 45%;\n        float: left;\n\n        .title {\n            margin-top: 15px;\n            margin-left: 40px;\n            background-color: $vert2;\n            color: white;\n            font-size: 18px;\n            line-height: 18px;\n            overflow: hidden;\n            height:45px;\n        }\n\n        .description{\n            background-color: $vert2;\n            font-size: 13px;\n            font-weight: 300;\n            font-style: normal;\n            font-stretch: normal;\n            line-height: normal;\n            letter-spacing: normal;\n            color: #333333;\n            margin-left: 40px;\n            overflow: hidden;\n        }\n\n        .header-tag {\n            margin-left: 40px;\n            height:25px;\n            overflow: hidden;\n        }\n    }\n\n    .header-right {\n        background-color: $vert3;\n        width:55%;\n        height: 120px;\n        float: left;\n        text-align: center;\n        position: relative;\n        padding-left: 20px;\n\n        .btn-toolbar {\n            height: 100px;\n\n            display: -ms-flexbox;\n            display: -webkit-flex;\n            display: flex;\n\n            -ms-flex-align: center;\n            -webkit-align-items: center;\n            -webkit-box-align: center;\n\n            align-items: center;\n        }\n\n        .btn-group {\n            margin-left: 8px;\n            margin-right: 8px;\n        }\n\n        button {\n            margin-left: 2px;\n            margin-right: 2px;\n\n            .btn-label {\n                font-size: 12px;\n            }\n        }\n    }\n\n    .triangle-left:before {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-color: transparent transparent transparent $vert2;\n        border-style: solid;\n        border-width: 60px 0 60px 20px;\n    }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileSaverService",
                        "type": "FileSaverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div *ngIf=\"testCaseMetadata\" class=\"row edition-header\">\n    <div class=\"header-left\">\n        <div class=\"title\" [innerHTML]=\"testCaseMetadata.title | linkify\"></div>\n        <div class=\"description\" [innerHTML]=\"testCaseMetadata.description | linkify\"></div>\n        <div class=\"btn-group ms-4 header-tag\">\n            <span *ngFor=\"let tag of testCaseMetadata.tags\">\n                <span class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n            </span>\n        </div>\n    </div>\n    <div class=\"header-right triangle-left\">\n        <div class=\"row\">\n            <div class=\"col-sm-12 btn-toolbar p-0\">\n                <div class=\"col-6 p-0\">\n                    <ng-container *hasAuthorization=\"[Authorization.SCENARIO_EXECUTE]\">\n                        <div ngbDropdown class=\"d-inline-block\">\n                            <button id=\"dropdownBasic1\" type=\"button\" class=\"btn btn-success accept-spinner m-1\"\n                                    [disabled]=\"canExecute\" ngbDropdownToggle\n                                    (click)=\"executeScenarioOnToggle()\">\n                                <span class=\"fa fa-play\"></span>\n                                <span class=\"btn-label\">{{'global.actions.execute' | translate}}</span>\n                            </button>\n                            <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\n                                <button *ngFor=\"let env of environments\" class=\"dropdown-item\"\n                                        (click)=\"executeScenario(env)\">{{ env }}</button>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <ng-container *hasAuthorization=\"[Authorization.SCENARIO_WRITE]\">\n                        <div class=\"btn-group\">\n                            <button type=\"button\" class=\"btn btn-light\"\n                                routerLink=\"{{isComposed(testCaseId) ? '/scenario/' + testCaseId + '/component-edition' : '/scenario/' + testCaseId + '/raw-edition'}}\"\n                                [attr.disabled]=\"isNotEditable()\">\n                                <span class=\"fa fa-pencil-alt\"></span>\n                                <span class=\"btn-label\">{{'global.actions.edit' | translate}}</span>\n                            </button>\n                        </div>\n                    </ng-container>\n                </div>\n                <div class=\"col-6 p-0\">\n                    <ng-container *hasAuthorization=\"[Authorization.SCENARIO_WRITE]\">\n                        <chutney-delete-confirm-dialog class=\"align-items-end\" [dialogMessage]=\"'scenarios.execution.actions.remove' | translate\"\n                            (deleteEvent)=\"deleteScenario(testCaseId)\" [disabled]=\"isNotEditable()\">\n                        </chutney-delete-confirm-dialog>\n                        <button type=\"button\" class=\"btn btn-success accept-spinner align-items-end\" (click)=\"duplicateScenario()\">\n                            <span class=\"fa fa-clone\"></span>\n                            <span class=\"btn-label\">{{'global.actions.clone' | translate}}</span>\n                        </button>\n                        <button *ngIf=\"isNotComposed()\" type=\"button\" class=\"btn btn-success accept-spinner align-items-end\" (click)=\"exportScenario()\">\n                            <span class=\"fa fa-file-code\"></span>\n                            <span class=\"btn-label\">{{'global.actions.export' | translate}}</span>\n                        </button>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "HistoryComponent",
            "id": "component-HistoryComponent-bb02f2e313cf3819326951dea28217367ca202703872aef1a55652c53b7be981a57b3107e82c4f70e9483298d46f0521662f7692941c987b66d1ee78bc4cd25c",
            "file": "src/app/modules/scenarios/components/execution/history/history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-execution-history",
            "styleUrls": [
                "./history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkForEndExecutions",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedExecutionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onlastIdExecution",
                    "defaultValue": "new EventEmitter<Execution>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<Execution>"
                },
                {
                    "name": "onlastStatusExecution",
                    "defaultValue": "new EventEmitter<String>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<String>"
                },
                {
                    "name": "onselectExecution",
                    "defaultValue": "new EventEmitter<Execution>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<Execution>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checkRunningExecutionsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "executions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Execution[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedLast",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "checkExecutionIdInHistory",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRunningExecutions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "checkRunningExecutionsSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findScenarioExecutions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOlderThan",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "durationInHours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "durationInHours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectExecution",
                    "args": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { interval, Subscription } from 'rxjs';\n\nimport { Execution } from '@model';\nimport { ScenarioExecutionService } from '@core/services';\n\n@Component({\n    selector: 'chutney-execution-history',\n    templateUrl: './history.component.html',\n    styleUrls: ['./history.component.scss']\n})\nexport class HistoryComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() scenarioId: string;\n    @Input() selectedExecutionId: number;\n    @Input() checkForEndExecutions = 5000;\n\n    @Output() onselectExecution: EventEmitter<Execution> = new EventEmitter<Execution>();\n    @Output() onlastIdExecution: EventEmitter<Execution> = new EventEmitter<Execution>();\n    @Output() onlastStatusExecution: EventEmitter<String> = new EventEmitter<String>();\n\n    executions: Execution[] = [];\n    selectedLast = true;\n\n    private _checkRunningExecutionsSubscription: Subscription;\n\n    constructor(\n        private scenarioExecutionService: ScenarioExecutionService,\n        private route: ActivatedRoute,\n    ) {\n    }\n\n    ngOnChanges(simpleChanges: SimpleChanges) {\n        if (simpleChanges['selectedExecutionId'] &&\n            !this.checkExecutionIdInHistory(simpleChanges['selectedExecutionId'].currentValue) &&\n            !(simpleChanges['selectedExecutionId'].currentValue == null && simpleChanges['selectedExecutionId'].previousValue != null)\n            ) {\n            this.selectedLast = true;\n            this.findScenarioExecutions();\n        }\n    }\n\n    ngOnInit() {\n        this.selectedLast = false;\n        this.route.params.subscribe((params) => {\n            if (params['execId'] && params['execId'] !== 'last') {\n                this.selectedExecutionId = params['execId'];\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.checkRunningExecutionsSubscription();\n    }\n\n    selectExecution(execution: Execution) {\n        if (this.selectedExecutionId !== execution.executionId) {\n            this.selectedExecutionId = execution.executionId;\n            this.selectedLast = (this.executions.length > 0 && this.executions[0].executionId === execution.executionId);\n            this.onselectExecution.emit(execution);\n        } else {\n            this.selectedExecutionId = null;\n            this.selectedLast = false;\n            this.onselectExecution.emit(null);\n        }\n    }\n\n    findScenarioExecutions() {\n        this.scenarioExecutionService.findScenarioExecutions(this.scenarioId)\n            .subscribe((executions) => {\n                if (executions.length > 0) {\n                    // Output last execution id if necessary\n                    if (this.selectedLast) {\n                        this.selectedExecutionId = executions[0].executionId;\n                        this.onlastIdExecution.emit(executions[0]);\n                    }\n                    // Update executions\n                    this.executions = executions;\n                    // Check if executions are running in order to auto reload\n                    this.checkRunningExecutions();\n\n                    this.onlastStatusExecution.emit(executions[0].status);\n                } else {\n                    this.onlastIdExecution.emit(Execution.NO_EXECUTION);\n                }\n            });\n    }\n\n    isOlderThan(date: Date, durationInHours: number) {\n        return new Date().getTime() - date.getTime() > durationInHours * 60 * 60 * 1000;\n    }\n\n    private checkRunningExecutions() {\n        if (this.executions.filter(execution => 'RUNNING' === execution.status || 'PAUSED' === execution.status).length > 0) {\n            this.checkRunningExecutionsSubscription();\n            this._checkRunningExecutionsSubscription = interval(this.checkForEndExecutions).subscribe(\n                (n) => this.findScenarioExecutions(),\n                (err) => console.log('Error checking running executions : ' + err),\n                () => this.checkRunningExecutionsSubscription()\n            );\n        } else {\n            this.checkRunningExecutionsSubscription();\n        }\n    }\n\n    private checkRunningExecutionsSubscription() {\n        if (this._checkRunningExecutionsSubscription) {\n            this._checkRunningExecutionsSubscription.unsubscribe();\n        }\n    }\n\n    private checkExecutionIdInHistory(executionId: number): boolean {\n        return this.executions\n            .filter(value => value.executionId === executionId)\n            .length > 0;\n\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'mixins';\n@import 'animations';\n\n@include box-shadow-animation(\n  $animation_name: history-tile-running-anim,\n  $fromOffsetX: 4px,\n  $fromOffsetY: 4px,\n  $fromBlur: 8px,\n  $fromSpread: 0,\n  $fromColor: rgba($grisfonce2, 30),\n  $toOffsetX: 8px,\n  $toOffsetY: 8px,\n  $toBlur: 16px,\n  $toSpread: 0,\n  $toColor: rgba($grisfonce2, 30)\n);\n\n.noselect {\n    -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select: none; /* Konqueror HTML */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* Internet Explorer/Edge */\n    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */\n}\n\n.panel {\n    @extend .noselect;\n}\n\nh2 {\n    font-weight: bold;\n    font-size: 15px;\n    border-bottom-width: 3px;\n    margin-bottom: 15px;\n}\n.title {\n    padding-left: 2px;\n    padding-top: 2px;\n}\n.exection-id {\n    color: black;\n    font-size: 14px;\n    font-weight: bold;\n    margin-left:4px;\n}\n.time {\n    font-size: 12px;\n    color: white;\n    padding-top: 6px;\n    padding-left: 20px;\n    padding-right: 10px;\n    line-height: 14px;\n    min-height: 40px;\n}\n\n.tile {\n    padding: 0;\n    cursor: pointer;\n    border-radius: 4px;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);\n    margin: 10px 0 10px 0;\n}\n\n.tile:hover {\n    margin: 10px -20px 10px 20px;\n    box-shadow: 8px 8px 16px rgba(0, 0, 0, 0.3);\n}\n\n.tile-ok {\n    background-color: $liens;\n}\n\n.tile-ko {\n    background-color: $labelko;\n}\n\n.tile-stop {\n    background-color: grey;\n}\n\n.tile-selected {\n    margin: 10px -20px 10px 20px;\n}\n\n.tile-running {\n  background-color: $grisclair1;\n  @include animation(\n    $animation_name: history-tile-running-anim,\n    $animation_duration: 750ms,\n    $animation_timing-function: linear,\n    $animation_iteration-count: infinite,\n    $animation_direction: alternate);\n}\n\n.fa-circle {\n    background-color: white;\n    padding: 5px;\n    border-radius: 4px;\n}\n\n.circle-ok {\n    color: #0275d8;\n}\n\n.circle-ko {\n    color: #d9534f;\n}\n\n.error {\n    background-color: rgba(255, 255, 255, 0.5);\n    border-radius: 0 0 4px 4px;\n    font-size: 12px;\n}\n",
                    "styleUrl": "./history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"executions\" class=\"panel\">\n    <h2>{{ 'scenarios.execution.history.title' | translate }}</h2>\n    <div class=\"row tile tile-click\" *ngFor=\"let execution of executions; let i = index\"\n          (click)=\"selectExecution(execution)\"\n          [ngClass]=\"{'tile-ok': execution.status == 'SUCCESS',\n                      'tile-ko': execution.status == 'FAILURE',\n                      'tile-stop': execution.status == 'STOPPED',\n                      'tile-selected': execution.executionId == selectedExecutionId,\n                      'tile-running': execution.status == 'RUNNING' || execution.status == 'PAUSED'}\">\n        <div class=\"col col-lg-3 title\">\n            <i class=\"fa fa-circle\" aria-hidden=\"true\" [ngClass]=\"{'circle-ok': execution.status == 'SUCCESS', 'circle-ko': execution.status == 'FAILURE'}\"><span class=\"exection-id\">#{{execution.executionId}}</span></i>\n        </div>\n        <div class=\"col-lg-9 time\">\n            <div *ngIf=\"selectedExecutionId === execution.executionId\" class=\"fas fa-arrow-left float-end\"></div>\n            <em *ngIf=\"!isOlderThan(execution.time, 4)\">{{execution.time | amCalendar:{sameDay:'['.concat('scenarios.execution.history.time' | translate).concat('] h:mm')} }}</em>\n            <em *ngIf=\"isOlderThan(execution.time, 4)\">{{execution.time | amDateFormat: 'DD MMM. YYYY HH:mm' }}</em>\n            <div><em>({{ 'global.time.in' | translate }} {{execution.duration | amDuration:'ms' }})</em></div>\n        </div>\n        <div *ngIf=\"execution.error\" class=\"col-lg-12 error\">{{execution.error}}</div>\n\n    </div>\n</div>\n\n"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-2968ceb624c74685c4cfb0828dc9d4dd2483e5794fef1e4dfaec08b2a89af6200dc6ed5c2d0a724d8403e448c4ccbbea6c215443e9db48416d1a011a3d14bb48",
            "file": "src/app/modules/home-page/components/home-page/home-page.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-home-page",
            "styleUrls": [
                "./home-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "homePage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomePage",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "homePageModifedSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initHomePage",
                    "args": [
                        {
                            "name": "homePage",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "homePage",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openHomePageDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HomePageCreateDialogComponent } from '../home-page-create/home-page-create-dialog.component';\nimport { EventManagerService } from '@shared';\nimport { HomePageService } from '@core/services';\nimport { HomePage, Authorization } from '@model';\n\n@Component({\n  selector: 'chutney-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HomePageComponent implements OnInit, OnDestroy {\n\n  public homePage: HomePage;\n  private homePageModifedSubscription: Subscription;\n\n  Authorization = Authorization;\n\n  constructor(\n    private homePageService: HomePageService,\n    private eventManager: EventManagerService,\n    private modalService: NgbModal\n  ) { }\n\n  ngOnInit() {\n    this.homePageService.loadHomePage().subscribe((homePage) => this.initHomePage(homePage));\n    this.homePageModifedSubscription = this.eventManager.subscribe('homePageModified', (event) => this.initHomePage(event.content));\n  }\n\n  ngOnDestroy() {\n    this.eventManager.destroy(this.homePageModifedSubscription);\n  }\n\n  private initHomePage(homePage: HomePage): void {\n    this.homePage = homePage;\n  }\n\n  openHomePageDialog() {\n    this.modalService.open(HomePageCreateDialogComponent, { size: 'lg', backdrop: 'static', windowClass: 'scenario-modal' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".home-page-actions {\n  float:right;\n}\n\n.home-page {\n  padding-top: 25px;\n  padding-left: 30px;\n  padding-right: 30px;\n  min-width: 1024px;\n}\n",
                    "styleUrl": "./home-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homePageService",
                        "type": "HomePageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "homePageService",
                        "type": "HomePageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *hasAuthorization=\"[Authorization.ADMIN_ACCESS]\"\n     class=\"m-5 home-page-actions btn-group\"\n>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"openHomePageDialog()\">\n    <span class=\"fa fa-pencil-alt\" aria-hidden=\"true\"></span> {{ 'global.actions.edit' | translate }}\n  </button>\n</div>\n\n<div class=\"home-page\">\n  <chutney-asciidoctor [doc]=\"homePage ? homePage.content : ''\" [tocLeft]=\"true\" [tocScrollHack]=\"true\">\n  </chutney-asciidoctor>\n</div>\n"
        },
        {
            "name": "HomePageCreateDialogComponent",
            "id": "component-HomePageCreateDialogComponent-46034576c59fc038e37596bf85c72b6d9ff6c448235590d83fae6c09e7a02f2e8e6016a6e651a6658d961afd92178980138c1b121841150a8e62e4c6adf19491",
            "file": "src/app/modules/home-page/components/home-page-create/home-page-create-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-home-page-create-dialog",
            "styleUrls": [
                "./home-page-create-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page-create-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "homePage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomePage",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "homePageDraftContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSaving",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "resizeInit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHomePageContentChanged",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "HomePage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToSaveResponse",
                    "args": [
                        {
                            "name": "result",
                            "type": "Observable<HomePage>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Observable<HomePage>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit} from '@angular/core';\nimport { AlertService } from '@shared';\nimport { Observable } from 'rxjs';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HomePage } from '@model';\nimport { HomePageService } from '@core/services';\n\n@Component({\n  selector: 'chutney-home-page-create-dialog',\n  templateUrl: './home-page-create-dialog.component.html',\n  styleUrls: ['./home-page-create-dialog.component.scss']\n})\nexport class HomePageCreateDialogComponent implements OnInit {\n\n  homePage: HomePage;\n  homePageDraftContent: string;\n  isSaving: boolean;\n\n  private resizeInit = 0;\n\n  constructor(public activeModal: NgbActiveModal,\n    private alertService: AlertService,\n    private homePageService: HomePageService) {\n  }\n\n  ngOnInit() {\n    this.isSaving = false;\n\n    const obs: Observable<HomePage> = this.homePageService.loadHomePage();\n    obs.subscribe((homePageResult) => {\n      this.homePage = homePageResult;\n    },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  clear() {\n    this.activeModal.dismiss('cancel');\n  }\n\n  save() {\n    this.isSaving = true;\n    this.homePage.content = this.homePageDraftContent;\n    this.subscribeToSaveResponse(\n      this.homePageService.save(this.homePage));\n  }\n\n  onHomePageContentChanged(data: string): void {\n    this.homePageDraftContent = data;\n  }\n\n  private subscribeToSaveResponse(result: Observable<HomePage>) {\n    result.subscribe((res: HomePage) =>\n      this.onSaveSuccess(res), (res: Response) =>\n        this.onSaveError(res));\n  }\n\n  private onSaveSuccess(result: HomePage) {\n    this.isSaving = false;\n    this.activeModal.dismiss(result);\n  }\n\n  private onSaveError(error) {\n    try {\n      error.json();\n    } catch (exception) {\n      error.message = error.text();\n    }\n    this.isSaving = false;\n    this.onError(error);\n  }\n\n  private onError(error) {\n    this.alertService.error(error.message);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".homepage-editor {\n    height:calc(100vh - 260px);\n    width: 99%;\n}\n",
                    "styleUrl": "./home-page-create-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "homePageService",
                        "type": "HomePageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "homePageService",
                        "type": "HomePageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form name=\"editForm\"  role=\"form\" novalidate (ngSubmit)=\"save()\" #editForm=\"ngForm\" class=\"homepage-editor\">\n    <div class=\"m-2\">\n        <h4>{{ 'home.edition.dialog.title' | translate }}</h4>\n    </div>\n    <div class=\"m-2\">\n        <ng-container *ngIf=\"homePage\">\n            <chutney-editor\n                [content]=\"homePage.content\"\n                [modes]=\"['asciidoc']\"\n                (onContentChange)=\"onHomePageContentChanged($event)\">\n            </chutney-editor>\n        </ng-container>\n    </div>\n    <div class=\"m-2 float-end\">\n        <button type=\"submit\" class=\"btn btn-outline-success me-2\">\n            <span class=\"fa fa-check\"></span>&nbsp;<span>{{ 'global.actions.record' | translate }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\" (click)=\"clear()\">\n            <span class=\"fa fa-times\"></span>&nbsp;<span>{{ 'global.actions.cancel' | translate }}</span>\n        </button>\n    </div>\n</form>\n\n"
        },
        {
            "name": "ImportButtonComponent",
            "id": "component-ImportButtonComponent-8c0d4707285f1e79390a2bd30e4dc55cb54aa69eb1181c8d3a97cabd4f610da8ad5f5e27e4a317888017249a3f2c0ab277ade42d77e0a962ee1a3f5b1802177d",
            "file": "src/app/molecules/forms/import-button/import-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-import-button",
            "styleUrls": [
                "./import-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acceptedTypes",
                    "defaultValue": "'(text/plain)|(application/json)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "submitEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFileSelection",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "import",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n    selector: 'chutney-import-button',\n    templateUrl: './import-button.component.html',\n    styleUrls: ['./import-button.component.scss']\n})\nexport class ImportButtonComponent implements OnInit {\n\n    @Input() acceptedTypes = '(text/plain)|(application/json)';\n    @Output() submitEvent = new EventEmitter();\n\n    selectedFile: File;\n\n    constructor() {}\n\n    ngOnInit() {\n        document.getElementById('input-file-browser')\n            .addEventListener('change', (e) => this.handleFileSelection(e), false);\n    }\n\n    private handleFileSelection(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        let files = [];\n        if (e.dataTransfer != null) {\n            files = Array.from(e.dataTransfer.files);\n        } else if (e.target != null) {\n            files = Array.from(e.target.files);\n        }\n\n        this.selectFile(files);\n        this.import();\n    }\n\n    private selectFile(files: Array<File>) {\n        this.selectedFile = files[0];\n    }\n\n    import() {\n        this.submitEvent.emit(this.selectedFile);\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.btn {\n    width: 118px;\n    height: 38px;\n    cursor: pointer;\n    position: relative;\n\n    input[type='file'] {\n        width: 118px;\n        height: 38px;\n        opacity: 0;\n        margin-left: -12px;\n        top: 0;\n        position: absolute;\n        cursor: pointer;\n    }\n\n}\n",
                    "styleUrl": "./import-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form enctype=\"multipart/form-data\" class=\"btn btn-success m-3\">\n    <input type=\"file\" id=\"input-file-browser\"\n           [accept]=\"acceptedTypes\"/> <span class=\"fa fa-upload\"></span>\n    {{'global.actions.import'| translate}}\n</form>\n"
        },
        {
            "name": "ImportFileComponent",
            "id": "component-ImportFileComponent-785b4b4a91315362b5770b31e945ccec48a120c267fd784f95cc6276e652d9a2a9b73056594eb11459aeafaa8e7fc7d7f07e90733e3f49967cb8dabb6b0fa9e2",
            "file": "src/app/molecules/forms/import-file/import-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-import-file",
            "styleUrls": [
                "./import-file.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-file.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "acceptedTypes",
                    "defaultValue": "'(text/plain)|(application/json)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "importEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedFiles",
                    "defaultValue": "new Array<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<File>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dragLeave",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFileSelection",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "import",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAccepted",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEqual",
                    "args": [
                        {
                            "name": "first",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "second",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "first",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "second",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNotSelected",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectFiles",
                    "args": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Array<File>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\n\n@Component({\n    selector: 'chutney-import-file',\n    templateUrl: './import-file.component.html',\n    styleUrls: ['./import-file.component.scss']\n})\nexport class ImportFileComponent implements OnInit {\n\n    @Input() multiple = false;\n    @Input() acceptedTypes = '(text/plain)|(application/json)';\n    @Output() importEvent = new EventEmitter();\n\n    selectedFiles: Array<File> = new Array<File>();\n\n    constructor() {}\n\n    ngOnInit() {\n        const dropbox = document.getElementById('drop-box');\n        dropbox.addEventListener('dragstart', (e) => this.dragStart(e), false);\n        dropbox.addEventListener('dragleave', (e) => this.dragLeave(e), false);\n        dropbox.addEventListener('dragover', (e) => this.dragOver(e), false);\n        dropbox.addEventListener('drop', (e) => this.handleFileSelection(e), false);\n\n        document.getElementById('input-file-browser')\n                .addEventListener('change', (e) => this.handleFileSelection(e), false);\n    }\n\n    private dragStart(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        e.dataTransfer.effectAllowed = 'copy';\n    }\n\n    private dragLeave(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        document.getElementById('drop-box').classList.remove('hover');\n    }\n\n    private dragOver(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n        document.getElementById('drop-box').classList.add('hover');\n    }\n\n    private handleFileSelection(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        let files = [];\n        if (e.dataTransfer != null) {\n            files = Array.from(e.dataTransfer.files);\n        } else if (e.target != null) {\n            files = Array.from(e.target.files);\n        }\n\n        if (this.multiple) {\n            this.selectFiles(files);\n        } else {\n            this.selectFile(files);\n        }\n        document.getElementById('drop-box').classList.remove('hover');\n    }\n\n    private selectFile(files: Array<File>) {\n        this.selectedFiles[0] = files[0];\n    }\n\n    private selectFiles(files: Array<File>): any {\n        for (let i = 0; i < files.length; i++) {\n            if (this.isNotSelected(files[i]) && this.isAccepted(files[i].type)) {\n                this.selectedFiles.push(files[i]);\n            }\n        }\n    }\n\n    private isNotSelected(file: File) {\n        const found = this.selectedFiles.filter(f => this.isEqual(f, file));\n        return found.length === 0;\n    }\n\n    private isEqual(first: File, second: File): boolean {\n        return Object.is(first.lastModified, second.lastModified)\n            && Object.is(first.name, second.name)\n            && Object.is(first.size, second.size)\n            && Object.is(first.type, second.type);\n    }\n\n    private isAccepted(type: string) {\n        return type.match('^' + this.acceptedTypes + '$');\n    }\n\n    import() {\n        this.importEvent.emit(this.selectedFiles);\n    }\n\n    cancel() {\n        this.selectedFiles = [];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.drop-box {\n\n    width: 426px;\n    height: 240px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n\n    border: 2px dashed #bbb;\n    -moz-border-radius: 5px;\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n    padding: 25px;\n    text-align: center;\n    color: #bbb;\n    transition: border-width 0.5s linear;\n\n    .btn-file-browser {\n\n        height: 75px;\n        width: 75px;\n        border-radius: 100px;\n        position: relative;\n\n        display:flex;\n        justify-content:center;\n        align-items: center;\n\n        overflow: hidden;\n        background-image: linear-gradient(to bottom, $bleu1 50%, $blanc 50%);\n        background-size: 100% 200%;\n        transition: all 1s;\n        color: $blanc;\n        font-size: 30px;\n\n        input[type='file'] {\n            height: 75px;\n            width: 75px;\n            position: absolute;\n            top: 0;\n            left: 0;\n            opacity: 0;\n            cursor: pointer;\n        }\n\n        &:hover {\n            background-position: 0 -100%;\n            color: $bleu1;\n        }\n\n    }\n}\n\n.hover {\n    border: 2px solid $vert1;\n}\n",
                    "styleUrl": "./import-file.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form enctype=\"multipart/form-data\" (ngSubmit)=\"import()\">\n    <div class=\"drop-box mb-2\" id=\"drop-box\">\n        <div class=\"btn-file-browser\">\n            <input class=\"form-control-file\" type=\"file\" id=\"input-file-browser\"\n                   [multiple]=\"multiple\"\n                   [accept]=\"acceptedTypes\"\n            />\n            <i class=\"fas fa-upload\"></i>\n        </div>\n    </div>\n    <button type=\"submit\" id=\"btn-import\" class=\"btn btn-success\">\n        <span class=\"fa fa-upload\"></span> {{'global.actions.import' | translate}}\n    </button>\n    <button type=\"button\" class=\"btn btn-secondary ms-2\" (click)=\"cancel()\"\n            title=\"{{'global.actions.cancel' | translate}}\">\n        {{'global.actions.cancel' | translate}}\n    </button>\n    <ul id=\"selected-files\">\n        <li *ngFor=\"let file of selectedFiles\">\n            {{ file.name }}\n        </li>\n    </ul>\n</form>\n\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-51148d0c6b3c5fdbe19fcea9878aa361b0261fbdf7a3da68da6578cc0f07f683dd6525e354e9fa3dc509653b39ce5d9de536f94e101e290511d7b239e93ea9f9",
            "file": "src/app/atoms/forms/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "template": "<input\n    id=\"{{id}}\"\n    name=\"{{id}}\"\n    type=\"{{type}}\"\n    placeholder=\"{{placeholder}}\"\n    [ngModel]=\"model\"\n    (ngModelChange)=\"onInputChange($event)\"\n    class=\"form-control\"\n    [ngClass]=\"{'invalid': !validate(model)}\"\n/>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validate",
                    "defaultValue": "(_) => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\nselector: 'chutney-forms-input',\ntemplate: `\n    <input\n        id=\"{{id}}\"\n        name=\"{{id}}\"\n        type=\"{{type}}\"\n        placeholder=\"{{placeholder}}\"\n        [ngModel]=\"model\"\n        (ngModelChange)=\"onInputChange($event)\"\n        class=\"form-control\"\n        [ngClass]=\"{'invalid': !validate(model)}\"\n    />\n`,\nstyleUrls: ['./input.component.scss']\n})\nexport class InputComponent {\n\n    @Input() id: string;\n    @Input() placeholder: string;\n    @Input() type = 'text';\n    @Input() model: string;\n    @Output() modelChange = new EventEmitter<string>();\n    @Input() validate: (value: string) => boolean = (_) => true;\n\n    constructor() { }\n\n    onInputChange(newValue: string) {\n        this.model = newValue;\n        this.modelChange.emit(this.model);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\ninput {\n    border: solid 1px $grisclair1;\n    background-color: $blanc;\n    border-radius: 0;\n    caret-color: $bleu1;\n    font-family: Ubuntu;\n    font-size: 16px;\n\n    &::placeholder {\n        color: $grisclair1;\n        opacity: 1; /* Firefox */\n    }\n    &:focus {\n        border-color: $bleu1;\n    }\n    &.invalid {\n        border-color: $labelko;\n        color: $labelko;\n        &::placeholder {\n            color: $labelko;\n        }\n    }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            }
        },
        {
            "name": "InputLineComponent",
            "id": "component-InputLineComponent-2dd08d05382c396f91db7f6b0124c6d421e021ece42ec793c222c757c99608a9d9c025f27468e0996b5e78d234cc0c143507f004f4563e80325d320e4c887b7a",
            "file": "src/app/molecules/forms/input-line/input-line.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-input-line",
            "styleUrls": [
                "./input-line.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-line.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validate",
                    "defaultValue": "(_) => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\nselector: 'chutney-forms-input-line',\ntemplateUrl: './input-line.component.html',\nstyleUrls: ['./input-line.component.scss']\n})\nexport class InputLineComponent {\n\n    @Input() id: string;\n    @Input() label: string;\n    @Input() placeholder: string;\n    @Input() type = 'text';\n    @Input() model: string;\n    @Output() modelChange = new EventEmitter<string>();\n    @Input() validate: (value: string) => boolean = (_) => true;\n\n    constructor() { }\n\n    onInputChange(newValue: string) {\n        this.model = newValue;\n        this.modelChange.emit(this.model);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\n    label {\n        padding-left: 0;\n        text-align: left;\n    }\n}\n",
                    "styleUrl": "./input-line.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "templateData": "<div class=\"form-group row\">\n    <label for=\"{{id}}\" class=\"col-3 col-form-label\">{{label}}</label>\n    <div class=\"col-9 pe-0\">\n        <chutney-forms-input id=\"{{id}}\" placeholder=\"{{placeholder}}\" [model]=\"model\" (modelChange)=\"onInputChange($event)\" [validate]=\"validate\"></chutney-forms-input>\n    </div>\n</div>\n"
        },
        {
            "name": "JiraComponent",
            "id": "component-JiraComponent-5d9bc42d893ee70f1f190d8b6c4473d1377b7f607efa3f44c5dc8b13db97080fe96294b32e78e3954e9aac2c6686524015f0b9c79bbf7f78245028a763bf0234",
            "file": "src/app/modules/plugins/components/jira/jira.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-config-jira",
            "styleUrls": [
                "./jira.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./jira.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configuration",
                    "defaultValue": "new JiraPluginConfiguration('', '', '')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JiraPluginConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "configurationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isErrorNotification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "savedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initTranslation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadConfiguration",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { JiraPluginConfiguration } from '@core/model/jira-plugin-configuration.model';\nimport { JiraPluginConfigurationService } from '@core/services/jira-plugin-configuration.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { delay } from '@shared/tools';\nimport { ValidationService } from '../../../../molecules/validation/validation.service';\n\n\n@Component({\n    selector: 'chutney-config-jira',\n    templateUrl: './jira.component.html',\n    styleUrls: ['./jira.component.scss']\n})\nexport class JiraComponent implements OnInit {\n\n    configuration: JiraPluginConfiguration = new JiraPluginConfiguration('', '', '');\n    configurationForm: FormGroup;\n\n    message;\n    private savedMessage: string;\n    isErrorNotification: boolean = false;\n\n    constructor(private configurationService: JiraPluginConfigurationService,\n                private translate: TranslateService,\n                private validationService: ValidationService,\n                private formBuilder: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.configurationForm = this.formBuilder.group({\n            url: ['', Validators.required],\n            username: '',\n            password: ''\n        });\n\n        this.loadConfiguration();\n        this.initTranslation();\n    }\n\n    private initTranslation() {\n        this.translate.get('global.actions.done.saved').subscribe((res: string) => {\n            this.savedMessage = res;\n        });\n    }\n\n    loadConfiguration() {\n        this.configurationService.get().subscribe(\n            (config: JiraPluginConfiguration) => {\n                this.configuration = config;\n                this.configurationForm.controls['url'].patchValue(config.url);\n                this.configurationForm.controls['username'].patchValue(config.username);\n                this.configurationForm.controls['password'].patchValue(config.password);\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    save() {\n        const url = this.configurationForm.value['url'] ? this.configurationForm.value['url'] : '';\n        const username = this.configurationForm.value['username'] ? this.configurationForm.value['username'] : '';\n        const password = this.configurationForm.value['password'] ? this.configurationForm.value['password'] : '';\n        this.configuration = new JiraPluginConfiguration(url, username, password);\n\n        this.configurationService.save(this.configuration).subscribe(\n            (res) => {\n                this.notify(this.savedMessage, false);\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    notify(message: string, isErrorNotification: boolean) {\n        (async () => {\n            this.isErrorNotification = isErrorNotification;\n            this.message = message;\n            await delay(3000);\n            this.message = null;\n        })();\n    }\n\n    isValid(): boolean {\n        return this.validationService.isValidUrl(this.configurationForm.value['url'])\n            && this.validationService.isNotEmpty(this.configurationForm.value['url']);\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"alias\";\n\n.box2 {\n    display: inline-block;\n    margin: 1em;\n}\n\n.notification {\n    position: absolute;\n    top: 0;\n    width: 100%;\n}\n",
                    "styleUrl": "./jira.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "configurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"isErrorNotification ? 'bg-danger' : 'bg-info'\" class=\"notification text-center text-white\">\n    <strong *ngIf=\"message\">{{ message }}</strong>\n</div>\n\n<div [formGroup]=\"configurationForm\">\n    <fieldset class=\"w99 border p-2\">\n        <legend class=\"w-auto ps-3 pe-3 mb-0 float-none\">\n            <span>Configuration jira </span>\n        </legend>\n\n        <div>\n            <div class=\"row m-1\">\n                <label class=\"col-2 col-form-label\" for=\"url\">URL</label>\n                <div class=\"col-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"url\" formControlName=\"url\"/>\n                </div>\n            </div>\n            <div class=\"row m-1\">\n                <label class=\"col-2 col-form-label\" for=\"username\">username</label>\n                <div class=\"col-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"username\" formControlName=\"username\"/>\n                </div>\n            </div>\n            <div class=\"row m-1\">\n                <label class=\"col-2 col-form-label\" for=\"password\">password</label>\n                <div class=\"col-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"password\" formControlName=\"password\"/>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"box2\">\n            <button type=\"button\" [disabled]=\"!isValid()\" class=\"btn btn-success\" (click)=\"save()\">\n                Save\n                <span class=\"fa fa-check\"></span>\n            </button>\n        </div>\n    </fieldset>\n</div>\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-be70cbbc3ffa27bcc8db4930902518d74e7208ce57fa07be390e96a8e30f161ecb5d1623559f5efe8be8f7de4cd2db26d43ef017caf3c0ad348c8297eb647b78",
            "file": "src/app/atoms/buttons/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-link",
            "styleUrls": [
                "./link.component.scss"
            ],
            "styles": [],
            "template": "<a class=\"chutney-link\" >\n    {{model}}\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\nselector: 'chutney-link',\ntemplate: `\n    <a class=\"chutney-link\" >\n        {{model}}\n    </a>\n`,\nstyleUrls: ['./link.component.scss']\n})\nexport class LinkComponent {\n\n    @Input() model: string;\n\n    constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\na.chutney-link {\n    text-decoration: none !important;\n    color: $liens !important;\n    font-family: Ubuntu;\n    font-size: 16px;\n    font-weight: bold;\n    cursor: pointer;\n\n    &:hover {\n        color: $bleu2 !important;\n    }\n}\n",
                    "styleUrl": "./link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            }
        },
        {
            "name": "LinkifierComponent",
            "id": "component-LinkifierComponent-5f8ac6b80660d539e6a1f029584f46bb3c167caf4bbee186cf26f7b4ed82044b8bd64c2677bcbf3ce5524377c6c4675f0909e309f31cfbddc3e9d2cf2fdf74b4",
            "file": "src/app/modules/plugins/components/linkifier/linkifier.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-config-linkifier",
            "styleUrls": [
                "./linkifier.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./linkifier.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isErrorNotification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "linkifierForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "linkifiers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Linkifier>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addLinkifier",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLinkifiers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isErrorNotification",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "linkifier",
                            "type": "Linkifier",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ValidationService } from '../../../../molecules/validation/validation.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LinkifierService } from '@core/services';\nimport { delay } from '@shared/tools';\nimport { Linkifier } from '@model';\n\n\n@Component({\n    selector: 'chutney-config-linkifier',\n    templateUrl: './linkifier.component.html',\n    styleUrls: ['./linkifier.component.scss']\n})\nexport class LinkifierComponent implements OnInit {\n\n    linkifierForm: FormGroup;\n\n    message;\n    isErrorNotification: boolean = false;\n\n    linkifiers: Array<Linkifier> = [];\n\n    constructor(private fb: FormBuilder,\n                private linkifierService: LinkifierService,\n                private validationService: ValidationService) {\n    }\n\n    ngOnInit() {\n        this.linkifierForm = this.fb.group({\n            pattern: ['', Validators.required],\n            link: ['', Validators.required],\n        });\n\n        this.loadLinkifiers();\n    }\n\n    private loadLinkifiers() {\n        this.linkifierService.loadLinkifiers().subscribe(\n            (linkifiers: Array<Linkifier>) => {\n                this.linkifiers = linkifiers;\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    isValid(): boolean {\n        return this.validationService.isValidPattern(this.linkifierForm.value['pattern'])\n            && this.validationService.isNotEmpty(this.linkifierForm.value['pattern'])\n            && this.validationService.isValidUrl(this.linkifierForm.value['link'])\n            && this.validationService.isNotEmpty(this.linkifierForm.value['link']);\n    }\n\n    addLinkifier() {\n        const linkifier = new Linkifier(this.linkifierForm.value['pattern'], this.linkifierForm.value['link']);\n        this.linkifierService.add(linkifier).subscribe(\n            (res) => {\n                this.notify('Linkifier added', false);\n                this.loadLinkifiers();\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    remove(linkifier: Linkifier, i: number) {\n        this.linkifiers.splice(i);\n        this.linkifierService.remove(linkifier).subscribe(\n            (res) => {\n                this.notify('Linkifier removed', false);\n                this.loadLinkifiers();\n            },\n            (error) => {\n                this.notify(error.error, true);\n            }\n        );\n    }\n\n    notify(message: string, isErrorNotification: boolean) {\n        (async () => {\n            this.isErrorNotification = isErrorNotification;\n            this.message = message;\n            await delay(3000);\n            this.message = null;\n        })();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"alias\";\n\n.box2 {\n    display: inline-block;\n    margin: 1em;\n}\n\n.notification {\n    position: absolute;\n    top: 0;\n    width: 100%;\n}\n",
                    "styleUrl": "./linkifier.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkifierService",
                        "type": "LinkifierService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkifierService",
                        "type": "LinkifierService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n    <fieldset class=\"w99 border p-2\">\n        <legend class=\"w-auto px-3 mb-0 float-none\">\n            <span>Navigation Patterns </span>\n        </legend>\n        <div [ngClass]=\"isErrorNotification ? 'bg-danger' : 'bg-info'\" class=\"notification text-center text-white\">\n            <strong *ngIf=\"message\">{{ message }}</strong>\n        </div>\n\n        <div class=\"row m-1\" [formGroup]=\"linkifierForm\">\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"pattern\">Pattern</label>\n                <input type=\"text\" class=\"form-control\" id=\"pattern\" formControlName=\"pattern\"\n                       placeholder=\"ex. #(?&lt;id&gt;[0-9]+)\"/>\n                <small id=\"patternHelpBlock\" class=\"form-text text-muted\">\n                    Given the pattern (?&lt;project&gt;[a-zA-Z0-9_-]+)#(?&lt;id&gt;[0-9]+), when you will write\n                    \"fake#42\" in a scenario title\n                </small>\n            </div>\n            <div class=\"col\">\n                <label class=\"sr-only\" for=\"link\">Link</label>\n                <input type=\"text\" class=\"form-control\" id=\"link\" formControlName=\"link\"\n                       placeholder=\"ex. https://github.com/chutney-testing/chutney/issues/$<id>\"/>\n                <small id=\"linkHelpBlock\" class=\"form-text text-muted\">\n                    Then the template https://github.com/chutney-testing/$&lt;project&gt;/issues/$&lt;id&gt; will become a real\n                    link to https://github.com/chutney-testing/fake/issues/42\n                </small>\n            </div>\n        </div>\n\n        <div class=\"box2\">\n            <button type=\"submit\" [disabled]=\"!isValid()\" class=\"btn btn-success\" (click)=\"addLinkifier()\">\n                Add\n                <span class=\"fa fa-check\"></span>\n            </button>\n        </div>\n\n        <table class=\"table table-sm table-striped table-hover\">\n            <thead>\n            <tr>\n                <th scope=\"col\" class=\"w50\">Pattern</th>\n                <th scope=\"col\" class=\"w50\">Link</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let linkifier of linkifiers; let i = index\">\n                <td> {{ linkifier.pattern }} </td>\n                <td> {{ linkifier.link }} </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-outline-danger delete-button-height ms-1\"\n                            (click)=\"remove(linkifier, i)\"\n                            title=\"{{'global.actions.delete' | translate}}\">\n                        <span class=\"fa fa-trash\"></span>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </fieldset>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-d61be9e1efd7337b6e7078920dfd71958440cc6b866dab176dce6cf5bfa15d4205a3262c7273714d1dcc4964126781ba90e2f041660460d52e7e434e70f0e5ce",
            "file": "src/app/core/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "connectionError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "forwardUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paramsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "queryParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { LoginService } from '@core/services';\n\n@Component({\n  selector: 'chutney-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnDestroy {\n\n  username: string;\n  password: string;\n  connectionError: string;\n  action: string;\n\n  private forwardUrl: string;\n  private paramsSubscription: Subscription;\n  private queryParamsSubscription: Subscription;\n\n  constructor(\n    private loginService: LoginService,\n    private route: ActivatedRoute,\n  ) {\n\n    this.paramsSubscription = this.route.params.subscribe(params => {\n      this.action = params['action'];\n    });\n\n    this.queryParamsSubscription = this.route.queryParams.subscribe(params => {\n      this.forwardUrl = params['url'];\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.paramsSubscription) {\n        this.paramsSubscription.unsubscribe();\n    }\n    if (this.queryParamsSubscription) {\n        this.queryParamsSubscription.unsubscribe();\n    }\n  }\n\n  login() {\n    this.loginService.login(this.username, this.password)\n      .subscribe(\n        user => this.loginService.navigateAfterLogin(this.forwardUrl),\n        error => {\n            this.connectionError = error.error.message;\n            this.action = null;\n        }\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.login{\n    background-color: $bleu2;\n    height: 100%;\n}\n\n.form-login {\n    width:350px;\n    padding-top: 25vh;\n}\n\n.login-button {\n    background-color:$bleu4;\n    color: white;\n}\n\n.form-control{\n    color: black;\n    border-color: black ;\n    background-color: white  ;\n    &:focus {\n        box-shadow: 0 0 0 0.3rem rgba(black, 0.25);\n    }\n}\n\n.label {\n    display: inline-block;\n    max-width:100%;\n    margin-bottom: 10px;\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"login m-0\">\n    <form name=\"form\" class=\"container form-login \" (ngSubmit)=\"login()\" novalidate>\n        <div class=\"form-row d-flex justify-content-center mb-3\">\n            <img src=\"../../../assets/logo/logo-circle.png\"/>\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"username\" type=\"text\" class=\"form-control\" name=\"username\"\n                   placeholder=\"{{ 'login.username' | translate }}\" [(ngModel)]=\"username\"/>\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"password\" type=\"password\" class=\"form-control\" name=\"password\"\n                   placeholder=\"{{ 'login.password' | translate }}\" [(ngModel)]=\"password\"/>\n        </div>\n\n        <div class=\"form-row d-flex justify-content-center\">\n            <button type=\"submit\" class=\"btn me-2 login-button\">\n                <span>{{ 'global.actions.login' | translate }}</span>\n            </button>\n        </div>\n    </form>\n    <div class=\"container col-md-6\">\n        <div *ngIf=\"connectionError\" class=\"row text-danger d-flex justify-content-center\"><b>{{ connectionError }}</b></div>\n        <div *ngIf=\"action\" class=\"row text-info d-flex justify-content-center\">\n            <b>{{ 'login.'+action | translate }}</b>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "MainMenuComponent",
            "id": "component-MainMenuComponent-2b6ed57b47a65b902947a921d516100246ccc7ba70fe1f30b3d209e2706564481d112f56f06a6a897cb30deee5dd6a71b1805bb7342fa0e0ad3643ad2ed1af39",
            "file": "src/app/organisms/main-menu/main-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-main-menu",
            "styleUrls": [
                "./main-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { LoginService } from '@core/services';\nimport { User, Authorization } from '@model';\n\n@Component({\n    selector: 'chutney-main-menu',\n    templateUrl: './main-menu.component.html',\n    styleUrls: ['./main-menu.component.scss']\n})\nexport class MainMenuComponent {\n    user$: Observable<User>;\n    Authorization = Authorization;\n\n    constructor(\n        private loginService: LoginService,\n        private router: Router\n    ) {\n        this.user$ = this.loginService.getUser();\n    }\n\n    logout() {\n        this.loginService.logout();\n    }\n\n    login() {\n        this.router.navigate(['login']);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'menu';\n\nnav.navbar {\n    font-family: \"Montserrat\",Helvetica,Arial,sans-serif;\n    background-color: $blanc;\n    height: $nav-height;\n}\n\nnav.fixed-top {\n    z-index:300;\n}\n\nchutney-menu-item {\n    align-self: center;\n}\n\n.menu-principal {\n    margin-left: $profile-width;\n    padding-left: 10px;\n    width: 100%;\n\n    .separator {\n        width: 5px;\n    }\n}\n\n.dropbtn {\n    height: $nav-height;\n    background-color: white;\n    color: $grisclair1;\n    padding: 16px 5px;\n    font-size: 14px;\n    border: none;\n    cursor: pointer;\n\n    span {\n        margin-right: 5px;\n    }\n}\n\n.dropdown {\n    position: relative;\n    display: inline-block;\n    margin-left: 5px;\n}\n\n.dropdown-content {\n    display: none;\n    position: absolute;\n    right: 0;\n    background-color: rgba(255, 255, 255, 0.9);\n    min-width: 100px;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n    z-index: 1;\n}\n\n.dropdown:hover .dropdown-content {\n    display: block;\n}\n",
                    "styleUrl": "./main-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<nav class=\"navbar navbar-expand-lg navbar-light fixed-top ms-3\">\n    <div class=\"container-fluid py-0\">\n        <div class=\"collapse navbar-collapse flex-grow-1 text-right\">\n            <ul class=\"navbar-nav flex-nowrap\" *ngIf=\"(user$ | async) as user\">\n                <chutney-menu-item *hasAuthorization=\"{\n                authorizations: [\n                    Authorization.SCENARIO_READ,\n                    Authorization.SCENARIO_WRITE,\n                    Authorization.SCENARIO_EXECUTE\n                ],\n                user: user\n           }\" [style]=\"''\" [route]=\"'/scenario'\" [label]=\"'menu.principal.scenarios' | translate\"\n                    [img_src]=\"'/assets/icons/tests.png'\" [img_src_selected]=\"'/assets/icons/tests-selected.png'\">\n                </chutney-menu-item>\n                <li class=\"separator\"></li>\n                <chutney-menu-item *hasAuthorization=\"{\n                            authorizations: [\n                                Authorization.CAMPAIGN_READ,\n                                Authorization.CAMPAIGN_WRITE,\n                                Authorization.CAMPAIGN_EXECUTE\n                            ],\n                            user: user\n                    }\" [style]=\"'nav-link'\" [route]=\"'/campaign'\" [label]=\"'menu.principal.campaigns' | translate\"\n                    [img_src]=\"'/assets/icons/tests.png'\" [img_src_selected]=\"'/assets/icons/tests-selected.png'\">\n                </chutney-menu-item>\n                <li class=\"separator\"></li>\n                <chutney-menu-item *hasAuthorization=\"{\n                            authorizations: [\n                                Authorization.COMPONENT_READ,\n                                Authorization.COMPONENT_WRITE\n                            ],\n                            user: user\n                    }\" [style]=\"'nav-link'\" [route]=\"'/component'\" [label]=\"'menu.principal.component' | translate\"\n                    [img_src]=\"'/assets/icons/repository.png'\" [img_src_selected]=\"'/assets/icons/repository-selected.png'\">\n                </chutney-menu-item>\n                <chutney-menu-item *hasAuthorization=\"{\n                            authorizations: [\n                                Authorization.GLOBAL_VAR_READ,\n                                Authorization.GLOBAL_VAR_WRITE\n                            ],\n                            user: user\n                    }\" [style]=\"'nav-link'\" [route]=\"'/variable'\" [label]=\"'menu.principal.variable' | translate\"\n                    [img_src]=\"'/assets/icons/repository.png'\" [img_src_selected]=\"'/assets/icons/repository-selected.png'\">\n                </chutney-menu-item>\n                <chutney-menu-item *hasAuthorization=\"{\n                            authorizations: [\n                                Authorization.DATASET_READ,\n                                Authorization.DATASET_WRITE\n                            ],\n                            user: user\n                    }\" [style]=\"'nav-link'\" [route]=\"'/dataset'\" [label]=\"'menu.principal.dataset' | translate\"\n                    [img_src]=\"'/assets/icons/repository.png'\" [img_src_selected]=\"'/assets/icons/repository-selected.png'\">\n                </chutney-menu-item>\n            </ul>\n            <ul class=\"navbar-nav ms-auto flex-nowrap\" *ngIf=\"(user$ | async) as user\">\n                <chutney-menu-item [style]=\"'nav-link'\" [route]=\"'/documentation'\"\n                    [label]=\"'menu.principal.documentation' | translate\" [icon_fa_class]=\"'fa-book'\">\n                </chutney-menu-item>\n                <div class=\"dropdown\" *hasAuthorization=\"{\n                authorizations: [\n                    Authorization.ENVIRONMENT_ACCESS,\n                    Authorization.ADMIN_ACCESS\n                ],\n                user: user\n           }\">\n                    <button class=\"dropbtn\"><span class=\"fa fa-cog\"></span>{{'menu.principal.admin' |\n                        translate}}</button>\n                    <div class=\"dropdown-content\">\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ENVIRONMENT_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/environmentAdmin'\"\n                            [label]=\"'menu.principal.targets' | translate\" [icon_fa_class]=\"'fa-cogs'\">\n                        </chutney-menu-item>\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ADMIN_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/plugins'\"\n                            [label]=\"'menu.principal.plugins' | translate\" [icon_fa_class]=\"'fa-cog'\">\n                        </chutney-menu-item>\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ADMIN_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/backups'\"\n                            [label]=\"'menu.principal.backups' | translate\" [icon_fa_class]=\"'fa-archive'\">\n                        </chutney-menu-item>\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ADMIN_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/roles'\"\n                            [label]=\"'menu.principal.roles' | translate\" [icon_fa_class]=\"'fa-user-shield'\">\n                        </chutney-menu-item>\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ADMIN_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/databaseAdmin'\"\n                            [label]=\"'menu.principal.databaseAdmin' | translate\" [icon_fa_class]=\"'fa-database'\">\n                        </chutney-menu-item>\n                        <chutney-menu-item *hasAuthorization=\"{\n                                    authorizations: [\n                                        Authorization.ADMIN_ACCESS\n                                    ],\n                                    user: user\n                               }\" [style]=\"'nav-link'\" [route]=\"'/configurationAgent'\"\n                            [label]=\"'menu.principal.workers' | translate\" [icon_fa_class]=\"'fa-bars'\">\n                        </chutney-menu-item>\n                    </div>\n                </div>\n\n                <div class=\"dropdown\" *ngIf=\"user?.id\">\n                    <button class=\"dropbtn\"><span class=\"fa fa-user\"></span>{{user.id}}</button>\n                    <div class=\"dropdown-content\">\n                        <chutney-menu-item (clickEvent)=\"logout()\" [label]=\"'menu.principal.signOut' | translate\"\n                            [icon_fa_class]=\"'fa-sign-out-alt'\">\n                        </chutney-menu-item>\n                    </div>\n                </div>\n                <chutney-menu-item *ngIf=\"user?.id == ''\" (clickEvent)=\"login()\"\n                    [label]=\"'menu.principal.signIn' | translate\" [icon_fa_class]=\"'fa-sign-in-alt'\">\n                </chutney-menu-item>\n            </ul>\n        </div>\n    </div>\n</nav>\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-302aa60221d788cbf3ff4601ae638737403b76e90e5e3180b6a9af9505b6e6318ac1077b733a7670658d3d61e07e149b5d02092c3a1a5d23bc909456a723e31a",
            "file": "src/app/molecules/navigation/primary/menu-item/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-menu-item",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon_fa_class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img_src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img_src_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'chutney-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss']\n})\nexport class MenuItemComponent implements OnInit {\n\n    @Input() route: string;\n    @Input() style: string;\n    @Input() label: string;\n    @Input() img_src: string;\n    @Input() img_src_selected: string;\n    @Input() icon_fa_class: string;\n    @Output() clickEvent = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onClick(e) {\n    e.stopPropagation();\n    if (this.route == null) {\n        this.clickEvent.emit();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-item {\n    white-space: nowrap;\n}\n.nav-link {\n    img {\n        height: 1rem;\n    }\n}\n.nav-link.active {\n    font-weight: bold;\n}\n",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<li class=\"nav-item pointer\">\n    <a *ngIf=\"route\" class=\"nav-link\" routerLink=\"{{route}}\" [routerLinkActive]=\"route == null ? '' : 'active'\" #rla=\"routerLinkActive\">\n        <img *ngIf=\"img_src\" src=\"{{ (rla && rla.isActive) ? img_src_selected : img_src}}\" />\n        <span *ngIf=\"icon_fa_class!==undefined\" class=\"fa {{icon_fa_class}}\"></span>\n        {{label}}\n    </a>\n    <a *ngIf=\"!route\" class=\"nav-link\" (click)=\"onClick($event)\">\n        <img *ngIf=\"img_src\" src=\"{{ (rla && rla.isActive) ? img_src_selected : img_src}}\" />\n        <span *ngIf=\"icon_fa_class!==undefined\" class=\"fa {{icon_fa_class}}\"></span>\n        {{label}}\n    </a>\n</li>\n"
        },
        {
            "name": "NetworkGraphComponent",
            "id": "component-NetworkGraphComponent-5ac0723e24da247917fdc874b8ad72d6dc740d72347d4c120592ad8cb10bbcf6448f67fe7416dc44d5320089fe49f8ac3c1ee683b3ac905c7198a4261ea1cb3b",
            "file": "src/app/modules/agent-network/components/network-graph/network-graph.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-network-graph",
            "styleUrls": [
                "./network-graph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./network-graph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "agentGraphe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "AgentGraphe",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agentNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Agent>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "environments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<EnvironmentMetadata>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "targetFilter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "targetReachByAgent",
                    "defaultValue": "new Map<string, Array<string>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "loadDescription",
                    "args": [
                        {
                            "name": "agentGraphe",
                            "type": "AgentGraphe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "agentGraphe",
                            "type": "AgentGraphe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadUnreachableTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AgentGraphe, Agent, EnvironmentMetadata } from '@model';\nimport { EnvironmentAdminService } from '@core/services';\n\n@Component({\n  selector: 'chutney-network-graph',\n  templateUrl: './network-graph.component.html',\n  styleUrls: ['./network-graph.component.scss']\n})\nexport class NetworkGraphComponent {\n\n  agentNodes: Array<Agent>;\n\n  environments: Array<EnvironmentMetadata> = [];\n  targetReachByAgent = new Map<string, Array<string>>();\n  targetFilter = '';\n\n  public constructor( private environmentAdminService: EnvironmentAdminService) {\n  }\n\n  @Input() message: string;\n  @Input()\n  set agentGraphe(agentGraphe: AgentGraphe) {\n    this.loadDescription(agentGraphe);\n    this.loadUnreachableTarget();\n  }\n\n  private loadDescription(agentGraphe: AgentGraphe): void {\n    this.agentNodes = agentGraphe.agents;\n  }\n\n  loadUnreachableTarget() {\n    this.environmentAdminService.listEnvironments().subscribe(\n        (res) => {\n            this.environments = res.sort((t1, t2) =>  t1.name.toUpperCase() > t2.name.toUpperCase() ? 1 : 0);\n            this.targetReachByAgent = new Map<string, Array<string>>();\n\n            this.agentNodes.forEach(agent => {\n                agent.reachableTargets.forEach(target => {\n                  if (this.targetReachByAgent.has(target.name)) {\n                    this.targetReachByAgent.get(target.name).push(agent.info.name);\n                  } else {\n                    this.targetReachByAgent.set(target.name, [agent.info.name]);\n                  }\n                });\n            });\n        },\n        (error) =>  console.log(error)\n    );\n\n}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fieldset-legend {\n    width: auto; \n    font-size: 1.2rem;\n}\n",
                    "styleUrl": "./network-graph.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "agentGraphe": {
                    "name": "agentGraphe",
                    "setSignature": {
                        "name": "agentGraphe",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "agentGraphe",
                                "type": "AgentGraphe",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "agentGraphe",
                                "type": "AgentGraphe",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngIf=\"message\" class=\"alert alert-info\" role=\"alert\">\n    {{ message }}\n</div>\n<fieldset class=\"border p-2 mt-4\">\n    <legend class=\"px-3 fw-bold fieldset-legend\">\n        <span class=\"legend-title\">{{ 'admin.agents.graph.agents.title' | translate }}</span>\n    </legend>\n\n    <table class=\"table table-striped\">\n        <thead class=\"text\">\n        <tr>\n            <th scope=\"col\">{{ 'admin.agents.graph.agents.name' | translate }}</th>\n            <th scope=\"col\">{{ 'admin.agents.graph.agents.url' | translate }}</th>\n            <th scope=\"col\">{{ 'admin.agents.graph.agents.reach' | translate }}</th>\n        </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let agent of agentNodes\">\n                <td>\n                    {{ agent.info.name }}\n                </td>\n                <td>\n                    {{ agent.info.host }} : {{ agent.info.port }}\n                </td>\n                <td>\n                    <ng-container *ngIf=\"agent.reachableAgents.length > 0\">\n                        <p *ngFor=\"let agentReachable of agent.reachableAgents\">\n                            {{ agentReachable }}\n                        </p>\n                    </ng-container>\n                    <span *ngIf=\"agent.reachableAgents.length == 0\">{{ 'admin.agents.graph.agents.noreach' | translate }}</span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</fieldset>\n\n<fieldset class=\"border p-2 mt-4\">\n    <legend class=\"px-3 fw-bold fieldset-legend\">\n        <span class=\"legend-title\">{{ 'admin.agents.graph.targets.title' | translate }}</span>\n    </legend>\n    <input name=\"search\" type=\"text\" class=\"form-control mb-2\" placeholder=\"{{ 'admin.agents.graph.targets.search' | translate }}\" [(ngModel)]=\"targetFilter\"/>\n    <table class=\"table\">\n        <thead>\n        <tr>\n            <th scope=\"col\">{{ 'admin.agents.graph.targets.environment' | translate }}</th>\n            <th scope=\"col\">{{ 'admin.agents.graph.targets.name' | translate }}</th>\n            <th scope=\"col\">{{ 'admin.agents.graph.targets.url' | translate }}</th>\n            <th scope=\"col\">{{ 'admin.agents.graph.targets.reachable' | translate }}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <ng-container *ngFor=\"let environment of environments\">\n            <tr *ngFor=\"let target of environment.targets | searchTextPipe: targetFilter:['name']\"\n                [ngClass]=\"{'table-danger':!targetReachByAgent.has(target.name)}\">\n                <td>\n                    {{ environment.name }}\n                </td>\n                <td>\n                    {{ target.name }}\n                </td>\n                <td>\n                    {{ target.url }}\n                </td>\n                <td>\n                    <ng-container *ngIf=\"targetReachByAgent.has(target.name)\">\n                        <p *ngFor=\"let agentReachable of targetReachByAgent.get(target.name)\">\n                            {{ agentReachable }}\n                        </p>\n                    </ng-container>\n                    <span *ngIf=\"!targetReachByAgent.has(target.name)\">{{ 'admin.agents.graph.targets.unreachable' | translate }}</span>\n                </td>\n            </tr>\n        </ng-container>\n        </tbody>\n    </table>\n\n</fieldset>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ParametersComponent",
            "id": "component-ParametersComponent-5dda51ad4eda88439040db8ec5aa5a3177b15b371402a58a42513815df4b7053759687db0b9cf64d82012ae0e94fb99f422b0298b0be7e0a9905d60979fc8bde",
            "file": "src/app/modules/component/components/sub/parameters/parameters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-parameters-component",
            "styleUrls": [
                "./parameters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parameters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editableComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ComponentTask",
                    "decorators": []
                },
                {
                    "name": "parentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "collapseParam",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFormArray",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeParameters",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchCollapseParam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, FormArray } from '@angular/forms';\n\nimport {\n    ComponentTask,\n    Authorization\n} from '@model';\nimport { LoginService } from '@core/services';\n\n\n@Component({\n    selector: 'chutney-parameters-component',\n    templateUrl: './parameters.component.html',\n    styleUrls: ['./parameters.component.scss']\n})\nexport class ParametersComponent implements OnInit, OnChanges {\n\n    @Input() parentForm: FormGroup;\n    @Input() editableComponent: ComponentTask;\n\n    collapseParam = true;\n\n    Authorization = Authorization;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private loginService: LoginService\n    ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngOnChanges(): void {\n        const parameters = this.parentForm.controls['parameters'] as FormArray;\n        this.clearFormArray(parameters);\n        this.editableComponent.parameters.forEach((keyValue) => {\n            parameters.push(\n                this.formBuilder.group({\n                    key: keyValue.key,\n                    value: keyValue.value,\n                })\n            );\n        });\n        if (!this.loginService.hasAuthorization([Authorization.COMPONENT_WRITE])) {\n            this.parentForm.disable();\n        }\n    }\n\n    addParameters(): void {\n        (this.parentForm.controls['parameters'] as FormArray)\n            .push(this.formBuilder.group({\n                key: '',\n                value: ''\n            }));\n    }\n\n    removeParameters(itemIndex: number): void {\n        const parameters = this.parentForm.controls['parameters'] as FormArray;\n        parameters.removeAt(itemIndex);\n        this.collapseParam = (parameters.length === 0);\n    }\n\n    switchCollapseParam() {\n        this.collapseParam = !this.collapseParam;\n    }\n\n    private clearFormArray(formArray: FormArray): void {\n        for (let i=formArray.length; i>=0; i--) {\n            formArray.removeAt(i);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".small-text {\n    font-size: 0.75em;\n}\n\n.delete-button-height {\n    height:30px;\n}\n\n.cursor-default {\n    cursor: default;\n}\n",
                    "styleUrl": "./parameters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div [formGroup]=\"parentForm\" class=\"mt-3\">\n    <span class=\"fw-bold cursor-default\"\n          (click)=\"switchCollapseParam()\">{{'components.shared.edition.blocks.parameters' | translate}}</span>\n    <button class=\"btn btn-sm btn-light btn-outline-dark border-0\" type=\"button\"\n            (click)=\"switchCollapseParam()\"\n            title=\"{{(collapseParam ? 'global.actions.show' : 'global.actions.hide') | translate}}\">\n        <span class=\"fa\" [ngClass]=\"collapseParam ? 'fa-eye' : 'fa-eye-slash'\"></span>\n    </button>\n    <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n            class=\"btn btn-sm btn-light btn-outline-dark border-0 ms-sm-1\"\n            (click)=\"collapseParam = false; addParameters();\"\n            title=\"{{'global.actions.add' | translate}}\">\n        <span class=\"fa fa-plus\"></span>\n    </button>\n    <ng-container *ngIf=\"!collapseParam\">\n        <div class=\"row\" formArrayName=\"parameters\"\n             *ngFor=\"let parameter of parentForm.get('parameters')?.controls; let i = index;\">\n            <ng-container [formGroupName]=\"i\">\n                <div class=\"col-4 px-1\">\n                    <input type=\"text\" class=\"form-control me-2 small-text\" formControlName=\"key\"\n                           title=\"{{parameter.get('key').value}}\"\n                           placeholder=\"key\"/>\n                </div>\n                <div class=\"col-7 px-1\">\n                    <textarea class=\"form-control me-2 small-text\" formControlName=\"value\" rows=\"1\" placeholder=\"value\"></textarea>\n                </div>\n                <div class=\"col-1 px-1 align-self-center text-right\">\n                    <button *hasAuthorization=\"[Authorization.COMPONENT_WRITE]\"\n                            type=\"button\"\n                            class=\"btn btn-sm btn-outline-danger delete-button-height\"\n                            (click)=\"removeParameters(i)\"\n                            title=\"{{'global.actions.delete' | translate}}\">\n                        <span class=\"fa fa-trash\"></span>\n                    </button>\n                </div>\n            </ng-container>\n        </div>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "ParentComponent",
            "id": "component-ParentComponent-783d4e253877dbd173a20e74cc51a018885e8c9b3f00e72eca8ff47f25c871a84506809a8288f793534fb7d3c07a339dcc658d09137fb14862d2872423ff9a30",
            "file": "src/app/core/components/parent/parent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-parent",
            "styleUrls": [
                "./parent.style.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkifierSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LinkifierService, LoginService } from '@core/services';\n\n@Component({\n  selector: 'chutney-parent',\n  templateUrl: './parent.component.html',\n  styleUrls: ['./parent.style.scss'],\n})\nexport class ParentComponent {\n\n  private linkifierSubscription: Subscription;\n\n  constructor(\n    private linkifierService: LinkifierService,\n    private loginService: LoginService\n  ) {\n    this.linkifierSubscription = this.loginService.getUser().subscribe(\n        user => {\n            if (this.loginService.isAuthenticated()) {\n                this.linkifierService.loadLinkifiers().subscribe(); // needed to fetch linkifiers into sessionStorage\n            }\n        }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.linkifierSubscription) {\n        this.linkifierSubscription.unsubscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'menu';\n\n.row {\n    margin: 0;\n}\n\n.main-content {\n    position: absolute;\n    margin-top: $nav-height;\n    margin-left: $profile-width;\n    width: $remaind-width;\n    min-height: $nav-remain-height;\n    height: auto;\n    background-color: $grisclair2;\n    z-index: 200;\n}\n",
                    "styleUrl": "./parent.style.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "linkifierService",
                        "type": "LinkifierService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "linkifierService",
                        "type": "LinkifierService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<chutney-main-menu></chutney-main-menu>\n<chutney-profile-menu></chutney-profile-menu>\n<div class=\"main-content\">\n    <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "PluginConfigurationComponent",
            "id": "component-PluginConfigurationComponent-00d733cc1d42cc0266413a08a21aa57749deecea977a33af6df6f5cf0c8e425a8506b6134afdd408a7cdd461e8335430854c47a0177f6134dde19ea7f1cc0e15",
            "file": "src/app/modules/plugins/components/plugin-configuration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-plugin-configuration",
            "styleUrls": [
                "./plugin-configuration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-configuration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'chutney-plugin-configuration',\n    templateUrl: './plugin-configuration.component.html',\n    styleUrls: ['./plugin-configuration.component.scss']\n})\nexport class PluginConfigurationComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plugin-configuration.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"ms-3 mt-3\">\n    <chutney-config-jira></chutney-config-jira>\n    <chutney-config-linkifier></chutney-config-linkifier>\n    <chutney-config-git-backup></chutney-config-git-backup>\n</div>\n"
        },
        {
            "name": "ProfileMenuComponent",
            "id": "component-ProfileMenuComponent-d275293a28f916790c219389b605521938ad86d65aa1cb8101867eae0c3b393f22e96ad78ce6541dc6f7b0339cd5c3b24433abd5789ab947b74299b7f84f9fde",
            "file": "src/app/organisms/profile-menu/profile-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-profile-menu",
            "styleUrls": [
                "./profile-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'chutney-profile-menu',\n  templateUrl: './profile-menu.component.html',\n  styleUrls: ['./profile-menu.component.scss']\n})\nexport class ProfileMenuComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'menu';\n\n.profile-menu {\n    width: $profile-width;\n    height: 100%;\n    z-index: 999;\n    position: fixed;\n\n    .logo {\n        border-radius: 50%;\n        width: 70px;\n    }\n\n    .profile-menu__profile {\n        position: absolute;\n        top: 29px;\n        right: -35px;\n    }\n}\n",
                    "styleUrl": "./profile-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"profile-menu\">\n    <div class=\"profile-menu__profile\">\n        <a routerLink=\"/home\">\n            <img src=\"../../../assets/logo/logo-circle.png\" class=\"logo\" />\n        </a>\n    </div>\n</div>\n"
        },
        {
            "name": "PropertyTablePanelComponent",
            "id": "component-PropertyTablePanelComponent-481aebd3e2533b276d0c3ad476c3ba0d25d06802866e5e4eee5d67b0b432e028306834452221a06cd907cb331f665c657c84bfeb35da4032088e59f4f4728178",
            "file": "src/app/molecules/panel/property-table-panel/property-table-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-property-table-panel",
            "styleUrls": [
                "./property-table-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./property-table-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Array<Entry>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "validationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createEntry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteEntry",
                    "args": [
                        {
                            "name": "entry",
                            "type": "Entry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "Entry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { Entry } from '@model';\nimport { ValidationService } from '../../validation/validation.service';\n\n@Component({\n    selector: 'chutney-property-table-panel',\n    templateUrl: './property-table-panel.component.html',\n    styleUrls: ['./property-table-panel.component.scss']\n})\nexport class PropertyTablePanelComponent {\n\n    @Input() entries: Array<Entry>;\n\n    constructor(public validationService: ValidationService) { }\n\n    createEntry() {\n        this.entries.push(new Entry('', ''));\n    }\n\n    deleteEntry(entry: Entry) {\n        this.entries.splice(this.entries.indexOf(entry), 1);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-table-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "validationService",
                        "type": "ValidationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button type=\"button\" class=\"btn btn-link\" (click)=\"createEntry()\"><span class=\"fa fa-plus\"></span> Add property</button>\n<table class=\"table table-sm mb-0\">\n    <thead>\n        <tr>\n            <th scope=\"col\">Key</th>\n            <th scope=\"col\">Value</th>\n            <th scope=\"col\"></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let entry of entries\">\n            <td>\n                <chutney-forms-input id=\"{{entry.key}} + '_key_input'\" placeholder=\"Key\" [(model)]=\"entry.key\" [validate]=\"validationService.isNotEmpty\"></chutney-forms-input>\n            </td>\n            <td>\n                <chutney-forms-input id=\"{{entry.key}} + '_value_input'\" placeholder=\"Value\" [(model)]=\"entry.value\" [validate]=\"validationService.isNotEmpty\"></chutney-forms-input>\n            </td>\n            <td><button type=\"button\" class=\"btn btn-light ms-3\" (click)=\"deleteEntry(entry)\"><span class=\"fa fa-trash\" style=\"color: red;\"></span></button></td>\n        </tr>\n    </tbody>\n</table>\n<button type=\"button\" class=\"btn btn-link\" (click)=\"createEntry()\"><span class=\"fa fa-plus\"></span> Add property</button>\n"
        },
        {
            "name": "RawEditionComponent",
            "id": "component-RawEditionComponent-12cf1a5f5a58709dd87e595b3fb6ac597409af48d2e9c98f5b244f1aa663f806021ef5c90f1e5abd625f2d1aab3ff6e41fc4cfbaa2359eb8687981c3557846d7",
            "file": "src/app/modules/scenarios/components/edition/raw/raw-edition.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-raw-edition",
            "styleUrls": [
                "./raw-edition.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./raw-edition.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultContent",
                    "defaultValue": "'{\\n' +\n        '  givens:\\n' +\n        '  [\\n' +\n        '    {\\n' +\n        '      description: step description\\n' +\n        '      implementation:\\n' +\n        '      {\\n' +\n        '        type: success\\n' +\n        '        inputs:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '        outputs:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '        validations:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '  ]\\n' +\n        '  when: {}\\n' +\n        '  thens: []\\n' +\n        '}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "modificationsSaved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "modifiedContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pluginsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "previousTestCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestCase",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "saveErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "testCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestCase",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "canDeactivatePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                },
                {
                    "name": "checkParseError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duplicate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duplicate",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScenarioContentChanged",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTags",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unloadNotification",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:beforeunload', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CanDeactivatePage"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EventManagerService } from '@shared/event-manager.service';\nimport { Subscription } from 'rxjs';\nimport { TestCase } from '@model';\nimport { ScenarioService } from '@core/services';\nimport { CanDeactivatePage } from '@core/guards';\nimport { JiraPluginService } from '@core/services/jira-plugin.service';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { HjsonParserService } from '@shared/hjson-parser/hjson-parser.service';\n\n\n@Component({\n    selector: 'chutney-raw-edition',\n    templateUrl: './raw-edition.component.html',\n    styleUrls: ['./raw-edition.component.scss']\n})\nexport class RawEditionComponent extends CanDeactivatePage implements OnInit, OnDestroy {\n\n    previousTestCase: TestCase;\n    testCase: TestCase;\n    modificationsSaved = false;\n    errorMessage: any;\n    modifiedContent = '';\n    pluginsForm: FormGroup;\n    saveErrorMessage: string;\n    defaultContent = '{\\n' +\n        '  givens:\\n' +\n        '  [\\n' +\n        '    {\\n' +\n        '      description: step description\\n' +\n        '      implementation:\\n' +\n        '      {\\n' +\n        '        type: success\\n' +\n        '        inputs:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '        outputs:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '        validations:\\n' +\n        '        {\\n' +\n        '        }\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '  ]\\n' +\n        '  when: {}\\n' +\n        '  thens: []\\n' +\n        '}';\n    private routeParamsSubscription: Subscription;\n\n    constructor(private eventManager: EventManagerService,\n                private formBuilder: FormBuilder,\n                private jiraLinkService: JiraPluginService,\n                private route: ActivatedRoute,\n                private router: Router,\n                private scenarioService: ScenarioService,\n                private hjsonParserService: HjsonParserService\n    ) {\n        super();\n        this.testCase = new TestCase();\n        this.previousTestCase = this.testCase.clone();\n        this.pluginsForm = this.formBuilder.group({\n            jiraId: ''\n        });\n    }\n\n    ngOnInit() {\n        this.routeParamsSubscription = this.route.params.subscribe((params) => {\n            const duplicate = this.route.snapshot.queryParamMap.get('duplicate');\n            if (duplicate) {\n                this.load(params['id'], true);\n            } else {\n                this.load(params['id'], false);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.eventManager.destroy(this.routeParamsSubscription);\n    }\n\n    canDeactivatePage(): boolean {\n        return this.modificationsSaved || this.testCase.equals(this.previousTestCase);\n    }\n\n    load(id, duplicate: boolean) {\n        if (id != null) {\n            this.scenarioService.findRawTestCase(id).subscribe(\n                (rawScenario) => {\n                    this.testCase = rawScenario;\n                    this.previousTestCase = this.testCase.clone();\n                    this.checkParseError();\n\n                    if (duplicate) {\n                        this.previousTestCase.id = null;\n                        this.testCase.id = null;\n                        this.testCase.creationDate = null;\n                        this.testCase.updateDate = null;\n                        this.testCase.author = null;\n                        this.testCase.title = '--COPY-- ' + this.testCase.title;\n                        this.previousTestCase.title = '--COPY-- ' + this.previousTestCase.title;\n                    }\n                },\n                (error) => {\n                    console.log(error);\n                    this.errorMessage = error._body;\n                }\n            );\n            this.loadJiraLink(id);\n        } else {\n            this.testCase.title = 'scenario title';\n            this.testCase.description = 'scenario description';\n            this.testCase.content = this.defaultContent;\n            this.modifiedContent = this.defaultContent;\n            this.previousTestCase = this.testCase.clone();\n\n        }\n    }\n\n    private checkParseError() {\n        try {\n            this.hjsonParserService.parse(this.modifiedContent);\n            this.errorMessage = null;\n        } catch (e) {\n            this.errorMessage = e;\n        }\n    }\n\n    private loadJiraLink(id: string) {\n        this.jiraLinkService.findByScenarioId(id).subscribe(\n            (jiraId) => {\n                this.pluginsForm.controls['jiraId'].setValue(jiraId);\n            },\n            (error) => { console.log(error); }\n        );\n    }\n\n    saveScenario() {\n        this.testCase.content = this.modifiedContent;\n        const jiraId = this.pluginsForm.value['jiraId'];\n        this.scenarioService.createOrUpdateRawTestCase(this.testCase).subscribe(\n            (response) => {\n                this.modificationsSaved = true;\n                this.jiraLinkService.saveForScenario(response, jiraId).subscribe(\n                    () => {},\n                    (error) => { console.log(error); }\n                );\n                this.router.navigateByUrl('/scenario/' + response + '/execution/last');\n            },\n            (error) => {\n                console.log(error);\n                if (error.error) {\n                    this.saveErrorMessage = error.error;\n                }\n                this.errorMessage = error._body;\n            }\n        );\n    }\n\n    updateTags(event: string) {\n        this.testCase.tags = event.split(',');\n    }\n\n    onScenarioContentChanged(data) {\n        this.modifiedContent = data;\n        this.checkParseError();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.scenario-editor {\n    height:calc(100vh - 260px);\n    width:99%;\n}\n\n.edition-header {\n    position: fixed;\n    width: 100%;\n    margin-top: 0;\n    margin-bottom: 0;\n    z-index: 100;\n\n    .header-left {\n        height: 120px;\n        background-color: $vert2;\n        padding: 20px 20px 20px 0;\n    }\n\n    .header-right {\n        position: relative;\n        background-color: $vert3;\n        height: 120px;\n        text-align: center;\n        padding: 10px 60px 10px 30px;\n\n        textarea.no-resize {\n            resize: none;\n        }\n\n        .tag-input {\n            height: 50px;\n        }\n    }\n\n    .triangle-left:before {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-color: transparent transparent transparent $vert2;\n        border-style: solid;\n        border-width: 60px 0 60px 20px;\n    }\n\n    .header-left {\n\n        a {\n            position: absolute;\n            top: 100px;\n            text-transform: lowercase;\n            font-family: Ubuntu;\n            font-size: 11px;\n            color: #4a4a4a;\n        }\n\n        .title {\n            margin-left: 40px;\n            background-color: $vert2;\n            overflow: hidden;\n        }\n\n        .description{\n            margin-top: 10px;\n            background-color: $vert2;\n            margin-left: 40px;\n            overflow: hidden;\n        }\n    }\n\n    .action-pane {\n        .save-button {\n            position: absolute;\n            top: calc(120px - 64px / 2);\n            left: calc(66px + 20px + 32px + (100% - 66px - 20px - 32px - 64px - 64px) / 2);\n            width: 64px;\n            height: 64px;\n            -webkit-transition: all .2s ease-in-out;\n            transition: all .2s ease-in-out;\n            border-radius: 50%;\n            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n            background-color: $blanc;\n            color: $grisfonce2;\n            background-image: url('../../../../../../assets/icons/btn/save.png');\n            background-repeat: no-repeat;\n            background-size: 100% 100%;\n            border: none;\n        }\n\n        .save-button:hover {\n            box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.4);\n            background-image: url('../../../../../../assets/icons/btn/save_hover.png');\n        }\n\n        .save-button:active {\n            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.4);\n            background-image: url('../../../../../../assets/icons/btn/save_active.png');\n        }\n\n        .save-button:disabled {\n          cursor: not-allowed;\n        }\n\n        .save-button-with-extended-menu {\n            left: calc(66px + 386px + 8px + 32px + (100% - 66px - 386px - 8px - 32px - 64px - 64px) / 2);\n        }\n\n        .action-pane-complement {\n            position: absolute;\n            top: calc(120px - 25px / 2);\n            left: calc(66px + 20px + 32px + 64px + (100% - 66px - 20px - 32px - 64px) / 2 + 76px);\n            height: 25px;\n            -webkit-transition: all .2s ease-in-out;\n            transition: all .2s ease-in-out;\n\n            .action-button {\n                float: left;\n                margin-left: 3px;\n                margin-right: 3px;\n            }\n        }\n\n        .action-pane-complement-with-extended-menu {\n            left: calc(66px + 386px + 8px + 32px + 64px + (100% - 66px - 386px - 8px - 32px - 64px) / 2 + 76px);\n        }\n    }\n}\n\n:host ::ng-deep chutney-forms-editable-label {\n    .row {\n        margin: 0;\n    }\n\n    .input-lbl {\n        color: white;\n        font-size: 22px;\n        line-height: 22px;\n        font-weight: bold;\n    }\n\n    .overlay-icon {\n        font-size: 18px !important;\n        padding: 2px 5px 2px 5px !important;\n        margin-left: 10px;\n    }\n}\n\n:host ::ng-deep chutney-forms-editable-text-area {\n    .row {\n        margin: 0;\n    }\n\n    .input-lbl {\n        font-size: 13px;\n        font-weight: 300;\n        font-style: normal;\n        font-stretch: normal;\n        line-height: normal;\n        letter-spacing: normal;\n        color: #333333;\n    }\n\n    .overlay-icon {\n        font-size: 18px !important;\n        padding: 2px 5px 2px 5px !important;\n        margin-left: 10px;\n    }\n}\n\n.plugins {\n    padding-top: calc(105px + 10px);\n}\n\n.campaigns-scenario {\n    position: absolute;\n    height: 50px;\n    right: 0;\n    z-index: 100;\n    margin: 130px;\n}\n\n:host ::ng-deep chutney-ace-editor .configuration {\n    margin-top: 0;\n    .row {\n        margin-top: 0;\n    }\n}\n",
                    "styleUrl": "./raw-edition.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hjsonParserService",
                        "type": "HjsonParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hjsonParserService",
                        "type": "HjsonParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CanDeactivatePage",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row edition-header\">\n    <div class=\"header-left col-md-8\">\n        <div class=\"title\">\n            <chutney-forms-editable-label\n                [id]=\"'title'\"\n                [placeholder]=\"'title'\"\n                [defaultValue]=\"'title'\"\n                [(model)]=\"testCase.title\"\n                [type]=\"'form-title'\">\n            </chutney-forms-editable-label>\n        </div>\n        <div class=\"description\">\n            <chutney-forms-editable-text-area\n                [id]=\"'description'\"\n                [placeholder]=\"'description'\"\n                [defaultValue]=\"'description'\"\n                [(model)]=\"testCase.description\"\n                [type]=\"'form-title'\">\n            </chutney-forms-editable-text-area>\n        </div>\n    </div>\n    <div class=\"header-right triangle-left col-md-4\">\n        <div class=\"row\">\n            <div class=\"col-2\">\n                <chutney-authoring-info [testCase]=\"testCase\"></chutney-authoring-info>\n            </div>\n            <div class=\"col-2\">\n                <chutney-edition-info [testCase]=\"testCase\"></chutney-edition-info>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-2 p-0 align-self-center\">\n                <label class=\"form-control-label fw-bold\" for=\"tags\">{{ 'scenarios.edition.form.tags' | translate }}</label>\n            </div>\n            <div class=\"col\">\n                <textarea type=\"text\" class=\"form-control tag-input no-resize\" name=\"tags\"\n                      id=\"tags\" [ngModel]=\"testCase.tags\" (ngModelChange)=\"updateTags($event)\" rows=\"2\"></textarea>\n            </div>\n        </div>\n    </div>\n    <div class=\"action-pane\">\n        <button class=\"save-button\" data-toggle=\"tooltip\" title=\"Sauvegarder\" [disabled]=\"errorMessage\"\n            (click)=\"saveScenario()\">\n        </button>\n    </div>\n</div>\n<div class=\"plugins\">\n    <form [formGroup]=\"pluginsForm\" autocomplete=\"off\" class=\"mb-0\">\n        <div class=\"row mb-0 small\">\n            <div class=\"col-7\">\n                <div class=\"form-inline\">\n                    <label class=\"form-control-label fw-bold me-5\" for=\"jiraId\">{{'menu.principal.jiraId' | translate}}</label>\n                    <input type=\"text\" class=\"form-control form-control-sm\" id=\"jiraId\"\n                           formControlName=\"jiraId\"\n                           placeholder=\"ex. LK-42\"/>\n                </div>\n            </div>\n            <div class=\"col-5\">\n                <div *ngIf=\"saveErrorMessage\" class=\"text-center btn-danger text-white cursor-default\" (click)=\"this.saveErrorMessage = null\">\n                    <strong>{{ saveErrorMessage }}</strong>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n<div>\n    <chutney-error-panel [errorMessage]=\"errorMessage\"></chutney-error-panel>\n\n    <div class=\"scenario-editor\">\n        <chutney-editor\n            [modes]=\"['json', 'hjson']\"\n            [mode]=\"'hjson'\"\n            [content]=\"testCase.content\"\n            (onContentChange)=\"onScenarioContentChanged($event)\">\n        </chutney-editor>\n    </div>\n</div>\n"
        },
        {
            "name": "RolesComponent",
            "id": "component-RolesComponent-61762cba4c2e3608c9ec999b680c76658ff9493fe325cba516d7e4e8535b725f0121cdadf4e2cfed73cacf0215a39ad9e4659e306c5e3fa63c2ad3df4e2b8972",
            "file": "src/app/modules/roles/components/roles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-roles",
            "styleUrls": [
                "./roles.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roles.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "help",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "modifiedRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "rolesContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "saved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "saving",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRoleContentChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "printMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "err",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "err",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { RolesService } from '@core/services';\n\nimport { delay } from '@shared/tools';\n\n@Component({\n    selector: 'chutney-roles',\n    templateUrl: './roles.component.html',\n    styleUrls: ['./roles.component.scss']\n})\nexport class RolesComponent implements OnInit {\n\n    rolesContent: string;\n    message: string;\n    help: boolean;\n    error: boolean;\n\n\n    private saving: string;\n    private saved: string;\n    private modifiedRoles: string;\n\n    constructor(\n        private rolesService: RolesService,\n        private translate: TranslateService,\n    ) {\n        translate.get('global.actions.ongoing.saving').subscribe((res: string) => {\n            this.saving = res;\n        });\n        translate.get('global.actions.done.saved').subscribe((res: string) => {\n            this.saved = res;\n        });\n    }\n\n    ngOnInit() {\n        this.loadRoles();\n    }\n\n    saveRoles() {\n        try {\n            const content = JSON.parse(this.modifiedRoles);\n            (async () => {\n                this.printMessage(this.saving);\n                await delay(1000);\n                this.rolesService.save(content).subscribe(\n                    res => {\n                        this.printMessage(this.saved);\n                        this.loadRoles();\n                    },\n                    err => {\n                        this.printMessage((err.error || `${err.status} ${err.statusText}`), true);\n                    }\n                );\n            })();\n        } catch(e) {\n            this.printMessage(e, true);\n        }\n    }\n\n    onRoleContentChange(data) {\n        this.modifiedRoles = data;\n    }\n\n    private loadRoles() {\n        this.rolesService.read().subscribe(\n            (res) => {\n                this.rolesContent = JSON.stringify(res, undefined, '\\t');\n                //this.rolesAceEditor && this.rolesAceEditor.forceContentChange(this.rolesContent);\n            },\n            (err) => {\n                this.printMessage(err.error || `${err.status} ${err.statusText}`, true);\n            }\n        );\n    }\n\n    private printMessage(message: string, err: boolean = false) {\n        this.error = err;\n        this.message = message;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.editor {\n    height: calc(100vh - 170px);\n}\n\n.pointer {\n    cursor: pointer;\n}\n",
                    "styleUrl": "./roles.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "rolesService",
                        "type": "RolesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"col\">\n    <div class=\"row justify-content-center\">\n        <div class=\"btn-group btn-group-sm w-25\">\n            <button\n                class=\"btn btn-sm btn-success me-2\"\n                title=\"{{'global.actions.save' | translate}}\"\n                (click)=\"saveRoles()\"\n            >\n                {{'global.actions.save' | translate}}\n                <span class=\"fa fa-check\"></span>\n            </button>\n            <button\n                class=\"btn btn-sm btn-info\"\n                title=\"{{'global.actions.help' | translate}}\"\n                (click)=\"help = !help\"\n            >\n                {{'global.actions.help' | translate}}\n                <span class=\"fa fa-info\"></span>\n            </button>\n        </div>\n    </div>\n    <div *ngIf=\"help\">\n        <pre class=\"text-white bg-info rounded\">\n            Declare Roles and Map users to them.\n            A role DEFAULT has to be declared.\n\n            Roles has to be declared in a \"roles\" objects' list.\n            Role template :\n            {{'{\n                \"name\": \"ROLE_NAME\",\n                \"rights\": [\n                    \"SCENARIO_READ\",\n                    \"SCENARIO_WRITE\",\n                    \"SCENARIO_EXECUTE\",\n                    \"CAMPAIGN_READ\",\n                    \"CAMPAIGN_WRITE\",\n                    \"CAMPAIGN_EXECUTE\",\n                    \"ENVIRONMENT_ACCESS\",\n                    \"GLOBAL_VAR_READ\",\n                    \"GLOBAL_VAR_WRITE\",\n                    \"DATASET_READ\",\n                    \"DATASET_WRITE\",\n                    \"COMPONENT_READ\",\n                    \"COMPONENT_WRITE\",\n                    \"ADMIN_ACCESS\"\n                ]\n            }'}}\n\n            Users-roles mapping has to be declared in a \"authorizations\" objects' list.\n            User-Role mapping template :\n            {{'{\n                \"name\": \"ROLE_NAME\",\n                \"users\": [\n                    \"user-id-1\",\n                    \"user-id-2\"\n                ]\n            }'}}\n        </pre>\n    </div>\n    <div *ngIf=\"message\"\n         class=\"row p-2 pointer text-white fw-bold\"\n         [ngClass]=\"error ? 'bg-danger' : 'bg-success'\"\n         (click)=\"message = null\"\n    >\n        {{ message }}\n    </div>\n    <div class=\"row editor\">\n        <div class=\"scenario-editor\">\n            <chutney-editor\n                [modes]=\"['json']\"\n                [content]=\"rolesContent\"\n                (onContentChange)=\"onRoleContentChange($event)\">\n            </chutney-editor>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "ScenarioCampaignsComponent",
            "id": "component-ScenarioCampaignsComponent-f8b82acc75bc59e2acdf09f270ca8325d1abe97808548abe042aa8c6c4872adcc9b5c90056f7a8a370a25f42f50845df0485f0b27f1c5a352a03f4039dea70a2",
            "file": "src/app/modules/scenarios/components/sub/scenario-campaigns/scenario-campaigns.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-scenario-campaigns",
            "styleUrls": [
                "./scenario-campaigns.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-campaigns.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "idScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "campaignsForScenario",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Campaign>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\n\nimport { CampaignService } from '@core/services';\nimport { Campaign, Authorization } from '@model';\n\n@Component({\n    selector: 'chutney-scenario-campaigns',\n    templateUrl: './scenario-campaigns.component.html',\n    styleUrls: ['./scenario-campaigns.component.scss']\n})\nexport class ScenarioCampaignsComponent implements OnChanges {\n\n    @Input() idScenario: string;\n    campaignsForScenario: Array<Campaign> = [];\n\n    Authorization = Authorization;\n\n    constructor(private campaignService: CampaignService) {\n    }\n\n    ngOnChanges() {\n        if (this.idScenario) {\n            this.load(this.idScenario);\n        }\n    }\n\n    load(id) {\n        this.campaignService.findAllCampaignsForScenario(id).subscribe(\n            (response) => {\n                this.campaignsForScenario = response;\n            },\n            (error) => {\n                console.log(error);\n            }\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./scenario-campaigns.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "campaignService",
                        "type": "CampaignService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<!-- Campaigns related to a scenario -->\n<div *ngIf=\"campaignsForScenario.length > 0\">\n    {{ 'menu.principal.campaigns' | translate }} :\n    <ng-container *hasAuthorization=\"[Authorization.CAMPAIGN_READ]\">\n        <ng-container *ngFor=\"let campaign of campaignsForScenario\">\n            <a [routerLink]=\"['/campaign', campaign.id,'execution']\"\n               title=\"{{ 'campaigns.list.item.title.link.title' | translate }} {{campaign.title}}\">\n                {{campaign.title}}\n            </a>\n            &nbsp;\n        </ng-container>\n    </ng-container>\n    <ng-container *hasAuthorization=\"{not: true, authorizations: [Authorization.CAMPAIGN_READ]}\">\n        <ng-container *ngFor=\"let campaign of campaignsForScenario\">\n            <span>{{campaign.title}}</span> &nbsp;\n        </ng-container>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "ScenarioExecutionComponent",
            "id": "component-ScenarioExecutionComponent-fcec6494e4b77523af2e54f1ea69e4f5f290ea801a25d81d8e1800bcb5417c61bf60cdbaef37f7561e9b7051e9b30c015459d4b11acdb54a33f7b7340f1d2707",
            "file": "src/app/modules/scenarios/components/execution/execution.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Location"
                }
            ],
            "selector": "chutney-execution",
            "styleUrls": [
                "./execution.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./execution.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "currentExecutionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "currentScenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "executionError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasParameters",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isComposed",
                    "defaultValue": "TestCase.isComposed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "lastExecutionRunning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "parseError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "routeParamsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarioComponent$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ScenarioComponent>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "scenarioExecutionAsyncSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scenarioExecutionReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScenarioExecutionReport",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "scenarioGwt$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GwtTestCase>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "toggleScenarioDetails",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "toggleScenarioInfo",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "executeScenario",
                    "args": [
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "env",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandAllDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expandAllInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadScenarioExecution",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeScenarioExecution",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLastIdExecution",
                    "args": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onlastStatusExecution",
                    "args": [
                        {
                            "name": "status",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectExecution",
                    "args": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "execution",
                            "type": "Execution",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pauseScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resumeScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToScenarioExecutionReports",
                    "args": [
                        {
                            "name": "scenarioExecutionReportsObservable",
                            "type": "Observable<ScenarioExecutionReport>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioExecutionReportsObservable",
                            "type": "Observable<ScenarioExecutionReport>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeScenarioExecutionAsyncSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateLocation",
                    "args": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "executionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateReport",
                    "args": [
                        {
                            "name": "oldReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "report",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "report",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStepExecutionReport",
                    "args": [
                        {
                            "name": "oldStepExecutionReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newStepExecutionReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depths",
                            "type": "Array<number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldStepExecutionReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newStepExecutionReport",
                            "type": "StepExecutionReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depths",
                            "type": "Array<number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime, delay, tap } from 'rxjs/operators';\n\nimport { EventManagerService } from '@shared/event-manager.service';\n\nimport { Execution, GwtTestCase, ScenarioComponent, ScenarioExecutionReport, StepExecutionReport, TestCase, Authorization } from '@model';\nimport { ComponentService, ScenarioExecutionService, ScenarioService } from '@core/services';\n\n@Component({\n    selector: 'chutney-execution',\n    providers: [Location],\n    templateUrl: './execution.component.html',\n    styleUrls: ['./execution.component.scss']\n})\nexport class ScenarioExecutionComponent implements OnInit, OnDestroy {\n\n    scenarioComponent$: Observable<ScenarioComponent> = null;\n    scenarioGwt$: Observable<GwtTestCase> = null;\n\n    parseError: String;\n    executionError: String;\n\n    currentScenarioId: string;\n    currentExecutionId: number;\n\n    scenarioExecutionReport: ScenarioExecutionReport;\n\n    lastExecutionRunning = false;\n    toggleScenarioDetails = true;\n    toggleScenarioInfo = true;\n\n    private isComposed = TestCase.isComposed;\n    private hasParameters: boolean = null;\n\n    private routeParamsSubscription: Subscription;\n    private scenarioExecutionAsyncSubscription: Subscription;\n\n    Authorization = Authorization;\n\n    constructor(\n        private eventManager: EventManagerService,\n        private scenarioService: ScenarioService,\n        private scenarioExecutionService: ScenarioExecutionService,\n        private componentService: ComponentService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private location: Location,\n    ) {\n    }\n\n    ngOnInit() {\n        this.routeParamsSubscription = this.route.params.subscribe((params) => {\n            this.currentScenarioId = params['id'];\n            if (params['execId'] && params['execId'] !== 'last') {\n                this.loadScenarioExecution(params['execId']);\n            }\n\n            this.loadScenario();\n        });\n    }\n\n    ngOnDestroy() {\n        this.eventManager.destroy(this.routeParamsSubscription);\n        this.unsubscribeScenarioExecutionAsyncSubscription();\n    }\n\n    loadScenario() {\n        if (this.isComposed(this.currentScenarioId)) {\n            this.scenarioComponent$ = this.componentService\n                .findComponentTestCaseWithoutDeserializeImpl(this.currentScenarioId).pipe(\n                    tap(sc => {\n                        this.hasParameters = (sc.computedParameters && sc.computedParameters.length > 0);\n                    })\n                );\n        } else {\n            this.scenarioGwt$ = this.scenarioService\n                .findTestCase(this.currentScenarioId).pipe(\n                     tap(gwt => {\n                        this.hasParameters = (gwt.wrappedParams.params && gwt.wrappedParams.params.length > 0);\n                    })\n                 );\n        }\n    }\n\n    onlastStatusExecution(status: String) {\n        this.lastExecutionRunning = (status === 'RUNNING' || status === 'PAUSED');\n    }\n\n    onLastIdExecution(execution: Execution) {\n        if (Execution.NO_EXECUTION === execution) {\n            this.currentExecutionId = null;\n        } else if (this.currentExecutionId !== execution.executionId) {\n            this.currentExecutionId = execution.executionId;\n            if (!this.scenarioExecutionAsyncSubscription || this.scenarioExecutionAsyncSubscription.closed) {\n                if ('RUNNING' === execution.status) {\n                    this.observeScenarioExecution(execution.executionId);\n                } else {\n                    this.loadScenarioExecution(execution.executionId);\n                }\n            }\n        }\n    }\n\n    onSelectExecution(execution: Execution) {\n        if (execution != null) {\n            this.currentExecutionId = execution.executionId;\n            this.executionError = '';\n\n            this.unsubscribeScenarioExecutionAsyncSubscription();\n\n            if ('RUNNING' === execution.status) {\n                this.observeScenarioExecution(execution.executionId);\n            } else {\n                this.loadScenarioExecution(execution.executionId);\n            }\n        } else {\n            this.currentExecutionId = null;\n            this.executionError = '';\n            this.scenarioExecutionReport = null;\n        }\n    }\n\n    loadScenarioExecution(executionId: number) {\n        this.executionError = '';\n        this.currentExecutionId = executionId;\n        this.scenarioExecutionService.findExecutionReport(this.currentScenarioId, executionId)\n            .subscribe((scenarioExecutionReport: ScenarioExecutionReport) => {\n\n                this.updateLocation(executionId);\n\n                if (scenarioExecutionReport && scenarioExecutionReport.report.status === 'RUNNING') {\n                    this.observeScenarioExecution(executionId);\n                } else {\n                    this.toggleScenarioDetails = true;\n                    this.scenarioExecutionReport = scenarioExecutionReport;\n                }\n\n            }, error => {\n                console.error(error.message);\n                this.executionError = 'Cannot find execution n°' + executionId;\n                this.scenarioExecutionReport = null;\n            });\n    }\n\n    executeScenario(env: string) {\n        if (this.hasParameters == null) {\n            let scenario$ : Observable<Object> = this.isComposed(this.currentScenarioId) ? this.scenarioComponent$ : this.scenarioGwt$;\n            scenario$.subscribe(() => this.executeScenario(env));\n        } else if (this.hasParameters) {\n            this.router.navigateByUrl(`/scenario/${this.currentScenarioId}/execute/${env}`)\n                .then(null);\n        } else {\n            this.scenarioExecutionService.executeScenarioAsync(this.currentScenarioId, [], env)\n                .pipe(\n                    delay(1000)\n                )\n                .subscribe(\n                    executionId => {\n                        this.loadScenarioExecution(parseInt(executionId, 10));\n                    },\n                    error => {\n                        this.executionError = error.error;\n                    }\n                );\n        }\n    }\n\n    expandAllDetails() {\n        this.toggleScenarioDetails = !this.toggleScenarioDetails;\n        this.eventManager.broadcast({name: 'toggleScenarioDetails', expand: this.toggleScenarioDetails});\n    }\n\n    expandAllInfo() {\n        this.toggleScenarioInfo = !this.toggleScenarioInfo;\n        this.eventManager.broadcast({name: 'toggleScenarioInfo', expand: this.toggleScenarioInfo});\n    }\n\n    stopScenario() {\n        this.scenarioExecutionService.stopScenario(this.currentScenarioId, this.currentExecutionId).subscribe(() => {\n        }, error => {\n            const body = JSON.parse(error._body);\n            this.executionError = 'Cannot stop scenario : ' + error.status + ' ' + error.statusText + ' ' + body.message;\n        }, () => {\n        });\n    }\n\n    pauseScenario() {\n        this.scenarioExecutionService.pauseScenario(this.currentScenarioId, this.currentExecutionId).subscribe(() => {\n        }, error => {\n            const body = JSON.parse(error._body);\n            this.executionError = 'Cannot pause scenario : ' + error.status + ' ' + error.statusText + ' ' + body.message;\n        });\n    }\n\n    resumeScenario() {\n        this.scenarioExecutionService.resumeScenario(this.currentScenarioId, this.currentExecutionId)\n            .pipe(\n                delay(1000)\n            )\n            .subscribe(\n                () => this.loadScenarioExecution(Number(this.currentExecutionId)),\n                error => {\n                    const body = JSON.parse(error._body);\n                    this.executionError = 'Cannot resume scenario : ' + error.status + ' ' + error.statusText + ' ' + body.message;\n                }\n            );\n    }\n\n    private observeScenarioExecution(executionId: number) {\n        this.unsubscribeScenarioExecutionAsyncSubscription();\n        this.scenarioExecutionAsyncSubscription =\n            this.subscribeToScenarioExecutionReports(\n                this.scenarioExecutionService.observeScenarioExecution(this.currentScenarioId, executionId));\n    }\n\n    private subscribeToScenarioExecutionReports(scenarioExecutionReportsObservable: Observable<ScenarioExecutionReport>): Subscription {\n        return scenarioExecutionReportsObservable\n            .pipe(debounceTime(500))\n            .subscribe((scenarioExecutionReport: ScenarioExecutionReport) => {\n                this.toggleScenarioDetails = true;\n                if (this.scenarioExecutionReport) {\n                    this.scenarioExecutionReport.report.duration = scenarioExecutionReport.report.duration;\n                    this.updateStepExecutionReport(this.scenarioExecutionReport.report, scenarioExecutionReport.report, []);\n                } else {\n                    this.scenarioExecutionReport = scenarioExecutionReport;\n                }\n            }, (error) => {\n                if (error.status) {\n                    this.executionError = error.status + ' ' + error.statusText + ' ' + error._body;\n                } else {\n                    this.executionError = error.error;\n                }\n                this.scenarioExecutionReport = null;\n            });\n    }\n\n    private updateLocation(executionId: number) {\n        this.location.replaceState('/scenario/' + this.currentScenarioId + '/execution/' + executionId);\n    }\n\n    private unsubscribeScenarioExecutionAsyncSubscription() {\n        if (this.scenarioExecutionAsyncSubscription) {\n            this.scenarioExecutionAsyncSubscription.unsubscribe();\n        }\n    }\n\n    private updateStepExecutionReport(oldStepExecutionReport: StepExecutionReport, newStepExecutionReport: StepExecutionReport, depths: Array<number>) {\n        if (oldStepExecutionReport.status !== newStepExecutionReport.status || (newStepExecutionReport.status === 'FAILURE' && oldStepExecutionReport.strategy === 'retry-with-timeout')) {\n            if (depths.length === 0) {\n                this.scenarioExecutionReport.report = newStepExecutionReport;\n            } else if (depths.length === 1) {\n                this.updateReport(this.scenarioExecutionReport.report.steps[depths[0]], newStepExecutionReport);\n            } else {\n                let stepReport = this.scenarioExecutionReport.report.steps[depths[0]];\n                for (let i = 1; i < depths.length-1; i++) {\n                    stepReport = stepReport.steps[depths[i]];\n                }\n                this.updateReport(stepReport.steps[depths[depths.length-1]], newStepExecutionReport);\n            }\n        } else {\n            for (let i = 0; i < oldStepExecutionReport.steps.length; i++) {\n                this.updateStepExecutionReport(oldStepExecutionReport.steps[i], newStepExecutionReport.steps[i], depths.concat(i));\n            }\n\n            if (newStepExecutionReport.steps.length > oldStepExecutionReport.steps.length) {\n                for (let i=oldStepExecutionReport.steps.length; i < newStepExecutionReport.steps.length; i++) {\n                    oldStepExecutionReport.steps.push(newStepExecutionReport.steps[i]);\n                }\n            }\n        }\n    }\n\n    private updateReport(oldReport: StepExecutionReport, report: StepExecutionReport) {\n        oldReport.name = report.name;\n        oldReport.duration = report.duration;\n        oldReport.status = report.status;\n        oldReport.startDate = report.startDate;\n        oldReport.information = report.information;\n        oldReport.errors = report.errors;\n        oldReport.type = report.type;\n        oldReport.strategy = report.strategy;\n        oldReport.targetName = report.targetName;\n        oldReport.targetUrl = report.targetUrl;\n        oldReport.evaluatedInputs = report.evaluatedInputs;\n        oldReport.stepOutputs = report.stepOutputs;\n\n        for (let i=0; i < oldReport.steps.length; i++) {\n            this.updateReport(oldReport.steps[i], report.steps[i]);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\nbutton span:not(:first-child) {\n    display: block;\n}\n\n.noselect {\n    -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select: none; /* Konqueror HTML */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* Internet Explorer/Edge */\n    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */\n}\n\n:host ::ng-deep button.trash-btn {\n    height: 48px;\n    font-size: 25px;\n    color: white;\n}\n\n.badge-container {\n    display: inline-block;\n    margin: 10px 0 5px 20px;\n}\n\ndiv.steps {\n    margin-top: 20px;\n\n    .btn-group {\n        position: absolute;\n        right: 15px;\n    }\n}\n\n.error {\n    color: $labelko;\n    margin-bottom: 30px;\n}\n\n.col-sm-3half, .col-sm-8half {\n    position: relative;\n    min-height: 1px;\n    padding-right: 15px;\n    padding-left: 15px;\n}\n\n@media (min-width: 768px) {\n    .col-sm-3half, .col-sm-8half {\n        float: left;\n    }\n    .col-sm-3half {\n        width: 17.16666667%;\n    }\n    .col-sm-8half {\n        width: 82.83333333%;\n    }\n}\n\n.campaigns-scenario {\n    position: absolute;\n    height: 50px;\n    right: 0;\n    z-index: 100;\n    margin: 0;\n}\n\n.background-white {\n    background-color: white;\n}\n\n.gwt::before {\n    background: $neutral;\n    color: $grisfonce;\n    font-size: 9px;\n    font-weight: bold;\n    padding: 3px 5px;\n    text-transform: uppercase;\n}\n\n#given::before {\n    content: \"Given\";\n}\n\n#when::before {\n    content: \"When\";\n}\n\n#then::before {\n    content: \"Then\";\n}\n",
                    "styleUrl": "./execution.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioExecutionService",
                        "type": "ScenarioExecutionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentService",
                        "type": "ComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container>\n    <chutney-header [testCaseId]=\"currentScenarioId\"\n                    [canExecute]=\"parseError\"\n                    (executeEvent)=\"executeScenario($event)\">\n    </chutney-header>\n</ng-container>\n\n<div class=\"row\">\n    <div class=\"col-sm-3half\">\n        <chutney-execution-history [scenarioId]=\"currentScenarioId\"\n                                   [selectedExecutionId]=\"currentExecutionId\"\n                                   (onselectExecution)=\"onSelectExecution($event)\"\n                                   (onlastIdExecution)=\"onLastIdExecution($event)\"\n                                   (onlastStatusExecution)=\"onlastStatusExecution($event)\"\n        ></chutney-execution-history>\n    </div>\n\n    <div class=\"col-sm-8half\">\n        <div class=\"steps\" *ngIf=\"parseError\">\n            <div class=\"error\">\n                <em>{{'scenarios.execution.errors.parse' | translate}} : {{parseError}}</em>\n            </div>\n        </div>\n        <div class=\"steps\" *ngIf=\"executionError\">\n            <div class=\"error\">\n                <em>{{executionError}}</em>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <chutney-scenario-campaigns [idScenario]=\"currentScenarioId\"></chutney-scenario-campaigns>\n        </div>\n        <ng-container *ngIf=\"scenarioExecutionReport?.report\">\n            <div class=\"row steps\">\n                <div class=\"badge-container w-85\">\n                    <span>\n                        <h2 class=\"d-inline m-0\">\n                            <chutney-execution-badge [status]=\"scenarioExecutionReport.report.status\" [spin]=\"true\"></chutney-execution-badge>\n                        </h2>\n                        <small class=\"text-muted ms-2\">\n                            {{'global.time.in' | translate}} {{scenarioExecutionReport.report.duration | duration}}\n                        </small>\n                        <small class=\"text-muted ms-2\">\n                            {{'global.time.at' | translate}} {{scenarioExecutionReport.report.startDate | date:'medium'}}\n                        </small>\n                        <small *ngIf=\"scenarioExecutionReport.user\" class=\"text-muted ms-2\">\n                            {{'global.smallword.by' | translate}} : <b>{{scenarioExecutionReport.user}}</b>\n                        </small>\n                        <small class=\"text-muted ms-2\">\n                            -  {{'admin.targets.environment' | translate}} : <b>{{scenarioExecutionReport.environment}}</b>\n                        </small>\n                    </span>\n                    <div class=\"text-sm-center\" *hasAuthorization=\"[Authorization.SCENARIO_EXECUTE]\">\n                        <div *ngIf=\"scenarioExecutionReport.report.status == 'RUNNING' || scenarioExecutionReport.report.status == 'PAUSED'\"\n                              class=\"btn-group btn-group-sm mt-1 justify-content-center position-relative\">\n                            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"stopScenario()\"\n                                    [disabled]=\"scenarioExecutionReport.report.status != 'RUNNING'\">\n                                <span class=\"fa fa-stop\"></span>\n                                <span class=\"btn-label\">{{'global.actions.stop' | translate}}</span>\n                            </button>\n\n                            <button type=\"button\" class=\"btn btn-secondary mx-1\" (click)=\"pauseScenario()\"\n                                    [disabled]=\"scenarioExecutionReport.report.status != 'RUNNING'\">\n                                <span class=\"fa fa-pause\"></span>\n                                <span class=\"btn-label\">{{'global.actions.pause' | translate}}</span>\n                            </button>\n\n                            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"resumeScenario()\"\n                                    [disabled]=\"scenarioExecutionReport.report.status != 'PAUSED'\">\n                                <span class=\"fa fa-play\"></span>\n                                <span class=\"btn-label\">{{'global.actions.resume' | translate}}</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"btn-group float-end w-15\">\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-info m-2\" [ngClass]=\"!toggleScenarioInfo ? 'active' : ''\" (click)=\"expandAllInfo()\">\n                        <span class=\"btn-label\"> {{ 'scenarios.execution.step.actions.informations' | translate }}\n                        </span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-outline-secondary m-2\" [ngClass]=\"!toggleScenarioDetails ? 'active' : ''\" (click)=\"expandAllDetails()\">\n                        <span class=\"btn-label\">\n                            {{toggleScenarioDetails ? ('scenarios.execution.actions.details.show' | translate) : ('scenarios.execution.actions.details.hide' | translate)}}\n                        </span>\n                    </button>\n                </div>\n            </div>\n            <div class=\"steps\">\n                <chutney-scenario-step-report *ngFor=\"let report of scenarioExecutionReport.report.steps; let i = index\"\n                                              [id]=\"i\"\n                                              [step]=\"report\"></chutney-scenario-step-report>\n            </div>\n        </ng-container>\n        <div *ngIf=\"!scenarioExecutionReport\" class=\"border background-white\">\n            <ng-container *ngIf=\"(scenarioComponent$ | async) as scenarioComponent\">\n                <div *ngFor=\"let step of scenarioComponent.componentSteps\">\n                    <chutney-component-read [step]=step></chutney-component-read>\n                </div>\n            </ng-container>\n            <ng-container *ngIf=\"(scenarioGwt$ | async) as scenarioGwt\">\n                <div *ngIf=\"scenarioGwt.scenario.givens.length > 0\" class=\"gwt\" id=\"given\">\n                    <div *ngFor=\"let step of scenarioGwt.scenario.givens\">\n                        <chutney-gwt-read [step]=step [type]=\"'given'\"></chutney-gwt-read>\n                    </div>\n                </div>\n                <div *ngIf=\"scenarioGwt.scenario.when\" class=\"gwt\" id=\"when\">\n                    <chutney-gwt-read [step]=scenarioGwt.scenario.when [type]=\"'when'\"></chutney-gwt-read>\n                </div>\n                <div *ngIf=\"scenarioGwt.scenario.thens.length > 0\" class=\"gwt\" id=\"then\">\n                    <div *ngFor=\"let step of scenarioGwt.scenario.thens\">\n                        <chutney-gwt-read [step]=step [type]=\"'then'\"></chutney-gwt-read>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "ScenariosComponent",
            "id": "component-ScenariosComponent-a02676ab8ab849418175ac113098bb957e8b8af6489a27e1badff07fe271953cc17dcb122e6f6aa5f447ce909201901d2a14fa7fd1fafcac8f1178d354242d61",
            "file": "src/app/modules/scenarios/components/search-list/scenarios.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-scenarios",
            "styleUrls": [
                "./scenarios.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenarios.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Authorization",
                    "defaultValue": "Authorization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "fullTextFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fullTextSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isComposed",
                    "defaultValue": "TestCase.isComposed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "jiraMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "jiraUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "orderBy",
                    "defaultValue": "'lastExecution'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "reverseOrder",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "SCENARIO_TYPES",
                    "defaultValue": "[ScenarioType.FORM, ScenarioType.COMPOSED]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "scenarioTypeFilter",
                    "defaultValue": "new SelectableTags<ScenarioType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "searchSub$",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedTags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "settings",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "textFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "urlParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "viewedScenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ScenarioIndex>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "applyDefaultState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFiltersToRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applySavedState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "applyUriState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createNewScenario",
                    "args": [
                        {
                            "name": "compose",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "compose",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOnAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findAllTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getJiraLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyExtractorBy",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(i: any) => any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenarios",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "getSelectedTags",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getTagsForComboModel",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initJiraPlugin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "localFilter",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarios",
                            "type": "Array<ScenarioIndex>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnItemDeSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnItemDeSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scenarioTypePresent",
                    "args": [
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarioTypes",
                            "type": "ScenarioType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedTags",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setSelectedTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sortBy",
                    "args": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortScenarios",
                    "args": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverseOrder",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverseOrder",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tagPresent",
                    "args": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "String[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "ScenarioIndex",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleScenarioTypeFilter",
                    "args": [
                        {
                            "name": "scenarioType",
                            "type": "ScenarioType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioType",
                            "type": "ScenarioType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFullTextFilter",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTextFilter",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { forkJoin, Subject, Subscription } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\n\nimport {\n    distinct,\n    filterOnTextContent,\n    flatMap,\n    intersection,\n    newInstance,\n    sortByAndOrder\n} from '@shared/tools/array-utils';\nimport { StateService } from '@shared/state/state.service';\nimport { ScenarioService, JiraPluginService, JiraPluginConfigurationService } from '@core/services';\nimport { ScenarioIndex, ScenarioType, SelectableTags, Authorization, TestCase } from '@model';\n\n@Component({\n    selector: 'chutney-scenarios',\n    templateUrl: './scenarios.component.html',\n    styleUrls: ['./scenarios.component.scss']\n})\nexport class ScenariosComponent implements OnInit, OnDestroy {\n\n    SCENARIO_TYPES = [ScenarioType.FORM, ScenarioType.COMPOSED];\n    urlParams: Subscription;\n\n    scenarios: Array<ScenarioIndex> = [];\n\n    // Filter\n    viewedScenarios: Array<ScenarioIndex> = [];\n    textFilter: string;\n    fullTextFilter: string;\n    scenarioTypeFilter = new SelectableTags<ScenarioType>();\n    settings = {};\n    tags = [];\n    selectedTags = [];\n    fullTextSearch = false;\n    // Jira\n    jiraMap: Map<string, string> = new Map();\n    jiraUrl = '';\n    // Order\n    orderBy = 'lastExecution';\n    reverseOrder = false;\n\n    private isComposed = TestCase.isComposed;\n    private searchSub$ = new Subject<string>();\n\n    Authorization = Authorization;\n\n    constructor(\n        private router: Router,\n        private scenarioService: ScenarioService,\n        private jiraLinkService: JiraPluginService,\n        private jiraPluginConfigurationService: JiraPluginConfigurationService,\n        private stateService: StateService,\n        private readonly route: ActivatedRoute,\n    ) {\n    }\n\n    ngOnInit() {\n        this.initJiraPlugin();\n        this.searchSub$.pipe(\n            debounceTime(400)\n            // distinctUntilChanged()\n        ).subscribe((inputValue) => {\n            this.scenarioService.search(this.fullTextFilter).subscribe((res) => {\n                    if (this.fullTextFilter) {\n                        this.localFilter(res);\n                    } else {\n                        this.localFilter(this.scenarios);\n                    }\n                }\n            );\n        });\n\n        this.getScenarios()\n            .then(r => {\n                this.scenarios = r || [];\n                this.applyDefaultState();\n                this.applySavedState();\n                this.applyUriState();\n                this.applyFilters();\n            })\n            .catch(err => console.log(err));\n\n\n        this.settings = {\n            text: 'Select tag',\n            enableCheckAll: false,\n            enableSearchFilter: true,\n            autoPosition: false\n        };\n    }\n\n    private initTags() {\n        const allTagsInScenario: string[] = this.findAllTags();\n        this.tags = this.getTagsForComboModel(allTagsInScenario);\n    }\n\n    ngOnDestroy(): void {\n        if (this.urlParams) {\n            this.urlParams.unsubscribe();\n        }\n    }\n\n    private async getScenarios() {\n        return this.scenarioService.findScenarios().toPromise();\n    }\n\n    private applyDefaultState() {\n        this.viewedScenarios = this.scenarios;\n        this.scenarioTypeFilter.initialize(this.SCENARIO_TYPES);\n        this.initTags();\n    }\n\n    private findAllTags() {\n        return distinct(flatMap(this.scenarios, (sc) => sc.tags)).sort();\n    }\n\n    private applySavedState() {\n        this.setSelectedTypes();\n        this.setSelectedTags();\n    }\n\n    private setSelectedTags() {\n        const savedTags = this.stateService.getTags();\n        if (savedTags != null) {\n            this.selectedTags = this.getTagsForComboModel(savedTags);\n        }\n    }\n    private setSelectedTypes() {\n        const savedScenarioType = this.stateService.getScenarioType();\n        if (savedScenarioType != null && savedScenarioType.length > 0) {\n            this.scenarioTypeFilter.selectTags(savedScenarioType);\n        }\n    }\n\n    private applyUriState() {\n        this.urlParams = this.route.queryParams\n            .pipe(map((params: Array<any>) => {\n                    if (params['text']) {\n                        this.textFilter = params['text'];\n                    } else {\n                        this.textFilter = '';\n                    }\n                    if (params['orderBy']) {\n                        this.orderBy = params['orderBy'];\n                    }\n                    if (params['reverseOrder']) {\n                        this.reverseOrder = params['reverseOrder'] === 'true';\n                    }\n                    if (params['type']) {\n                        this.scenarioTypeFilter.selectTags(params['type'].split(','));\n                    }\n                    if (params['tags']) {\n                        const uriTag = params['tags'].split(',');\n                        if (uriTag != null) {\n                            this.selectedTags = this.getTagsForComboModel(uriTag);\n                        }\n                    }\n                    this.applyFilters();\n                    this.ngOnDestroy();\n                },\n                (error) => console.log(error)))\n            .subscribe();\n\n    }\n\n    createNewScenario(compose: boolean) {\n        if (compose) {\n            this.router.navigateByUrl('/scenario/component-edition');\n        } else {\n            this.router.navigateByUrl('/scenario/raw-edition');\n        }\n    }\n\n    // Ordering //\n    sortBy(property) {\n        if (this.orderBy === property) {\n            this.reverseOrder = !this.reverseOrder;\n        }\n\n        this.orderBy = property;\n        this.applyFilters();\n    }\n\n    sortScenarios(property, reverseOrder) {\n        this.viewedScenarios = sortByAndOrder(\n            this.viewedScenarios,\n            this.getKeyExtractorBy(property),\n            reverseOrder\n        );\n    }\n\n    private getKeyExtractorBy(property: string) {\n        if (property === 'title') {\n            return i => i[property] == null ? '' : i[property].toLowerCase();\n        }\n        if (property === 'lastExecution' || property === 'creationDate') {\n            const now = Date.now();\n            return i => i[property] == null ? now - 1491841324 /*2017-04-10T16:22:04*/ : now - Date.parse(i[property]);\n        } else {\n            return i => i[property] == null ? '' : i[property];\n        }\n    }\n\n    // Filtering //\n\n    updateTextFilter(text: string) {\n        this.textFilter = text;\n        this.applyFilters();\n    }\n\n    updateFullTextFilter(text: string) {\n        this.fullTextFilter = text;\n        this.applyFilters();\n    }\n\n    toggleScenarioTypeFilter(scenarioType: ScenarioType) {\n        this.scenarioTypeFilter.toggleSelect(scenarioType);\n        this.stateService.changeScenarioType(this.scenarioTypeFilter.selected());\n        this.applyFilters();\n    }\n\n    applyFilters() {\n        if (this.fullTextFilter) {\n            this.searchSub$.next(this.fullTextFilter);\n        } else {\n            this.localFilter(this.scenarios);\n        }\n    }\n\n    private localFilter(scenarios: Array<ScenarioIndex>) {\n        const scenariosWithJiraId = scenarios.map(sce => {\n            const jiraId = this.jiraMap.get(sce.id);\n            if (jiraId) {\n                sce.jiraId = jiraId;\n            }\n            return sce;\n        });\n        this.viewedScenarios = filterOnTextContent(scenariosWithJiraId, this.textFilter, ['title', 'id', 'jiraId', 'tags']);\n        this.viewedScenarios = this.filterOnAttributes();\n        this.sortScenarios(this.orderBy, this.reverseOrder);\n        this.applyFiltersToRoute();\n    }\n\n    // Jira link //\n    initJiraPlugin() {\n        this.jiraPluginConfigurationService.getUrl()\n            .subscribe((url) => {\n                if (url !== '') {\n                    this.jiraUrl = url;\n                    this.jiraLinkService.findScenarios()\n                        .subscribe(\n                            (result) => {\n                                this.jiraMap = result;\n                            }\n                        );\n                }\n            });\n    }\n\n    getJiraLink(id: string) {\n        return this.jiraUrl + '/browse/' + this.jiraMap.get(id);\n    }\n\n    private filterOnAttributes() {\n        const input = this.viewedScenarios;\n\n        const tags = this.getSelectedTags();\n        const scenarioTypes = this.scenarioTypeFilter.selected();\n\n        return input.filter((scenario: ScenarioIndex) => {\n            return this.tagPresent(tags, scenario) && this.scenarioTypePresent(scenarioTypes, scenario);\n        });\n    }\n\n    private scenarioTypePresent(scenarioTypes: ScenarioType[], scenario: ScenarioIndex): boolean {\n        return intersection(scenarioTypes, [scenario.type]).length > 0;\n    }\n\n    private applyFiltersToRoute(): void {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: {\n                text: this.textFilter,\n                orderBy: this.orderBy,\n                reverseOrder: this.reverseOrder,\n                type: this.scenarioTypeFilter.selected().toString(),\n                tags: this.getSelectedTags().toString()\n            }\n        });\n    }\n\n    private tagPresent(tags: String[], scenario: ScenarioIndex): boolean {\n        if(tags.length > 0) {\n            return intersection(tags, scenario.tags).length > 0;\n        } else {\n            return true;\n        }\n    }\n\n    onItemSelect() {\n        this.stateService.changeTags(this.getSelectedTags());\n        this.applyFilters();\n    }\n\n    OnItemDeSelect() {\n        this.stateService.changeTags(this.getSelectedTags());\n        this.applyFilters();\n    }\n\n    OnItemDeSelectAll() {\n        this.selectedTags = newInstance([]);\n        this.stateService.changeTags(this.getSelectedTags());\n        this.applyFilters();\n    }\n\n    private getSelectedTags() {\n        return this.selectedTags.map((i) => i.itemName);\n    }\n\n    private getTagsForComboModel(tags: String[]) {\n        let index = 0;\n        return tags.map((t) => {\n            index++;\n            return {'id': index, 'itemName': t};\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'menu';\n\n.create-scenario-wrapper {\n    float: right;\n}\n\n.create-scenario {\n    background: $vert2;\n    border: none;\n    height: 85px;\n    font-size: 11px;\n    text-align: center;\n    width: 50px;\n\n    button {\n        color: $grisfonce2;\n        text-align: center;\n\n        &:hover {\n            color: $blanc;\n        }\n\n        &:focus {\n            box-shadow: none;\n        }\n    }\n}\n\n.header-scenario {\n    margin-top: 20px;\n    margin-bottom: 10px;\n}\n\n.btn-group-xs > .btn, .btn-xs {\n    padding: .5rem .6rem;\n    font-size: .75rem;\n    line-height: .5;\n    border-radius: .2rem;\n    margin: 0;\n}\n\n.label-success {\n    background-color: $vert2;\n}\n\n.scenario-type-filter {\n    cursor: pointer;\n}\n\n.scenario-type-filter-selected {\n    cursor: pointer;\n    color: $bleu6;\n}\n\n.table-link {\n    color: #212529; // Bootstrap table default color\n}\n\n.table-sm {\n    font-size: 14px;\n}\n\n.filter {\n    cursor: pointer;\n    text-align: center;\n}\n\n:host ::ng-deep {\n\n    .popover {\n        max-width: 30vw; /* optional max width */\n        width: intrinsic; /* Safari/WebKit uses a non-standard name */\n        width: -moz-max-content; /* Firefox/Gecko */\n        width: -webkit-max-content; /* Chrome */\n        border: 0;\n        border-radius: 0.5rem;\n\n        .arrow {\n            margin-top: -8px !important;\n\n            &::after {\n                border-left-color: $bleu1;\n            }\n        }\n    }\n\n    .popover-body {\n        background-color: $bleu1;\n        color: $blanc;\n        border-radius: 0.5rem;\n    }\n}\n\n.btn:focus {\n    outline: none;\n    box-shadow: none;\n}\n\n.width-button-table {\n    width: 50px;\n}\n",
                    "styleUrl": "./scenarios.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioService",
                        "type": "ScenarioService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraLinkService",
                        "type": "JiraPluginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jiraPluginConfigurationService",
                        "type": "JiraPluginConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *hasAuthorization=\"[Authorization.SCENARIO_WRITE]\"\n     class=\"create-scenario-wrapper\"\n>\n    <div class=\"create-scenario\">\n        <button type=\"button\" class=\"btn btn-xs\" title=\"{{ 'scenarios.search.create.form' | translate }}\"\n                (click)=\"createNewScenario(false)\">\n            <span class=\"fa fa-pencil-alt fa-2x\"></span>\n        </button>\n        <button type=\"button\" class=\"btn btn-xs\" title=\"{{ 'scenarios.search.create.component' | translate }}\"\n                (click)=\"createNewScenario(true)\">\n            <span class=\"fa fa-cubes fa-2x\"></span>\n        </button>\n    </div>\n</div>\n<div class=\"header-scenario\">\n    <div class=\"d-flex ms-4\">\n        <div class=\"col-md-6 ms-5\">\n            <chutney-forms-search-field [id]=\"'scenario-search'\"\n                                        [placeholder]=\"'scenarios.search.placeholder' | translate\"\n                                        [searchInput]=\"textFilter\"\n                                        (searchInputEvent)=\"updateTextFilter($event)\"></chutney-forms-search-field>\n        </div>\n        <button type=\"button\" class=\"btn\"\n                (click)=\"fullTextSearch = !fullTextSearch\">\n            <span  class=\"fa\" [ngClass]=\"{'fa-plus' : !fullTextSearch,\n                              'fa-minus' : fullTextSearch}\"></span>\n        </button>\n    </div>\n    <div  *ngIf=\"fullTextSearch\" class=\"row ms-5\">\n        <div class=\"col-md-6 ms-2\">\n            <chutney-forms-search-field [id]=\"'scenario-search-fulltext'\"\n                                        [placeholder]=\"'scenarios.search.placeholder-fulltext' | translate\"\n                                        [searchInput]=\"fullTextFilter\"\n                                        (searchInputEvent)=\"updateFullTextFilter($event)\"></chutney-forms-search-field>\n        </div>\n    </div>\n    <div class=\"row ms-2\">\n\n        <div class=\"d-flex flex-wrap\">\n            <span *ngFor=\"let scenarioType of SCENARIO_TYPES; let i=index\"\n                  class=\"scenario-type-filter align-self-center fa\"\n                  [ngClass]=\"{'scenario-type-filter-selected' : scenarioTypeFilter.isSelected(scenarioType),\n                              'scenario-type-filter' : !scenarioTypeFilter.isSelected(scenarioType),\n                              'me-2': i < SCENARIO_TYPES.length - 1,\n                              'fa-pencil-alt': scenarioType === SCENARIO_TYPES[0],\n                              'fa-cubes': scenarioType === SCENARIO_TYPES[1]}\"\n                  (click)=\"toggleScenarioTypeFilter(scenarioType)\"></span>\n\n            <div class=\"ms-2\" style=\"width:400px\">\n                <angular2-multiselect [data]=\"tags\"\n                                      [(ngModel)]=\"selectedTags\"\n                                      [settings]=\"settings\"\n                                      (onSelect)=\"onItemSelect()\"\n                                      (onDeSelect)=\"OnItemDeSelect()\"\n                                      (onDeSelectAll)=\"OnItemDeSelectAll()\"\n                >\n                </angular2-multiselect>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"row\">\n    <span class=\"ms-3\">{{viewedScenarios.length}} / {{scenarios.length}}</span>\n    <div class=\"table-responsive mb-3 mx-3\">\n        <table class=\"table table-sm table-striped table-hover\">\n            <thead>\n            <tr>\n                <th class=\"filter w3\" scope=\"col\" (click)=\"sortBy('id')\">ID\n                    <span *ngIf=\"orderBy == 'id' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'id' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th scope=\"col\" class=\"w1\">&nbsp;</th>\n                <th class=\"filter w3\" scope=\"col\" (click)=\"sortBy('status')\">{{ 'scenarios.list.header.status'  | translate  }}\n                    <span *ngIf=\"orderBy == 'status' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'status' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th class=\"filter w10\" scope=\"col\" (click)=\"sortBy('lastExecution')\">{{ 'scenarios.list.header.execLast'  | translate  }}\n                    <span *ngIf=\"orderBy == 'lastExecution' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'lastExecution' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th class=\"filter w5\" scope=\"col\" (click)=\"sortBy('executionCount')\">{{ 'scenarios.list.header.execCount'  | translate  }}\n                    <span *ngIf=\"orderBy == 'executionCount' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'executionCount' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th class=\"filter w40\" scope=\"col\" (click)=\"sortBy('title')\">{{ 'scenarios.list.header.title'  | translate  }}\n                    <span *ngIf=\"orderBy == 'title' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'title' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th scope=\"col\" class=\"w1\">&nbsp;</th>\n                <th scope=\"col\" class=\"w1\">&nbsp;</th>\n                <th class=\"filter w12\" scope=\"col\" (click)=\"sortBy('tags')\">{{ 'scenarios.list.header.tags'  | translate  }}\n                    <span *ngIf=\"orderBy == 'tags' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'tags' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th class=\"filter w10\" scope=\"col\" (click)=\"sortBy('creationDate')\">{{ 'scenarios.list.header.creation'  | translate  }}\n                    <span *ngIf=\"orderBy == 'creationDate' && reverseOrder\" class=\"fa fa-caret-down\"></span>\n                    <span *ngIf=\"orderBy == 'creationDate' && !reverseOrder\" class=\"fa fa-caret-up\"></span>\n                </th>\n                <th class=\"w12\" scope=\"col\">\n                </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let scenario of viewedScenarios\">\n\n                <td class=\"text-center\">\n                    <span>{{scenario.id}}</span>\n                </td>\n\n                <td class=\"text-center\">\n                    <span class=\"fa\" [ngClass]=\"scenario.isComposed ? 'fa-cubes' : 'fa-pencil-alt'\"></span>\n                </td>\n\n                <td scope=\"row\" class=\"text-center\">\n                    <chutney-execution-badge [status]=\"scenario.status\"></chutney-execution-badge>\n                </td>\n\n                <td scope=\"row\" class=\"text-center\">\n                    {{ scenario.lastExecution != null ? (scenario.lastExecution | amLocale:'fr' | amTimeAgo) : \"\" }}\n                </td>\n\n                <td scope=\"row\" class=\"text-center\">{{scenario.executionCount}}</td>\n\n                <td [routerLink]=\"['/scenario', scenario.id, 'execution', 'last']\" (click)=\"$event.stopPropagation()\" class=\"scenario-title pointer\">{{scenario.title}}</td>\n\n                <td>\n                    <a *ngIf=\"jiraMap.has(scenario.id)\" role=\"button\" class=\"btn btn-sm btn-link me-0\"\n                        target=\"_blank\" href=\"{{getJiraLink(scenario.id)}}\"\n                        ngbPopover=\"{{jiraMap.get(scenario.id)}}\" placement=\"left\" (click)=\"$event.stopPropagation()\"\n                        triggers=\"mouseenter:mouseleave\">\n                        <span class=\"fab fa-jira\" aria-hidden=\"true\">\n                        </span>\n                    </a>\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-sm btn-link me-0\"\n                            ngbPopover=\"{{scenario.description}}\" placement=\"left\"\n                            triggers=\"mouseenter:mouseleave\">\n                        <span class=\"fa fa-info-circle\" aria-hidden=\"true\"></span>\n                    </button>\n                </td>\n\n                <td class=\"text-center\">\n                    <span *ngIf=\"scenario.tags.length <= 3\">\n                        <span *ngFor=\"let tag of scenario.tags\"\n                              class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                    </span>\n                    <span *ngIf=\"scenario.tags.length > 3\">\n                        <span *ngFor=\"let tag of scenario.tags | slice:0:2\"\n                              class=\"chutney-tag chutney-tag-selected\">{{tag}}</span>\n                        <button type=\"button\" class=\"chutney-tag chutney-tag-selected\"\n                                ngbPopover=\"{{scenario.tags}}\" placement=\"left\"\n                                triggers=\"mouseenter:mouseleave\" container=\"body\">\n                            ...\n                        </button>\n                    </span>\n                </td>\n                <td scope=\"row\" class=\"text-center\">\n                    {{ scenario.creationDate | amLocale:'fr' | amTimeAgo }}\n                </td>\n                <td >\n                    <button type=\"button\" class=\"btn bnt-xs\" [routerLink]=\"['/scenario', scenario.id, 'execution', 'last']\" (click)=\"$event.stopPropagation()\" >\n                        <span  class=\"fa fa-eye\"></span>\n                    </button>\n                    <button type=\"button\" class=\"btn bnt-xs\"  routerLink=\"{{isComposed(scenario.id) ? '/scenario/' + scenario.id + '/component-edition' : '/scenario/' + scenario.id + '/raw-edition'}}\" (click)=\"$event.stopPropagation()\">\n                        <span  class=\"fa fa-edit\"></span>\n                    </button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n"
        },
        {
            "name": "SearchFieldComponent",
            "id": "component-SearchFieldComponent-0ba73ae3977431ddeb3317fbf07a9f43c0f03fa0c8531e542ba5855baad3ef922a38bf660dff48b3e1f521975024709abd8952992d776de58a76a6e11f6acfaa",
            "file": "src/app/molecules/forms/search-field/search-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-forms-search-field",
            "styleUrls": [
                "./search-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "searchInputEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "fireChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'chutney-forms-search-field',\n  templateUrl: './search-field.component.html',\n  styleUrls: ['./search-field.component.scss']\n})\nexport class SearchFieldComponent implements OnInit {\n\n    @Input() id: string;\n    @Input() placeholder: string;\n    @Output() searchInputEvent = new EventEmitter<string>();\n    @Input() searchInput:  string;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  fireChangeEvent() {\n    this.searchInputEvent.emit(this.searchInput);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n\n.search-field-group {\n    display: flex;\n}\n\ninput.search-field  {\n    border: none;\n    font-size: 20px;\n    width:100%;\n}\n\nspan.search-field {\n    padding-top: 4px;\n    border: none;\n}\n",
                    "styleUrl": "./search-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search-field-group\">\n    <input type=\"text\" id=\"{{id}}\" placeholder=\"{{placeholder}}\"  class=\"form-control\" [(ngModel)]=\"searchInput\"  (ngModelChange)=\"fireChangeEvent()\">\n</div>\n"
        },
        {
            "name": "StepComponent",
            "id": "component-StepComponent-c5dbd8a110e4628429bdc06ce35f76df456381e2c82af3319373dd986d8d2599b3eecaca649c78a934a35a628fa3acdf98c4c45343d88be1fcf9669d564d52c9",
            "file": "src/app/modules/scenarios/components/execution/step/step.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-scenario-step",
            "styleUrls": [
                "./step.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./step.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Step",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expandAllSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "inputCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { Step } from '@model';\nimport { Subscription } from 'rxjs';\nimport { EventManagerService } from '@shared';\n\n@Component({\n    selector: 'chutney-scenario-step',\n    templateUrl: './step.component.html',\n    styleUrls: ['./step.component.scss']\n})\nexport class StepComponent implements OnInit, OnDestroy {\n    @Input() step: Step;\n    @Input() id: number;\n\n    inputCollapsed = true;\n\n    private expandAllSubscription: Subscription;\n\n    constructor(private eventManager: EventManagerService) { }\n\n    ngOnInit() {\n        this.expandAllSubscription = this.eventManager.subscribe('toggleScenarioDetails', (data) => {\n            this.inputCollapsed = data.expand;\n        });\n    }\n\n    ngOnDestroy() {\n        this.eventManager.destroy(this.expandAllSubscription);\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div.step {\n    border: 0 solid #eee;\n    border-left-width: .25rem;\n\n    margin-top: 0;\n    margin-bottom: 0;\n    height: 100%;\n}\n\ndiv.step-container {\n    margin-top: 0;\n    margin-bottom: 0;\n}\n\n.optional {\n    color: #58c69f;\n}\n\nbutton.btn-link {\n    border-width: 0;\n    padding: 0;\n}\n\npre {\n    background-color: white;\n}\n\n.btn-toolbar button {\n    height: 20px;\n    padding-top: 0;\n    margin-top: 3px;\n}\n\n.inputs {\n    border: 0 double rgba(216, 216, 216, 0.87);\n    border-left-width: .25rem;\n    padding-left: 5px;\n}",
                    "styleUrl": "./step.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row step-container\">\n    <div class=\"col col-sm-11\">\n        <div class=\"row step\">\n            <div class=\"col\">\n                <div class=\"btn-toolbar\">\n                    <div class=\"me-4\"><em >{{step.name}}</em></div>\n                    <div class=\"me-4\"><b class=\"me-2\">{{step.type}}</b> {{step.target}}</div>\n\n                    <div *ngIf=\"step.inputs\" class=\"btn-group btn-group-sm\">\n                        <button type=\"button\" class=\"btn btn-outline-secondary me-2\" (click)=\"inputCollapsed = !inputCollapsed\" [attr.aria-expanded]=\"!inputCollapsed\">{{ 'scenarios.execution.step.actions.details' | translate }}</button>\n                    </div>\n                </div>\n                <div *ngIf=\"step.inputs\" class=\"inputs\">\n                    <div *ngFor=\"let input of step.inputs | objectAsEntryList\"  [ngbCollapse]=\"inputCollapsed\" >\n                        {{input.key}} :  {{input.value | stringify}}\n                    </div>\n                </div>\n\n                <div class=\"row\" *ngIf=\"step.steps\">\n                    <div *ngIf=\"step.steps\" class=\"col\">\n                        <chutney-scenario-step *ngFor=\"let s of step.steps; let i = index\" [step]=\"s\" [id]=\"id + '_' + i\"></chutney-scenario-step>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "StepReportComponent",
            "id": "component-StepReportComponent-e0edbbaa18b1edc72f1f0eac67bd8ee8902d2c8697393055c9bfb1907a783bfa246d664f32ae08c1cc5e1219c22c04cdc6c62902d6841731f750ffffc58e3451",
            "file": "src/app/modules/scenarios/components/execution/step-report/step-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-scenario-step-report",
            "styleUrls": [
                "./step-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./step-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "StepExecutionReport",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorsCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "expandAllSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "informationCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "inputCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "stepsCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasOutputs",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDetails",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrors",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInformation",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { StepExecutionReport } from '@model';\nimport { Subscription } from 'rxjs';\nimport { EventManagerService } from '@shared';\n\n@Component({\n    selector: 'chutney-scenario-step-report',\n    templateUrl: './step-report.component.html',\n    styleUrls: ['./step-report.component.scss']\n})\nexport class StepReportComponent implements OnInit, OnDestroy {\n    @Input() step: StepExecutionReport;\n    @Input() id: number;\n\n    stepsCollapsed = true;\n    informationCollapsed = true;\n    errorsCollapsed = true;\n    inputCollapsed = true;\n\n    private expandAllSubscription: Subscription;\n\n    constructor(private eventManager: EventManagerService) { }\n\n    ngOnInit() {\n        this.expandAllSubscription = this.eventManager.subscribe('toggleScenarioDetails', (data) => {\n            this.inputCollapsed = data.expand;\n        });\n        this.expandAllSubscription = this.eventManager.subscribe('toggleScenarioInfo', (data) => {\n            this.informationCollapsed = data.expand;\n        });\n        this.stepsCollapsed = ('PAUSED' !== this.step.status && 'RUNNING' !== this.step.status && 'FAILURE' !== this.step.status);\n    }\n\n    ngOnDestroy() {\n        this.eventManager.destroy(this.expandAllSubscription);\n    }\n\n    getInformation(): string[] {\n        if (this.step != null && this.step.information != null) {\n            return this.step.information;\n        } else {\n            return [];\n        }\n    }\n\n    getErrors(): string[] {\n        if (this.step != null && this.step.errors != null) {\n            return this.step.errors;\n        } else {\n            return [];\n        }\n    }\n\n    hasInputs(): boolean {\n        let size = 0;\n        if (this.step.evaluatedInputs) {\n            for (const key of Object.getOwnPropertyNames(this.step.evaluatedInputs)) {\n                size++;\n            }\n        }\n        return size > 0;\n    }\n\n    hasOutputs(): boolean {\n        let size = 0;\n        if (this.step.stepOutputs) {\n            for (const key of Object.getOwnPropertyNames(this.step.stepOutputs)) {\n                size++;\n            }\n        }\n        return size > 0;\n    }\n\n    showInformation(event: MouseEvent) {\n        this.informationCollapsed = !this.informationCollapsed;\n        event.stopPropagation();\n    }\n\n    showDetails(event: MouseEvent) {\n        this.inputCollapsed = !this.inputCollapsed;\n        event.stopPropagation();\n    }\n\n    showErrors(event: MouseEvent) {\n        this.errorsCollapsed = !this.errorsCollapsed;\n        event.stopPropagation();\n    }\n\n    collapse(event: MouseEvent) {\n        this.stepsCollapsed = !this.stepsCollapsed;\n        this.informationCollapsed = this.stepsCollapsed;\n        this.inputCollapsed = this.stepsCollapsed;\n        this.errorsCollapsed = this.stepsCollapsed;\n        event.stopPropagation();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n@import 'mixins';\n@import 'animations';\n\n@include border-animation(\n    $animation_name: running-report-step-border-anim,\n    $fromWidth: 0 0 0 3px,\n    $fromStyle: solid,\n    $fromColor: rgba($grisfonce2, 0),\n    $toWidth: 0 0 0 5px,\n    $toStyle: solid,\n    $toColor: rgba($grisfonce2, 50)\n);\n\ndiv.step-container-wrapper {\n    margin: 1px;\n    line-height: normal;\n    font-size: 14px;\n}\n\ndiv.step-container {\n    margin: 5px 0 5px 0;\n    width: 100%;\n    border-radius: 4px;\n    box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n    background-color: white;\n    border-left: 4px solid;\n}\n\ndiv.step-container:hover {\n    // margin: 0 1px 10px 0;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n}\n\ndiv.result-header {\n    width: 100%;\n\n    display: flex;\n    flex-wrap: wrap;\n\n    div.result-header-status {\n        background-color: #efefef;\n        font-size: 10px;\n        padding: 4px 15px;\n    }\n\n    div.step-name {\n        margin-top: 0;\n        margin-bottom: 0;\n        padding-top: 4px;\n        padding-bottom: 4px;\n\n        span {\n            flex: auto;\n        }\n\n        .btn-toolbar {\n            float: right;\n        }\n    }\n\n}\n\n.collapsible:hover {\n    cursor: pointer;\n}\n\ndiv.result-body {\n    border: 0 solid #efefef;\n    border-top-width: .05rem;\n    width: 100%;\n}\n\ndiv.result-header-success {\n    border-left-color: #0275d8;\n\n    div.result-header-status {\n        color: #0275d8;\n    }\n}\n\ndiv.result-header-running {\n    //color: rgb(240,173,78);\n    @include animation(\n        $animation_name: running-report-step-border-anim,\n        $animation_duration: 750ms,\n        $animation_timing-function: linear,\n        $animation_iteration-count: infinite,\n        $animation_direction: alternate);\n}\n\ndiv.result-header-error {\n    border-left-color: #d9534f;\n    div.result-header-status {\n        color: #d9534f;\n    }\n}\n\n\ndiv.step {\n\n    margin-top: 0;\n    margin-bottom: 0;\n    height: 100%;\n\n    .inputs {\n        padding: 10px;\n        font-size: 12px;\n    }\n}\n\n.optional {\n    color: #58c69f;\n}\n\nbutton.btn-link {\n    border-width: 0;\n    padding: 0;\n}\n\n.error {\n    color: #d9534f;\n    font-weight: bold;\n    font-size: 12px;\n    padding: 10px;\n\n    pre {\n        color: #d9534f;\n        font-weight: bold;\n    }\n\n    button {\n        color: #d9534f;\n        text-decoration: underline;\n    }\n}\n\n.information {\n    color: #58c69f;\n    font-weight: bold;\n    font-size: 12px;\n    padding: 10px;\n\n    button {\n        color: #58c69f;\n        text-decoration: underline;\n    }\n}\n\npre {\n    background-color: white;\n}\n\n.btn-toolbar {\n    margin-right: 20px;\n\n    button {\n        height: 18px;\n        padding-top: 0;\n        font-size: 12px;\n    }\n\n    .inputs {\n        border: 0 double rgba(216, 216, 216, 0.87);\n        border-left-width: .25rem;\n        //border-left-color: grey;\n        padding-left: 5px;\n    }\n\n    .exec-date {\n        white-space: nowrap;\n    }\n\n    .steps-btn {\n        position: absolute;\n        right: 10px;\n\n        button {\n            background-color: transparent;\n\n            &:focus {\n                box-shadow: none;\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./step-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "eventManager",
                        "type": "EventManagerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row step-container-wrapper\">\n    <div class=\"row step-container\"\n        [ngClass]=\"{'result-header-success': step != undefined && step.status == 'SUCCESS',\n                    'result-header-error': step != undefined && step.status == 'FAILURE',\n                    'result-header-running': step != undefined && (step.status == 'RUNNING' || step.status == 'PAUSED')}\">\n      <div class=\"result-header collapsible\" (click)=\"collapse($event)\">\n          <div *ngIf=\"step && step.status != 'NOT_EXECUTED'\" class=\"result-header-status\">\n            <div *ngIf=\"step && step.status != 'NOT_EXECUTED'\" [ngbTooltip]=\"step.duration | duration\" placement=\"left\">{{step.duration | duration:'short'}}</div>\n            <div *ngIf=\"step && step.status != 'NOT_EXECUTED'\" class=\"exec-date\" [ngbTooltip]=\"step.startDate | date\" placement=\"left\">{{step.startDate | date:'mediumTime'}}</div>\n          </div>\n          <div class=\"col step-name\">\n              <span class=\"me-5\"><em>{{step.name}}</em></span>\n              <div class=\"btn-toolbar\">\n                <div *ngIf=\"getInformation().length > 0\" class=\"btn-group btn-group-sm me-2\">\n                  <button type=\"button\" class=\"btn btn-outline-info\" [ngClass]=\"!informationCollapsed ? 'active' : ''\" (click)=\"showInformation($event)\" [attr.aria-pressed]=\"!informationCollapsed\" [attr.aria-expanded]=\"!informationCollapsed\">{{ 'scenarios.execution.step.actions.informations' | translate }}</button>\n                </div>\n                <div *ngIf=\"getErrors().length > 1\" class=\"btn-group btn-group-sm me-2\">\n                  <button type=\"button\" class=\"btn btn-outline-danger\" [ngClass]=\"!errorsCollapsed ? 'active' : ''\" (click)=\"showErrors($event)\" [attr.aria-pressed]=\"!errorsCollapsed\" [attr.aria-expanded]=\"!errorsCollapsed\">{{ 'scenarios.execution.step.actions.errors' | translate }}</button>\n                </div>\n                <div class=\"btn-group btn-group-sm me-2\">\n                  <button type=\"button\" class=\"btn btn-outline-secondary\" [ngClass]=\"!inputCollapsed ? 'active' : ''\" (click)=\"showDetails($event)\" [attr.aria-pressed]=\"!inputCollapsed\" [attr.aria-expanded]=\"!inputCollapsed\">{{ 'scenarios.execution.step.actions.details' | translate }}</button>\n                </div>\n                <div *ngIf=\"step.steps && step.steps.length > 0\" class=\"btn-group btn-group-sm steps-btn\">\n                  <span class=\"fa\" [ngClass]=\"stepsCollapsed ? 'fa-chevron-down' : 'fa-chevron-up'\" [attr.aria-expanded]=\"!stepsCollapsed\"></span>\n                </div>\n              </div>\n          </div>\n      </div>\n      <div class=\"result-body\">\n          <div class=\"step\">\n                <div class=\"inputs\" [ngbCollapse]=\"inputCollapsed\">\n                    <div>\n                      <b class=\"me-1\">{{step.type}}</b>\n                      <span *ngIf=\"step.targetName\" class=\"mx-2\">on <b>{{step.targetName}}</b></span>\n                      <span *ngIf=\"step.strategy\">with <b>{{step.strategy}}</b> strategy</span>\n                    </div>\n                  <div *ngIf=\"hasInputs()\">\n                    <em>{{'scenarios.execution.inputs' | translate}}:</em>\n                    <div *ngFor=\"let input of step.evaluatedInputs | objectAsEntryList\" class=\"ps-2\">\n                      <pre>{{input.key}} :  {{input.value | stringify | prettyPrint}}</pre>\n                    </div>\n                  </div>\n                  <div *ngIf=\"hasOutputs()\">\n                    <em>{{'scenarios.execution.outputs' | translate}}:</em>\n                    <div *ngFor=\"let output of step.stepOutputs | objectAsEntryList\" class=\"ps-2\">\n                      <pre>{{output.key}} :  {{output.value | stringify | prettyPrint}}</pre>\n                    </div>\n                  </div>\n                </div>\n\n                <div [hidden]=\"getInformation().length == 0\">\n                    <div *ngIf=\"getInformation().length > 0\" class=\"information\" [ngbCollapse]=\"informationCollapsed\">\n                      <pre [innerHTML]=\"getInformation() | prettyPrint: true | thumbnail | safe: 'html'\"></pre>\n                    </div>\n                </div>\n\n                <div [hidden]=\"getErrors().length == 0\" >\n                    <div *ngIf=\"getErrors().length > 1\" class=\"error\" [ngbCollapse]=\"errorsCollapsed\">\n                        <pre [innerHTML]=\"getErrors() | prettyPrint: true | thumbnail | safe: 'html'\"></pre>\n                    </div>\n                    <div *ngIf=\"getErrors().length == 1\" class=\"error\">\n                        <pre [innerHTML]=\"getErrors()[0] | prettyPrint: true | thumbnail | safe: 'html'\"></pre>\n                    </div>\n                </div>\n\n                <div *ngIf=\"!stepsCollapsed && step.steps && step.steps.length > 0\" class=\"row\" [ngbCollapse]=\"stepsCollapsed\">\n                    <div class=\"col\">\n                        <chutney-scenario-step-report *ngFor=\"let s of step.steps; let i = index\" [step]=\"s\" [id]=\"id + '_' + i\"></chutney-scenario-step-report>\n                    </div>\n                </div>\n          </div>\n      </div>\n    </div>\n  </div>\n"
        },
        {
            "name": "StrategyFormComponent",
            "id": "component-StrategyFormComponent-002a8a5d6a6892cc85c4c7d393f67f5d270604711aec1797385a6a5f84c636af85b1b146c46c852184940ac37f29d6812e1267e6c1b2980d8ba485fa2b9b31bc",
            "file": "src/app/modules/component/components/sub/strategy-form/strategy-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StrategyFormComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => StrategyFormComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "chutney-strategy-form",
            "styleUrls": [
                "./strategy-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./strategy-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "strategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Strategy",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "parameterValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "selectedStrategyDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StrategyDefinition",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "strategyDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StrategyDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "strategyForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "getStrategies",
                    "args": [],
                    "optional": false,
                    "returnType": "StrategyDefinition[]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnChanges } from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors\n} from '@angular/forms';\nimport { of } from 'rxjs';\nimport { ParameterDefinition, Strategy, StrategyDefinition } from '@model';\n\n@Component({\n    selector: 'chutney-strategy-form',\n    templateUrl: './strategy-form.component.html',\n    styleUrls: ['./strategy-form.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => StrategyFormComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => StrategyFormComponent),\n            multi: true\n        }\n    ]\n})\nexport class StrategyFormComponent implements OnChanges, ControlValueAccessor {\n\n    @Input() strategy: Strategy;\n\n    strategyDefinitions: StrategyDefinition[];\n    strategyForm: FormGroup;\n\n    selectedStrategyDef: StrategyDefinition;\n    parameterValues: Object;\n\n    // services\n    getStrategies(): StrategyDefinition[] {\n        return [\n            new StrategyDefinition('Default', [], true),\n            new StrategyDefinition('Retry',\n                [ new ParameterDefinition('timeout', 'duration'), new ParameterDefinition('delay', 'duration') ],\n                false),\n            new StrategyDefinition('Soft', [], false)\n        ];\n    }\n    // # End of services\n\n    constructor(private formBuilder: FormBuilder) {\n        this.strategyForm = this.formBuilder.group({\n            type: String,\n            parameters: new FormControl()\n        });\n\n        of(this.getStrategies()).subscribe(serverStrategies => {\n            this.strategyDefinitions = serverStrategies;\n        });\n\n    }\n\n    // OnChanges\n    ngOnChanges(): void {\n        if (this.strategy == null ) {\n            this.strategy = new Strategy(this.strategyDefinitions.find(s => s.isDefault === true ).type, {});\n        }\n\n        // patch with initial value\n        this.strategyForm.controls['type'].patchValue(this.strategy.type);\n        this.setSelectedStrategy();\n    }\n\n    setSelectedStrategy() {\n        this.selectedStrategyDef = this.strategyDefinitions.find(s => s.type === this.strategyForm.get('type').value);\n        this.parameterValues = (this.strategy.type === this.selectedStrategyDef.type) ? this.strategy.parameters : {};\n    }\n\n    // CVA\n    onTouched: () => void = () => {};\n    propagateChange = (_: any) => {};\n\n    writeValue(val: any): void {\n        val && this.strategyForm.setValue(val, { emitEvent: false });\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n        if (this.strategyForm.get('type').value != null) {\n            this.propagateChange(new Strategy(this.selectedStrategyDef.type, this.parameterValues));\n        }\n        this.strategyForm.valueChanges.subscribe(fn);\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        isDisabled ? this.strategyForm.disable() : this.strategyForm.enable();\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.strategyForm.valid ? null : { invalidForm: {valid: false, message: 'strategy fields are invalid'}};\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./strategy-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "ControlValueAccessor"
            ],
            "templateData": "<ng-container [formGroup]=\"strategyForm\">\n    <div class=\"row\">\n        <label class=\"col-4 mb-0 ps-0 align-self-center fw-bold\" for=\"strategies\">{{'components.shared.edition.fields.strategy.name' | translate}}</label>\n        <div class=\"col-8\">\n            <select id=\"strategies\" class=\"form-select\" formControlName=\"type\" (change)=\"setSelectedStrategy()\">\n                <option *ngFor=\"let strategy of strategyDefinitions\" [ngValue]=\"strategy.type\">\n                    {{ strategy.type }}\n                </option>\n            </select>\n        </div>\n    </div>\n\n    <chutney-strategy-parameters-form [parameters]=\"selectedStrategyDef.parameters\" [values]=\"parameterValues\" formControlName=\"parameters\"></chutney-strategy-parameters-form>\n</ng-container>\n"
        },
        {
            "name": "StrategyParameterFormComponent",
            "id": "component-StrategyParameterFormComponent-02c3ad63dcd4498ef33c15c18f31c4a3f6d119f9e27340384dd1cea83293ce58f0bdf4d28e295b54128413efd9393bfb20e51ddc99d557a7b47afe641838b921",
            "file": "src/app/modules/component/components/sub/strategy-form/parameter-form/strategy-parameter-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StrategyParameterFormComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => StrategyParameterFormComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "chutney-strategy-parameters-form",
            "styleUrls": [
                "./strategy-parameter-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./strategy-parameter-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "ParameterDefinition[]",
                    "decorators": []
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Object",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "parameterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "registeredControls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createParametersForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "findValidatorFor",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findValue",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, OnChanges } from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    FormBuilder,\n    FormGroup,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validators\n} from '@angular/forms';\nimport { ParameterDefinition } from '@model';\nimport { durationValidator } from '@shared/validators/duration.validator';\n\n@Component({\n    selector: 'chutney-strategy-parameters-form',\n    templateUrl: './strategy-parameter-form.component.html',\n    styleUrls: ['./strategy-parameter-form.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => StrategyParameterFormComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => StrategyParameterFormComponent),\n            multi: true\n        }\n    ]\n})\nexport class StrategyParameterFormComponent implements OnChanges, ControlValueAccessor {\n\n    @Input() parameters: ParameterDefinition[] = [];\n    @Input() values: Object;\n\n    parameterForm: FormGroup;\n\n    private registeredControls: string[] = [];\n\n    constructor(private fb: FormBuilder) {\n        this.parameterForm = this.fb.group({});\n        this.createParametersForm();\n    }\n\n    // OnChanges\n    ngOnChanges(): void {\n        this.createParametersForm();\n    }\n\n    private createParametersForm() {\n        const disabledSave = this.parameterForm.disabled;\n        this.clearForm();\n        this.parameters.forEach(p => {\n            this.parameterForm.addControl(\n                p.name,\n                this.fb.control(this.findValue(p.name, this.values), this.findValidatorFor(p.type))\n            );\n            this.registeredControls.push(p.name);\n        });\n        this.setDisabledState(disabledSave);\n    }\n\n    private findValidatorFor(type: string) {\n        switch (type) {\n            case 'duration':\n                return durationValidator();\n            default:\n                return Validators.nullValidator;\n        }\n    }\n\n    private clearForm() {\n        this.registeredControls.forEach( name => this.parameterForm.removeControl(name) );\n        this.registeredControls = [];\n    }\n\n    private findValue(name: string, values: Object): any {\n        if (values === undefined) {\n            return '';\n        }\n\n        const kv: [string, any][] = Object.entries(values);\n        if (kv.length === 0) {\n            return '';\n        }\n\n        return kv.find(t => t.find(x => true) === name)[1];\n    }\n\n    // CVA\n    onTouched: () => void = () => {};\n\n    propagateChange = (_: any) => {};\n\n    writeValue(val: any): void {\n        val && this.parameterForm.setValue(val, { emitEvent: false });\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n        this.parameterForm.valueChanges.subscribe(fn);\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState?(isDisabled: boolean): void {\n        isDisabled ? this.parameterForm.disable() : this.parameterForm.enable();\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.parameterForm.valid ? null : {\n            invalidForm: {\n                valid: false,\n                message: 'retry strategy fields are invalid'\n            }\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./strategy-parameter-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"mt-3\" *ngIf=\"parameters.length > 0\" [formGroup]=\"parameterForm\">\n    <div *ngFor=\"let parameter of parameters\"  class=\"row\">\n        <label for=\"strategy-{{parameter.name}}\" class=\"col-3 mb-0 text-center align-self-center\">\n            {{parameter.name}}\n        </label>\n        <input id=\"strategy-{{parameter.name}}\" type=\"text\" autocomplete=\"off\"\n               class=\"col-9 form-control\"\n               [ngClass]=\"{\n                'is-valid': parameterForm.get(parameter.name).valid && parameterForm.get(parameter.name).enabled,\n                'is-invalid': !parameterForm.get(parameter.name).valid && parameterForm.get(parameter.name).enabled\n               }\"\n               formControlName=\"{{parameter.name}}\" />\n    </div>\n</div>\n"
        },
        {
            "name": "TablePanelComponent",
            "id": "component-TablePanelComponent-63a3d0c0daf29ca2007ad9c245936c8a5d9956e1c09025c82fde0374645afecd8cc0b0d27c093c2dbd352fb748194ec0589820b6a6e1e3b9b7b1daa12b3ff07c",
            "file": "src/app/molecules/panel/table-panel/table-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-table-panel",
            "styleUrls": [
                "./table-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "paginationControlConfig",
                    "defaultValue": "{\n    maxSize: 7,\n    directionLinks: true,\n    autoHide: false,\n    previousLabel: '',\n    nextLabel: '',\n    screenReaderPaginationLabel: 'pagination',\n    screenReaderPageLabel: 'page',\n    screenReaderCurrentLabel: 'current'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Object",
                    "decorators": []
                },
                {
                    "name": "paginationInstanceConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "PaginationInstance",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Table",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChangeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { PaginationInstance } from 'ngx-pagination';\n\nimport { Table } from '@model';\n\n@Component({\n  selector: 'chutney-table-panel',\n  templateUrl: './table-panel.component.html',\n  styleUrls: ['./table-panel.component.scss']\n})\nexport class TablePanelComponent {\n\n  @Input() table: Table;\n  @Input() paginationInstanceConfig: PaginationInstance;\n  @Input() paginationControlConfig: Object = {\n    maxSize: 7,\n    directionLinks: true,\n    autoHide: false,\n    previousLabel: '',\n    nextLabel: '',\n    screenReaderPaginationLabel: 'pagination',\n    screenReaderPageLabel: 'page',\n    screenReaderCurrentLabel: 'current'\n  };\n\n  @Output() pageChangeEvent = new EventEmitter();\n\n  pageChange(event: number) {\n    this.pageChangeEvent.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.table-pagination-controls {\n  text-align: center;\n}\n\n.table-pagination-controls ::ng-deep .ngx-pagination {\n  font-size: 0.8rem;\n\n  .current {\n    background: $bleu2;\n  }\n}\n",
                    "styleUrl": "./table-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"table-pagination-controls\" *ngIf=\"table && paginationInstanceConfig != undefined\">\n  <pagination-controls [id]=\"paginationInstanceConfig.id\"\n                       [maxSize]=\"paginationControlConfig.maxSize\"\n                       [directionLinks]=\"paginationControlConfig.directionLinks\"\n                       [autoHide]=\"paginationControlConfig.autoHide\"\n                       [previousLabel]=\"paginationControlConfig.previousLabel\"\n                       [nextLabel]=\"paginationControlConfig.nextLabel\"\n                       [screenReaderPaginationLabel]=\"paginationControlConfig.screenReaderPaginationLabel\"\n                       [screenReaderPageLabel]=\"paginationControlConfig.screenReaderPageLabel\"\n                       [screenReaderCurrentLabel]=\"paginationControlConfig.screenReaderCurrentLabel\"\n                       (pageChange)=\"pageChange($event)\">\n  </pagination-controls>\n</div>\n\n<table *ngIf=\"table\" class=\"table\">\n    <thead>\n        <tr>\n            <th *ngFor=\"let columnName of table.columnNames\">{{columnName}}</th>\n        </tr>\n    </thead>\n    <tbody *ngIf=\"paginationInstanceConfig != undefined\">\n        <tr *ngFor=\"let row of table.rows | paginate: paginationInstanceConfig\">\n            <td *ngFor=\"let value of row.values\">{{value}}</td>\n        </tr>\n    </tbody>\n    <tbody *ngIf=\"!(paginationInstanceConfig != undefined)\">\n      <tr *ngFor=\"let row of table.rows\">\n        <td *ngFor=\"let value of row.values\">{{value}}</td>\n      </tr>\n    </tbody>\n</table>\n"
        },
        {
            "name": "ToastInfoComponent",
            "id": "component-ToastInfoComponent-8e61de247ba0480dd13289e16c4649e65f8fb85680742d656380b7d850b8a2a51111fa7f2e598ff56438631caa7ab080e06f560fad3569ac2c77a176eee30609",
            "file": "src/app/molecules/toast/toast-info/toast-info.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-toast-info",
            "styleUrls": [
                "./toast-info.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast-info.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n\n@Component({\n  selector: 'chutney-toast-info',\n  templateUrl: './toast-info.html',\n  styleUrls: ['./toast-info.scss']\n})\nexport class ToastInfoComponent {\n\n  @Input() message: String;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".info-toast {\n    width: 300px;\n    overflow: hidden;\n    font-size: .875rem;\n    background-color: rgba(255,255,255,.85);\n    background-clip: padding-box;\n    border: 1px solid rgba(0,0,0,.1);\n    box-shadow: 0 .25rem .75rem rgba(0,0,0,.1);\n    border-radius: .25rem;\n}\n\n.info-toast-header {\n    color:#6c757d; \n    font-size: .875rem;\n    border-bottom:1px solid #c3c6c9;\n}",
                    "styleUrl": "./toast-info.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div *ngIf=\"message\" class=\"info-toast m-2\">\n    <div class=\"info-toast-header p-2\">\n        <strong class=\"me-auto\">Info</strong>\n        <button type=\"button\" class=\"ms-2 mb-1 close\" (click)=\"message = ''\">\n            <span aria-hidden=\"true\">&times;</span>\n        </button>\n    </div>\n    <div class=\"p-2\">\n        {{message}}\n    </div>\n</div>"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-a8e267a35abdbb38b13a537216f8dd7449a47fb8c82aab1160d88e97aa0339f5f9068e085f5a165804299882f297b5162ef268b332c7b2b706e0271cea063761",
            "file": "src/app/modules/component/components/sub/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "chutney-toolbar-component",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ComponentTask",
                    "decorators": []
                },
                {
                    "name": "parents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "childEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "duplicateEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "editEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "executeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "duplicate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "seeChild",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\n\nimport {\n    ComponentTask\n} from '@model';\nimport { EnvironmentAdminService } from '@core/services';\n\n@Component({\n    selector: 'chutney-toolbar-component',\n    templateUrl: './toolbar.component.html',\n    styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent implements OnInit{\n\n    @Input() editComponent: ComponentTask;\n    @Input() parents: any;\n\n    @Output() editEvent = new EventEmitter();\n    @Output() cancelEvent = new EventEmitter();\n    @Output() executeEvent = new EventEmitter();\n    @Output() childEvent = new EventEmitter();\n    @Output() deleteEvent = new EventEmitter();\n    @Output() duplicateEvent = new EventEmitter();\n\n    environments: Array<string>;\n\n    constructor(\n        private environmentAdminService: EnvironmentAdminService,\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.environmentAdminService.listEnvironmentsNames().subscribe(\n            (res) => this.environments = res\n        );\n    }\n\n\n    edit() {\n        this.editEvent.emit();\n    }\n\n    cancel() {\n        this.cancelEvent.emit();\n    }\n\n    execute(envName: string) {\n        this.executeEvent.emit(envName);\n    }\n\n    seeChild() {\n        this.childEvent.emit();\n    }\n\n    delete() {\n        this.deleteEvent.emit();\n    }\n\n    duplicate() {\n        this.duplicateEvent.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.btn-toolbar {\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    top: -28px;\n    margin-bottom: -28px;\n\n    div:first-child {\n        margin-left: auto;\n    }\n\n    div:last-child {\n        margin-left: auto;\n    }\n}\n",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "environmentAdminService",
                        "type": "EnvironmentAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\" class=\"btn btn-success\" (click)=\"edit()\"\n        title=\"{{'global.actions.record' | translate}}\">\n    <span class=\"fa fa-check\"></span>\n</button>\n<!-- TODO [disabled]=\"!parentForm.valid\" -->\n<button type=\"button\" class=\"btn btn-secondary ms-2\" (click)=\"cancel()\"\n        title=\"{{'global.actions.cancel' | translate}}\">\n    <span class=\"fa fa-times\"></span>\n</button>\n\n<button type=\"button\" class=\"btn btn-success ms-5 align-items-end\" (click)=\"duplicate()\"\n        title=\"{{'global.actions.clone' | translate}}\" [disabled]=\"!editComponent.id\">\n    <span class=\"fa fa-clone\"></span>\n</button>\n\n<div ngbDropdown class=\"d-inline-block ms-5\">\n    <button id=\"dropdownBasic1\" type=\"button\" class=\"btn btn-info\"\n            title=\"{{'global.actions.execute' | translate}}\"\n            [disabled]=\"!editComponent.id\" ngbDropdownToggle>\n        <span class=\"fa fa-play\"></span>\n    </button>\n    <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\">\n        <button *ngFor=\"let env of environments\" class=\"dropdown-item\"\n                (click)=\"execute(env)\">{{ env }}</button>\n    </div>\n</div>\n\n<chutney-delete-confirm-dialog  class=\"ms-5\" (deleteEvent)=\"delete()\"\n                            [btnSizeClass]=\"'m'\"\n                            [disabled]=\"(!editComponent || !editComponent.id) || (parents?.parentSteps.length > 0 || parents?.parentScenario.length > 0)\">\n</chutney-delete-confirm-dialog>\n"
        }
    ],
    "modules": [
        {
            "name": "AgentNetworkModule",
            "id": "module-AgentNetworkModule-b16492b2682eb3353935d4029d02695dcc489fdda3dbfdce6d175840c104c77f363838163c54f09b2ae7f7a0c29f0dda6c838b6bcf4f7c28747c7f8e1737be46",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/agent-network/agent-network.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AgentNetworkRoute } from './agent-network.routes';\n\nimport { AgentComponent } from './components/agent/agent.component';\nimport { AgentNetworkComponent } from './components/agent-network/agent-network.component';\nimport { NetworkGraphComponent } from './components/network-graph/network-graph.component';\nimport { AgentNetworkConfigurationComponent } from './components/agent-network-configuration/agent-network-configuration.component';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(AgentNetworkRoute),\n        FormsModule,\n        TranslateModule,\n        SharedModule\n    ],\n    declarations: [AgentNetworkComponent, AgentComponent, NetworkGraphComponent, AgentNetworkConfigurationComponent],\n})\nexport class AgentNetworkModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AgentComponent"
                        },
                        {
                            "name": "AgentNetworkComponent"
                        },
                        {
                            "name": "AgentNetworkConfigurationComponent"
                        },
                        {
                            "name": "NetworkGraphComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-458e331dbeeccfd5da539b739fc3044666e607db34bee20f8078fff0f90ef8a1c41afa03c391425c9e87e387233fcb62d5efe971f0db989e1904b3961e4a95f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { LoginComponent } from '@core/components/login/login.component';\nimport { ParentComponent } from '@core/components/parent/parent.component';\nimport { AuthGuard } from '@core/guards';\nimport { Authorization } from '@model';\n\nexport const appRoutes: Routes = [\n    { path: 'login', component: LoginComponent },\n    { path: 'login/:action', component: LoginComponent },\n    {\n        path: '', component: ParentComponent,\n        children: [\n            { path: '', redirectTo: '/home', pathMatch: 'full' },\n            {\n                path: 'home',\n                loadChildren: () => \"import('./modules/home-page/home-page.module').then(m => m.HomePageModule)\"\n            },\n            {\n                path: 'scenario',\n                loadChildren: () => \"import('./modules/scenarios/scenario.module').then(m => m.ScenarioModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.SCENARIO_READ,Authorization.SCENARIO_WRITE,Authorization.SCENARIO_EXECUTE ] }\n            },\n            {\n                path: 'campaign',\n                loadChildren: () => \"import('./modules/campaign/campaign.module').then(m => m.CampaignModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.CAMPAIGN_READ,Authorization.CAMPAIGN_WRITE,Authorization.CAMPAIGN_EXECUTE ] }\n            },\n            {\n                path: 'component',\n                loadChildren: () => \"import('./modules/component/component.module').then(m => m.ComponentModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.COMPONENT_READ,Authorization.COMPONENT_WRITE ] }\n            },\n            {\n                path: 'variable',\n                loadChildren: () => \"import('./modules/global-variable/global-variable.module').then(m => m.GlobalVariableModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.GLOBAL_VAR_READ,Authorization.GLOBAL_VAR_WRITE ] }\n            },\n            {\n                path: 'dataset',\n                loadChildren: () => \"import('./modules/dataset/dataset.module').then(m => m.DatasetModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.DATASET_READ,Authorization.DATASET_WRITE ] }\n            },\n            {\n                path: 'documentation',\n                loadChildren: () => \"import('./organisms/documentation/documentation.module').then(m => m.DocumentationModule)\"\n            },\n            {\n                path: 'configurationAgent',\n                loadChildren: () => \"import('./modules/agent-network/agent-network.module').then(m => m.AgentNetworkModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ADMIN_ACCESS ] }\n            },\n            {\n                path: 'plugins',\n                loadChildren: () => \"import('./modules/plugins/plugin-configuration.module').then(m => m.PluginConfigurationModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ADMIN_ACCESS ] }\n            },\n            {\n                path: 'databaseAdmin',\n                loadChildren: () => \"import('./modules/database-admin/database-admin.module').then(m => m.DatabaseAdminModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ADMIN_ACCESS ] }\n            },\n            {\n                path: 'environmentAdmin',\n                loadChildren: () => \"import('./organisms/environment-admin/environment-admin.module').then(m => m.EnvironmentAdminModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ENVIRONMENT_ACCESS,Authorization.ADMIN_ACCESS ] }\n            },\n            {\n                path: 'backups',\n                loadChildren: () => \"import('./modules/backups/backups.module').then(m => m.BackupsModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ADMIN_ACCESS ] }\n            },\n            {\n                path: 'roles',\n                loadChildren: () => \"import('./modules/roles/roles.module').then(m => m.RolesModule)\",\n                canActivate: [AuthGuard],\n                data: { 'authorizations': [ Authorization.ADMIN_ACCESS ] }\n            },\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(appRoutes, { useHash: true, enableTracing: false, relativeLinkResolution: 'legacy' })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AtomsModule",
            "id": "module-AtomsModule-44bb0eebbd0f340f25c6a756fccd0627e3ddb317d555cf19349124fbc95215e07c51553a03258d10646afb8aafad29835a1c0fc7c93d75059a00ac7d70cce9e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/atoms/atoms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { ButtonComponent } from './buttons/button.component';\nimport { LinkComponent } from './buttons/link.component';\nimport { InputComponent } from './forms/input/input.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        ButtonComponent,\n        LinkComponent,\n        InputComponent\n    ],\n    declarations: [\n        ButtonComponent,\n        LinkComponent,\n        InputComponent\n    ]\n})\nexport class AtomsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BackupsModule",
            "id": "module-BackupsModule-e2c7c014f6736be32808be8c13a800f73e847d306b1de9355e4e8ff96100bcd1c18b88ddcd82999da7f0b2ee071073176276c52e14fd65ed413c1ba402a4a057",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/backups/backups.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { BackupsAdminComponent } from './components/backups-admin.component';\nimport { BackupsAdminRoute } from '@modules/backups/backups.routes';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(BackupsAdminRoute),\n        FormsModule,\n        ReactiveFormsModule,\n        TranslateModule,\n        MoleculesModule,\n        SharedModule\n    ],\n    declarations: [BackupsAdminComponent],\n})\nexport class BackupsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BackupsAdminComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CampaignModule",
            "id": "module-CampaignModule-ac03240312444eb56d80310ca31ae0f61ad147dbc0964e335e4586a82e9a34f69c35d7260c258c2f7d9ef9d82629e50b0831a079fc4bbc8a3022ce94c468d4fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/campaign/campaign.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AngularMultiSelectModule } from 'angular2-multiselect-dropdown';\nimport { DragulaModule } from 'ng2-dragula';\nimport { NgChartsModule } from 'ng2-charts';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { CampaignRoute } from './campaign.routes';\nimport { CampaignListComponent } from './components/campaign-list/campaign-list.component';\nimport { CampaignExecutionComponent } from './components/execution/execution-campaign.component';\nimport { CampaignEditionComponent } from './components/create-campaign/campaign-edition.component';\nimport { CampaignSchedulingComponent } from './components/campaign-scheduling/campaign-scheduling.component';\nimport { MoleculesModule } from '../../molecules/molecules.module';\n\nconst ROUTES = [\n    ...CampaignRoute\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        FormsModule,\n        ReactiveFormsModule,\n        SharedModule,\n        NgbModule,\n        MomentModule,\n        TranslateModule,\n        DragulaModule,\n        AngularMultiSelectModule,\n        NgChartsModule,\n        MoleculesModule\n    ],\n    declarations: [\n        CampaignListComponent,\n        CampaignEditionComponent,\n        CampaignExecutionComponent,\n        CampaignSchedulingComponent\n    ]\n})\nexport class CampaignModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CampaignEditionComponent"
                        },
                        {
                            "name": "CampaignExecutionComponent"
                        },
                        {
                            "name": "CampaignListComponent"
                        },
                        {
                            "name": "CampaignSchedulingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChutneyAppModule",
            "id": "module-ChutneyAppModule-1ec884d03f5f6b1ea87a7d8b7f358e94007576c8f72f2ac747461988223e2e2564753c69950ed18b28f3ced05bd7bdf4d6b8123e7ce9635353d633a9796956d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// Core\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n// External libs\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MissingTranslationHandler, TranslateLoader, TranslateModule } from '@ngx-translate/core';\n\nimport { ToastrModule } from 'ngx-toastr';\nimport { DragulaModule } from 'ng2-dragula';\n// Internal common\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { DefaultMissingTranslationHandler, HttpLoaderFactory } from './app.translate.factory';\nimport { SharedModule } from '@shared/shared.module';\nimport { CoreModule } from '@core/core.module';\nimport { ModalModule, BsModalService  } from 'ngx-bootstrap/modal';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    // Core\n    BrowserModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    AppRoutingModule,\n    CoreModule,\n    // External libs\n    FormsModule,\n    HttpClientModule,\n    DragulaModule.forRoot(),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      },\n      missingTranslationHandler: { provide: MissingTranslationHandler, useClass: DefaultMissingTranslationHandler }\n    }),\n    ToastrModule.forRoot({\n      timeOut: 10000,\n      positionClass: 'toast-top-full-width',\n      preventDuplicates: true,\n    }),\n    ModalModule.forRoot(),\n    NgbModule,\n    // Internal common\n    SharedModule,\n  ],\n  providers: [BsModalService],\n  bootstrap: [AppComponent]\n})\nexport class ChutneyAppModule { }\n\n\n\n\n\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentModule",
            "id": "module-ComponentModule-b5a4bb9f81d5495a8923f58f1dc828d6f30317888a80ceecfceb60be5536cb45e96f1babb90a19b767bcfb8fab4b41c8febf320a89be00ff5ff01dbd596398b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/component/component.module.ts",
            "methods": [],
            "sourceCode": "// Core\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// External libs\nimport { MomentModule } from 'ngx-moment';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { TranslateModule } from '@ngx-translate/core';\n// Internal common\nimport { SharedModule } from '@shared/shared.module';\nimport { MoleculesModule } from 'src/app/molecules/molecules.module';\n\nimport { componentRoute } from './component.routes';\nimport { CreateComponent } from './components/create-component/create-component.component';\nimport { DragulaModule } from 'ng2-dragula';\nimport { ActionEditComponent } from './components/action/action-edit.component';\nimport { StrategyFormComponent } from '@modules/component/components/sub/strategy-form/strategy-form.component';\n\nimport { ParametersComponent } from './components/sub/parameters/parameters.component';\n\nimport { ExecutionPanelComponent } from './components/sub/execution-panel/execution-panel.component';\nimport { ChildPanelComponent } from './components/sub/child-panel/child-panel.component';\nimport { ToolbarComponent } from './components/sub/toolbar/toolbar.component';\nimport { StrategyParameterFormComponent } from '@modules/component/components/sub/strategy-form/parameter-form/strategy-parameter-form.component';\n\nconst ROUTES = [\n    ...componentRoute\n];\n\n@NgModule({\n    imports: [\n        // Core\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        FormsModule,\n        ReactiveFormsModule,\n\n        // External libs\n        MomentModule,\n        NgbModule,\n        TranslateModule,\n        DragulaModule,\n        // Internal common\n        SharedModule,\n        MoleculesModule\n    ],\n    declarations: [\n        CreateComponent,\n        ActionEditComponent,\n        StrategyFormComponent,\n        StrategyParameterFormComponent,\n        ParametersComponent,\n        ToolbarComponent,\n        ExecutionPanelComponent,\n        ChildPanelComponent\n    ],\n})\nexport class ComponentModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionEditComponent"
                        },
                        {
                            "name": "ChildPanelComponent"
                        },
                        {
                            "name": "CreateComponent"
                        },
                        {
                            "name": "ExecutionPanelComponent"
                        },
                        {
                            "name": "ParametersComponent"
                        },
                        {
                            "name": "StrategyFormComponent"
                        },
                        {
                            "name": "StrategyParameterFormComponent"
                        },
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-1e972683649d3ee91feaab9764ef7bf622da231971b20e5770942d475046df8aca93cc1d342550209b129c613b74f54a864dfdf5df32e757e4b4b91329ad88f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoginComponent } from './components/login/login.component';\nimport { ParentComponent } from './components/parent/parent.component';\nimport { CommonModule } from '@angular/common';\nimport { OrganismsModule } from '../organisms/organisms.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n    declarations: [\n        LoginComponent,\n        ParentComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        OrganismsModule,\n        RouterModule,\n        SharedModule,\n        TranslateModule\n    ],\n\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ParentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OrganismsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatabaseAdminModule",
            "id": "module-DatabaseAdminModule-21aaf907956a472f5489b65ed0da7c016bc8e5ca51e59af7d2de443a812255010f7daef90eb2ef18e28026c79462f02368d3d1579f028e9c4d73bc4b8788e421",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/database-admin/database-admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DatabaseAdminRoute } from './database-admin.routes';\n\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { DatabaseAdminComponent } from './components/database-admin.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(DatabaseAdminRoute),\n    FormsModule,\n    TranslateModule,\n    MoleculesModule\n  ],\n  declarations: [DatabaseAdminComponent],\n})\nexport class DatabaseAdminModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatabaseAdminComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatasetModule",
            "id": "module-DatasetModule-9a87ce1bb9dcc28535d27c79e03ec2206b96a8f85c4f1fb4e210cc1f07a5b7d071c1a9432e92efdfbc2f0763268c633a84a125a047fa9b61145dc75468e24ff4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/dataset/dataset.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { SharedModule } from '@shared/shared.module';\n\nimport { DatasetListComponent } from './components/dataset-list/dataset-list.component';\nimport { DatasetRoute } from './dataset.routes';\nimport { MoleculesModule } from 'src/app/molecules/molecules.module';\nimport { AngularMultiSelectModule } from 'angular2-multiselect-dropdown';\nimport { DatasetEditionComponent } from './components/dataset-edition/dataset-edition.component';\nimport { AtomsModule } from '../../atoms/atoms.module';\nimport { FormsKeyValueComponent } from '@modules/dataset/components/dataset-edition/forms-key-value/forms-key-value.component';\nimport { FormsDataGridComponent } from '@modules/dataset/components/dataset-edition/forms-data-grid/forms-data-grid.component';\n\n\nconst ROUTES = [\n    ...DatasetRoute\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        FormsModule,\n        ReactiveFormsModule,\n        SharedModule,\n        NgbModule,\n        MomentModule,\n        TranslateModule,\n        MoleculesModule,\n        AngularMultiSelectModule,\n        AtomsModule\n    ],\n    declarations: [\n        DatasetListComponent,\n        DatasetEditionComponent,\n        FormsKeyValueComponent,\n        FormsDataGridComponent\n    ]\n})\nexport class DatasetModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatasetEditionComponent"
                        },
                        {
                            "name": "DatasetListComponent"
                        },
                        {
                            "name": "FormsDataGridComponent"
                        },
                        {
                            "name": "FormsKeyValueComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AtomsModule"
                        },
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocumentationModule",
            "id": "module-DocumentationModule-6300635ee5e00292076b5fa541915375dfdaf5c28b493da115defcb9f1a1d02528bbf9c2adbc1c88c2c1603b0e34beb397da394bc96e2f580fed1c9d29e4f767",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/organisms/documentation/documentation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { DocumentationRoute } from './documentation.routes';\n\nimport { AtomsModule } from '../../atoms/atoms.module';\nimport { DocumentationComponent } from './documentation.component';\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(DocumentationRoute),\n    TranslateModule,\n    AtomsModule,\n    MoleculesModule,\n    SharedModule\n  ],\n  declarations: [DocumentationComponent]\n})\nexport class DocumentationModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocumentationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AtomsModule"
                        },
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EnvironmentAdminModule",
            "id": "module-EnvironmentAdminModule-42c0d56e8668d8449ef7a25b6176d1af637ffca8820ed9fcbd5b58cf833579a8fd9069037b36028265c47cb1add71e1e9089752209603f48bd9d1187ae32e2a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/organisms/environment-admin/environment-admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { AtomsModule } from '../../atoms/atoms.module';\nimport { MoleculesModule } from '../../molecules/molecules.module';\n\nimport { environmentAdminRoute } from './environment-admin.routes';\nimport { EnvironmentAdminComponent } from './environment-admin.component';\nimport { AddTargetDialogComponent } from './add-target-dialog/add-target-dialog.component';\nimport {FileSaverModule} from 'ngx-filesaver';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(environmentAdminRoute),\n        FormsModule,\n        ReactiveFormsModule,\n        SharedModule,\n        AtomsModule,\n        MoleculesModule,\n        TranslateModule,\n        FileSaverModule,\n    ],\n    declarations: [\n        EnvironmentAdminComponent,\n        AddTargetDialogComponent\n    ],\n})\nexport class EnvironmentAdminModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddTargetDialogComponent"
                        },
                        {
                            "name": "EnvironmentAdminComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AtomsModule"
                        },
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GlobalVariableModule",
            "id": "module-GlobalVariableModule-ef7fbc6b70df86a652bed7d4e4d7df3b91f268a779f5deff4cd3fb5da0b1ddd6e123dc3b0772852ad373ae0bf648cdba55db2de11854560147977b011b81c728",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/global-variable/global-variable.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MomentModule } from 'ngx-moment';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { SharedModule } from '@shared/shared.module';\n\nimport { GlobalVariableEditionComponent } from './components/global-variable-edition/global-variable-edition.component';\nimport { GlobalVariableRoute } from './global-variable.routes';\nimport { MoleculesModule } from '../../molecules/molecules.module';\n\n\nconst ROUTES = [\n    ...GlobalVariableRoute\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        FormsModule,\n        ReactiveFormsModule,\n        SharedModule,\n        NgbModule,\n        MomentModule,\n        TranslateModule,\n        MoleculesModule\n    ],\n    declarations: [\n        GlobalVariableEditionComponent\n    ],\n    entryComponents: [],\n})\nexport class GlobalVariableModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GlobalVariableEditionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomePageModule",
            "id": "module-HomePageModule-8080ae29c93da1e084e9a16ec2edf5807e361e247583e828f70da1815e3c30137902fabb3f0e7412d958fa7d87778f91cf1ed987c6055d4539755ad124ce2431",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/home-page/home-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { homePageRoute } from './home-page.routes';\nimport { SharedModule } from '@shared/shared.module';\nimport { NgbModalModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CommonModule } from '@angular/common';\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { HomePageCreateDialogComponent } from './components/home-page-create/home-page-create-dialog.component';\nimport { HomePageComponent } from './components/home-page/home-page.component';\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(homePageRoute),\n        CommonModule,\n        FormsModule,\n        SharedModule,\n        TranslateModule,\n        NgbModalModule,\n        MoleculesModule\n    ],\n    exports: [\n        RouterModule\n    ],\n    declarations: [\n        HomePageComponent,\n        HomePageCreateDialogComponent\n    ]\n})\nexport class HomePageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomePageComponent"
                        },
                        {
                            "name": "HomePageCreateDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MoleculesModule",
            "id": "module-MoleculesModule-61800218ae69a54962f2cc381e794cb3e04e4cc350caadf2fff80c54f23e193120012cd71f62483769242305fbcceeb3f960de9414800bef6790bf6dd9998bd8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/molecules/molecules.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MomentModule } from 'ngx-moment';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { NgClickOutsideModule } from 'ng-click-outside2';\n\nimport { AtomsModule } from '../atoms/atoms.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { DeleteConfirmDialogComponent } from './dialog/delete-confirm-dialog/delete-confirm-dialog.component';\nimport { CollapsiblePanelComponent } from './panel/collapsible-panel/collapsible-panel.component';\nimport { ErrorPanelComponent } from './panel/error-panel/error-panel.component';\nimport { PropertyTablePanelComponent } from './panel/property-table-panel/property-table-panel.component';\nimport { TablePanelComponent } from './panel/table-panel/table-panel.component';\nimport { EditableLabelComponent } from './forms/editable-label/editable-label.component';\nimport { InputLineComponent } from './forms/input-line/input-line.component';\nimport { SearchFieldComponent } from './forms/search-field/search-field.component';\nimport { MenuItemComponent } from './navigation/primary/menu-item/menu-item.component';\nimport { ValidationService } from './validation/validation.service';\nimport { EditableTextAreaComponent } from './forms/editable-text-area/editable-text-area.component';\nimport { EditableBadgeComponent } from './forms/editable-badge/editable-badge.component';\nimport { AsciiDoctorComponent } from './asciidoctor/asciidoctor.component';\nimport { ToastInfoComponent } from './toast/toast-info/toast-info';\nimport { ImportFileComponent } from './forms/import-file/import-file.component';\nimport { ImportButtonComponent } from './forms/import-button/import-button.component';\n\n\n@NgModule({\n    imports: [\n        AtomsModule,\n        NgClickOutsideModule,\n        CommonModule,\n        FormsModule,\n        MomentModule,\n        NgxPaginationModule,\n        RouterModule,\n        SharedModule,\n        TranslateModule,\n    ],\n    exports: [\n        AsciiDoctorComponent,\n        CollapsiblePanelComponent,\n        DeleteConfirmDialogComponent,\n        EditableBadgeComponent,\n        EditableLabelComponent,\n        EditableTextAreaComponent,\n        ErrorPanelComponent,\n        ImportButtonComponent,\n        ImportFileComponent,\n        InputLineComponent,\n        MenuItemComponent,\n        PropertyTablePanelComponent,\n        SearchFieldComponent,\n        TablePanelComponent,\n        ToastInfoComponent,\n    ],\n    declarations: [\n        AsciiDoctorComponent,\n        CollapsiblePanelComponent,\n        DeleteConfirmDialogComponent,\n        EditableBadgeComponent,\n        EditableLabelComponent,\n        EditableTextAreaComponent,\n        ErrorPanelComponent,\n        ImportButtonComponent,\n        ImportFileComponent,\n        InputLineComponent,\n        MenuItemComponent,\n        PropertyTablePanelComponent,\n        SearchFieldComponent,\n        TablePanelComponent,\n        ToastInfoComponent,\n    ],\n    providers: [\n        ValidationService,\n    ]\n})\nexport class MoleculesModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ValidationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AsciiDoctorComponent"
                        },
                        {
                            "name": "CollapsiblePanelComponent"
                        },
                        {
                            "name": "DeleteConfirmDialogComponent"
                        },
                        {
                            "name": "EditableBadgeComponent"
                        },
                        {
                            "name": "EditableLabelComponent"
                        },
                        {
                            "name": "EditableTextAreaComponent"
                        },
                        {
                            "name": "ErrorPanelComponent"
                        },
                        {
                            "name": "ImportButtonComponent"
                        },
                        {
                            "name": "ImportFileComponent"
                        },
                        {
                            "name": "InputLineComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PropertyTablePanelComponent"
                        },
                        {
                            "name": "SearchFieldComponent"
                        },
                        {
                            "name": "TablePanelComponent"
                        },
                        {
                            "name": "ToastInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AtomsModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AsciiDoctorComponent"
                        },
                        {
                            "name": "CollapsiblePanelComponent"
                        },
                        {
                            "name": "DeleteConfirmDialogComponent"
                        },
                        {
                            "name": "EditableBadgeComponent"
                        },
                        {
                            "name": "EditableLabelComponent"
                        },
                        {
                            "name": "EditableTextAreaComponent"
                        },
                        {
                            "name": "ErrorPanelComponent"
                        },
                        {
                            "name": "ImportButtonComponent"
                        },
                        {
                            "name": "ImportFileComponent"
                        },
                        {
                            "name": "InputLineComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PropertyTablePanelComponent"
                        },
                        {
                            "name": "SearchFieldComponent"
                        },
                        {
                            "name": "TablePanelComponent"
                        },
                        {
                            "name": "ToastInfoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrganismsModule",
            "id": "module-OrganismsModule-c172d2b0f933d2e4c27626d2e22bd3503a435bb8810fbf2d3ff65e069f16d63c81bc2b72f9d63bf26c932cd58d8571565d9ac3edb3fcfa838e7bc976efdd5317",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/organisms/organisms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MainMenuComponent } from './main-menu/main-menu.component';\nimport { MoleculesModule } from '../molecules/molecules.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { ProfileMenuComponent } from './profile-menu/profile-menu.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        MoleculesModule,\n        TranslateModule,\n        SharedModule\n    ],\n    exports: [\n        MainMenuComponent,\n        ProfileMenuComponent,\n    ],\n    declarations: [\n        MainMenuComponent,\n        ProfileMenuComponent,\n    ]\n})\nexport class OrganismsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "ProfileMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MainMenuComponent"
                        },
                        {
                            "name": "ProfileMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PluginConfigurationModule",
            "id": "module-PluginConfigurationModule-ef168ab9dfb993f6d9f9577375e36e2aeeb3230e59a2119b921b78112c9c867b8f22caf7bc0278779e803af17b4f41a3719f93b75decf0c31986488265561166",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/plugins/plugin-configuration.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { PluginConfigurationRoute } from './plugin-configuration.routes';\n\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { PluginConfigurationComponent } from './components/plugin-configuration.component';\nimport { GitBackupComponent } from '@modules/plugins/components/git-backup/git-backup.component';\nimport { JiraComponent } from '@modules/plugins/components/jira/jira.component';\nimport { LinkifierComponent } from '@modules/plugins/components/linkifier/linkifier.component';\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MoleculesModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(PluginConfigurationRoute),\n        SharedModule,\n        TranslateModule,\n    ],\n    declarations: [\n        GitBackupComponent,\n        JiraComponent,\n        LinkifierComponent,\n        PluginConfigurationComponent\n    ],\n})\nexport class PluginConfigurationModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GitBackupComponent"
                        },
                        {
                            "name": "JiraComponent"
                        },
                        {
                            "name": "LinkifierComponent"
                        },
                        {
                            "name": "PluginConfigurationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RolesModule",
            "id": "module-RolesModule-6b566b340ba3d33ee92780972183efd8515a508bd712d71f7ccde708ffcc3e79c8ba675c381a477b74e49efdc20531ae05671de04cdaa8c38e65b506f3b644ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/roles/roles.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { RolesRoute } from './roles.routes';\n\nimport { SharedModule } from '@shared/shared.module';\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { RolesComponent } from './components/roles.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(RolesRoute),\n    FormsModule,\n    TranslateModule,\n    MoleculesModule,\n    SharedModule\n  ],\n  declarations: [RolesComponent],\n})\nexport class RolesModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RolesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScenarioModule",
            "id": "module-ScenarioModule-6cc686239b97fc03c1eecf0be546a7cbf27cbfd2133a598cdef445906e6bf4735639b1cc3f3f9205c37a3afb13c90d035a2767963082552ad64e126cf9b5fa9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/scenarios/scenario.module.ts",
            "methods": [],
            "sourceCode": "// Core\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// External libs\nimport { MomentModule } from 'ngx-moment';\nimport { NgbDropdownModule, NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FileSaverModule } from 'ngx-filesaver';\nimport { AngularMultiSelectModule } from 'angular2-multiselect-dropdown';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n    PERFECT_SCROLLBAR_CONFIG,\n    PerfectScrollbarConfigInterface,\n    PerfectScrollbarModule\n} from 'ngx-perfect-scrollbar';\n// Internal common\nimport { SharedModule } from '@shared/shared.module';\n// Internal\nimport { scenarioRoute } from './scenario.routes';\nimport { ScenariosComponent } from './components/search-list/scenarios.component';\nimport { StepReportComponent } from './components/execution/step-report/step-report.component';\nimport { StepComponent } from './components/execution/step/step.component';\nimport { HistoryComponent } from './components/execution/history/history.component';\nimport { ScenarioExecutionComponent } from './components/execution/execution.component';\nimport { MoleculesModule } from '../../molecules/molecules.module';\nimport { RawEditionComponent } from './components/edition/raw/raw-edition.component';\nimport { ComponentEditionComponent } from './components/edition/component-edition/component-edition.component';\nimport { DragulaModule } from 'ng2-dragula';\nimport { ExecuteComponent } from './components/execute/execute.component';\nimport { HeaderComponent } from './components/sub/header/header.component';\nimport { ScenarioCampaignsComponent } from '@modules/scenarios/components/sub/scenario-campaigns/scenario-campaigns.component';\nimport { ComponentReadComponent } from './components/execution/component-read/component-read.component';\nimport { GwtReadComponent } from './components/execution/gwt-read/gwt-read.component';\nimport { AuthoringInfoComponent } from './components/edition/authoring-info/authoring-info.component';\nimport { EditionInfoComponent } from './components/edition/edition-info/edition-info.component';\n\nconst ROUTES = [\n    ...scenarioRoute\n];\n\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\n    wheelPropagation: true\n};\n\n@NgModule({\n    imports: [\n        // Core\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        ReactiveFormsModule,\n        MomentModule,\n        FormsModule,\n        // External libs\n        NgbModule,\n        AngularMultiSelectModule,\n        TranslateModule,\n        PerfectScrollbarModule,\n        DragulaModule,\n        FileSaverModule,\n        // Internal common\n        SharedModule,\n        MoleculesModule,\n        NgbDropdownModule,\n    ],\n    declarations: [\n        ScenariosComponent,\n        ScenarioExecutionComponent,\n        StepReportComponent,\n        StepComponent,\n        ScenarioCampaignsComponent,\n        HistoryComponent,\n        RawEditionComponent,\n        ComponentEditionComponent,\n        ExecuteComponent,\n        HeaderComponent,\n        ComponentReadComponent,\n        GwtReadComponent,\n        AuthoringInfoComponent,\n        EditionInfoComponent\n    ],\n    providers: [\n        {\n            provide: PERFECT_SCROLLBAR_CONFIG,\n            useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG\n        },\n    ]\n})\nexport class ScenarioModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthoringInfoComponent"
                        },
                        {
                            "name": "ComponentEditionComponent"
                        },
                        {
                            "name": "ComponentReadComponent"
                        },
                        {
                            "name": "EditionInfoComponent"
                        },
                        {
                            "name": "ExecuteComponent"
                        },
                        {
                            "name": "GwtReadComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HistoryComponent"
                        },
                        {
                            "name": "RawEditionComponent"
                        },
                        {
                            "name": "ScenarioCampaignsComponent"
                        },
                        {
                            "name": "ScenarioExecutionComponent"
                        },
                        {
                            "name": "ScenariosComponent"
                        },
                        {
                            "name": "StepComponent"
                        },
                        {
                            "name": "StepReportComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MoleculesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-646a03bcf2b25707c2a494bdfe0e6064f694f4fc0abfbcb739204a5ec7cb484f672c165ed5b3fd53030c9e861e2e7c582023e89a85346563a47ce561b8c16742",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DatasetSelectionComponent } from '@shared/components/dataset-selection/dataset-selection.component';\nimport { InputFocusDirective } from '@shared/directives';\nimport { ThumbnailPipe } from '@shared/pipes/thumbnail.pipe';\nimport { MomentModule } from 'ngx-moment';\nimport { AlertService } from './alert.service';\nimport { ErrorInterceptor } from './error-interceptor.service';\nimport {\n    ComponentCardComponent,\n    EnvironmentComboComponent,\n    ExecutionBadgeComponent\n} from './components';\nimport { ImplementationHostDirective, HasAuthorizationDirective } from './directives';\nimport { EventManagerService } from './event-manager.service';\nimport {\n    ComponentSearchPipe,\n    DataSetSearchPipe,\n    DurationPipe,\n    LinkifyPipe,\n    ObjectAsEntryListPipe,\n    PrettyPrintPipe,\n    SafePipe,\n    ScenarioCampaignSearchPipe,\n    ScenarioSearchPipe,\n    SearchTextPipe,\n    SortByFieldPipe,\n    StringifyPipe,\n    TruncatePipe,\n    WithoutScenarioPipe\n} from '@shared/pipes';\nimport { StateService } from './state/state.service';\nimport { ChutneyEditorComponent } from '@shared/components/chutney-editor/chutney-editor.component';\nimport { HjsonParserService } from '@shared/hjson-parser/hjson-parser.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        MomentModule,\n        ReactiveFormsModule,\n        RouterModule,\n        TranslateModule,\n    ],\n    declarations: [\n        ComponentCardComponent,\n        ComponentSearchPipe,\n        DataSetSearchPipe,\n        DatasetSelectionComponent,\n        DurationPipe,\n        LinkifyPipe,\n        EnvironmentComboComponent,\n        ExecutionBadgeComponent,\n        ImplementationHostDirective,\n        InputFocusDirective,\n        ObjectAsEntryListPipe,\n        PrettyPrintPipe,\n        SafePipe,\n        ScenarioCampaignSearchPipe,\n        ScenarioSearchPipe,\n        SearchTextPipe,\n        SortByFieldPipe,\n        StringifyPipe,\n        ThumbnailPipe,\n        TruncatePipe,\n        WithoutScenarioPipe,\n        HasAuthorizationDirective,\n        ChutneyEditorComponent\n    ],\n    exports: [\n        ComponentCardComponent,\n        ComponentSearchPipe,\n        DataSetSearchPipe,\n        DatasetSelectionComponent,\n        DurationPipe,\n        LinkifyPipe,\n        EnvironmentComboComponent,\n        ExecutionBadgeComponent,\n        ImplementationHostDirective,\n        InputFocusDirective,\n        ObjectAsEntryListPipe,\n        PrettyPrintPipe,\n        SafePipe,\n        ScenarioCampaignSearchPipe,\n        ScenarioSearchPipe,\n        SearchTextPipe,\n        SortByFieldPipe,\n        StringifyPipe,\n        ThumbnailPipe,\n        TruncatePipe,\n        WithoutScenarioPipe,\n        HasAuthorizationDirective,\n        ChutneyEditorComponent,\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: ErrorInterceptor,\n            multi: true\n        },\n        AlertService,\n        EventManagerService,\n        StateService,\n        HjsonParserService\n    ]\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AlertService"
                        },
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "EventManagerService"
                        },
                        {
                            "name": "HjsonParserService"
                        },
                        {
                            "name": "StateService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChutneyEditorComponent"
                        },
                        {
                            "name": "ComponentCardComponent"
                        },
                        {
                            "name": "DataSetSearchPipe"
                        },
                        {
                            "name": "DatasetSelectionComponent"
                        },
                        {
                            "name": "DurationPipe"
                        },
                        {
                            "name": "EnvironmentComboComponent"
                        },
                        {
                            "name": "ExecutionBadgeComponent"
                        },
                        {
                            "name": "HasAuthorizationDirective"
                        },
                        {
                            "name": "ImplementationHostDirective"
                        },
                        {
                            "name": "InputFocusDirective"
                        },
                        {
                            "name": "LinkifyPipe"
                        },
                        {
                            "name": "ObjectAsEntryListPipe"
                        },
                        {
                            "name": "PrettyPrintPipe"
                        },
                        {
                            "name": "SafePipe"
                        },
                        {
                            "name": "ScenarioCampaignSearchPipe"
                        },
                        {
                            "name": "ScenarioSearchPipe"
                        },
                        {
                            "name": "SearchTextPipe"
                        },
                        {
                            "name": "SortByFieldPipe"
                        },
                        {
                            "name": "StringifyPipe"
                        },
                        {
                            "name": "ThumbnailPipe"
                        },
                        {
                            "name": "TruncatePipe"
                        },
                        {
                            "name": "WithoutScenarioPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChutneyEditorComponent"
                        },
                        {
                            "name": "ComponentCardComponent"
                        },
                        {
                            "name": "DataSetSearchPipe"
                        },
                        {
                            "name": "DatasetSelectionComponent"
                        },
                        {
                            "name": "DurationPipe"
                        },
                        {
                            "name": "EnvironmentComboComponent"
                        },
                        {
                            "name": "ExecutionBadgeComponent"
                        },
                        {
                            "name": "HasAuthorizationDirective"
                        },
                        {
                            "name": "ImplementationHostDirective"
                        },
                        {
                            "name": "InputFocusDirective"
                        },
                        {
                            "name": "LinkifyPipe"
                        },
                        {
                            "name": "ObjectAsEntryListPipe"
                        },
                        {
                            "name": "PrettyPrintPipe"
                        },
                        {
                            "name": "SafePipe"
                        },
                        {
                            "name": "ScenarioCampaignSearchPipe"
                        },
                        {
                            "name": "ScenarioSearchPipe"
                        },
                        {
                            "name": "SearchTextPipe"
                        },
                        {
                            "name": "SortByFieldPipe"
                        },
                        {
                            "name": "StringifyPipe"
                        },
                        {
                            "name": "ThumbnailPipe"
                        },
                        {
                            "name": "TruncatePipe"
                        },
                        {
                            "name": "WithoutScenarioPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslateTestingModule",
            "id": "module-TranslateTestingModule-41dc22fbb4e9697a2299fa43153bf204213806ee6dc6436f6f9c628d357519f25a9d5397e4891bef90cc82eefc95786a4405701916beba879a617ca2c3ef869f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/testing/translate-testing.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule, TranslateLoader, TranslatePipe, TranslateService } from '@ngx-translate/core';\nimport { NgModule, PipeTransform, Pipe, Injectable, EventEmitter } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nconst TRANSLATIONS_EN = require('src/assets/i18n/en.json');\n\nexport class FakeLoader implements TranslateLoader {\n    getTranslation(lang: string): Observable<any> {\n        return of(TRANSLATIONS_EN);\n    }\n}\n\n@Pipe({\n    name: 'translate'\n})\nexport class TranslatePipeMock implements PipeTransform {\n    public name = 'translate';\n\n    public transform(query: string, ...args: any[]): any {\n        return fromKey(query);\n    }\n}\n\n@Injectable()\nexport class TranslateServiceStub {\n    public get(key: string): Observable<string> {\n        return of(fromKey(key));\n    }\n    public onLangChange: EventEmitter<any> = new EventEmitter();\n    public onTranslationChange: EventEmitter<any> = new EventEmitter();\n    public onDefaultLangChange: EventEmitter<any> = new EventEmitter();\n}\n\nfunction fromKey(key: string): string {\n    let r = TRANSLATIONS_EN;\n    key.split('.').forEach((s) => { if (r) r = r[s]; });\n    if (r) { return r; } else { return key; }\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipeMock\n    ],\n    providers: [\n        { provide: TranslateService, useClass: TranslateServiceStub },\n        { provide: TranslatePipe, useClass: TranslatePipeMock },\n    ],\n    imports: [\n        TranslateModule.forRoot({\n            loader: { provide: TranslateLoader, useClass: FakeLoader },\n        })\n    ],\n    exports: [\n        TranslatePipeMock,\n        TranslateModule\n    ]\n})\nexport class TranslateTestingModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TranslatePipeMock"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TranslatePipeMock"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/scenarios/scenario.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\n    wheelPropagation: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  backend: ''\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  backend: ''\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/campaign/campaign.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ...CampaignRoute\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/component/component.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ...componentRoute\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/global-variable/global-variable.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ...GlobalVariableRoute\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/scenarios/scenario.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ...scenarioRoute\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dataset/dataset.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ...DatasetRoute\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "TRANSLATIONS_EN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/testing/translate-testing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('src/assets/i18n/en.json')"
            }
        ],
        "functions": [
            {
                "name": "addOptionalArrayParam",
                "file": "src/app/shared/tools/object-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "addOptionalParam",
                "file": "src/app/shared/tools/object-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "excludedValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "excludedValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "allStepsParamsFromFunctionStep",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "step",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<string>",
                "jsdoctags": [
                    {
                        "name": "step",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "areEquals",
                "file": "src/app/shared/equals.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "val1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "val2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "val1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "val2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cloneAsPossible",
                "file": "src/app/shared/clonable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "compare",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "contains",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "valueToSearch",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "valueToSearch",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "containsAll",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection1",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collection2",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "collection1",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "collection2",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "delay",
                "file": "src/app/shared/tools/async-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "disabledBoolean",
                "file": "src/app/shared/tools/bool-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "bool",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "bool",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "distinct",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2"
                    }
                ],
                "returnType": "Array<T>",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "durationValidator",
                "file": "src/app/shared/validators/duration.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "escapeHtml",
                "file": "src/app/shared/tools/string-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "escapeRegExp",
                "file": "src/app/shared/tools/regexp-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "str",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exampleParamsExistStepParams",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "exampleParamsSerialized",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stepParams",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "exampleParamsSerialized",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stepParams",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterOnTextContent",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "flatMap",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mappingFunction",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<U>",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mappingFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "focusOnElement",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "Element",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fromKey",
                "file": "src/app/testing/translate-testing.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getStepParamRegExp",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stepParamName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "no_suffix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "returnType": "RegExp",
                "jsdoctags": [
                    {
                        "name": "stepParamName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "no_suffix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "highlightStepParams",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stringToHighlight",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parameters",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "stringToHighlight",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parameters",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "highlightUnknownParams",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stringToHighlight",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "stringToHighlight",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.translate.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "instanceOfClonable",
                "file": "src/app/shared/clonable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Clonable<T>",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "instanceOfEquals",
                "file": "src/app/shared/equals.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Equals<T>",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "intersection",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "firstCollection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "secondCollection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2"
                    }
                ],
                "returnType": "Array<T>",
                "jsdoctags": [
                    {
                        "name": "firstCollection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "secondCollection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "equalityFunction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "(val1, val2) => val1 === val2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNotEmpty",
                "file": "src/app/shared/equals.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNullOrBlankString",
                "file": "src/app/shared/tools/string-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNullOrEmptyString",
                "file": "src/app/shared/tools/string-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "macthStepParam",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<string>",
                "jsdoctags": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapReferentialStepToFunctionalStep",
                "file": "src/app/core/model/scenario/functional-step.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "refStep",
                        "type": "ReferentialStep",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "refStep",
                        "type": "ReferentialStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "newInstance",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<T>",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "normalize",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "pairwise",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<Array<T>>",
                "jsdoctags": [
                    {
                        "name": "list",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "randomIntFromInterval",
                "file": "src/app/shared/tools/number-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortByAndOrder",
                "file": "src/app/shared/tools/array-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyExtractor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reverseOrder",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<T>",
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "keyExtractor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reverseOrder",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sqlResultFromObject",
                "file": "src/app/core/model/sql-result.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fromJsonObject",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fromJsonObject",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stepFromObject",
                "file": "src/app/core/model/referential-step.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fromJsonObject",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fromJsonObject",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stepsFromObjects",
                "file": "src/app/core/model/referential-step.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fromJsonObjects",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fromJsonObjects",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stepsParamsFromFunctionStep",
                "file": "src/app/shared/tools/function-step-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "step",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<string>",
                "jsdoctags": [
                    {
                        "name": "step",
                        "type": "FunctionalStep",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Authorization",
                "childs": [
                    {
                        "name": "SCENARIO_READ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCENARIO_READ"
                    },
                    {
                        "name": "SCENARIO_WRITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCENARIO_WRITE"
                    },
                    {
                        "name": "SCENARIO_EXECUTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCENARIO_EXECUTE"
                    },
                    {
                        "name": "CAMPAIGN_READ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CAMPAIGN_READ"
                    },
                    {
                        "name": "CAMPAIGN_WRITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CAMPAIGN_WRITE"
                    },
                    {
                        "name": "CAMPAIGN_EXECUTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CAMPAIGN_EXECUTE"
                    },
                    {
                        "name": "ENVIRONMENT_ACCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ENVIRONMENT_ACCESS"
                    },
                    {
                        "name": "GLOBAL_VAR_READ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GLOBAL_VAR_READ"
                    },
                    {
                        "name": "GLOBAL_VAR_WRITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GLOBAL_VAR_WRITE"
                    },
                    {
                        "name": "DATASET_READ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DATASET_READ"
                    },
                    {
                        "name": "DATASET_WRITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DATASET_WRITE"
                    },
                    {
                        "name": "COMPONENT_READ",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "COMPONENT_READ"
                    },
                    {
                        "name": "COMPONENT_WRITE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "COMPONENT_WRITE"
                    },
                    {
                        "name": "ADMIN_ACCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN_ACCESS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/model/user.model.ts"
            },
            {
                "name": "FREQUENCY",
                "childs": [
                    {
                        "name": "HOURLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Hourly"
                    },
                    {
                        "name": "DAILY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Daily"
                    },
                    {
                        "name": "WEEKLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Weekly"
                    },
                    {
                        "name": "MONTHLY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Monthly"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/model/campaign/FREQUENCY.ts"
            },
            {
                "name": "ScenarioType",
                "childs": [
                    {
                        "name": "FORM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FORM"
                    },
                    {
                        "name": "COMPOSED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "COMPOSED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/model/scenario/scenario-index.model.ts"
            },
            {
                "name": "XrayStatus",
                "childs": [
                    {
                        "name": "PASS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PASS"
                    },
                    {
                        "name": "FAIL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FAIL"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/model/jira-scenario.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/modules/scenarios/scenario.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/scenarios/scenario.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\n    wheelPropagation: true\n}"
                },
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/scenarios/scenario.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ...scenarioRoute\n]"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  backend: ''\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  backend: ''\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/modules/campaign/campaign.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/campaign/campaign.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ...CampaignRoute\n]"
                }
            ],
            "src/app/modules/component/component.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/component/component.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ...componentRoute\n]"
                }
            ],
            "src/app/modules/global-variable/global-variable.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/global-variable/global-variable.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ...GlobalVariableRoute\n]"
                }
            ],
            "src/app/modules/dataset/dataset.module.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dataset/dataset.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ...DatasetRoute\n]"
                }
            ],
            "src/app/testing/translate-testing.module.ts": [
                {
                    "name": "TRANSLATIONS_EN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/testing/translate-testing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('src/assets/i18n/en.json')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/tools/object-utils.ts": [
                {
                    "name": "addOptionalArrayParam",
                    "file": "src/app/shared/tools/object-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOptionalParam",
                    "file": "src/app/shared/tools/object-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "excludedValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excludedValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/function-step-utils.ts": [
                {
                    "name": "allStepsParamsFromFunctionStep",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "step",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<string>",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exampleParamsExistStepParams",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "exampleParamsSerialized",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stepParams",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "exampleParamsSerialized",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stepParams",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusOnElement",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elem",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elem",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStepParamRegExp",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stepParamName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "no_suffix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "returnType": "RegExp",
                    "jsdoctags": [
                        {
                            "name": "stepParamName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "no_suffix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "highlightStepParams",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stringToHighlight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "stringToHighlight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parameters",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "highlightUnknownParams",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stringToHighlight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "stringToHighlight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "macthStepParam",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<string>",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stepsParamsFromFunctionStep",
                    "file": "src/app/shared/tools/function-step-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "step",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<string>",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "FunctionalStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/equals.ts": [
                {
                    "name": "areEquals",
                    "file": "src/app/shared/equals.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "val1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "val1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "instanceOfEquals",
                    "file": "src/app/shared/equals.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Equals<T>",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNotEmpty",
                    "file": "src/app/shared/equals.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/clonable.ts": [
                {
                    "name": "cloneAsPossible",
                    "file": "src/app/shared/clonable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "instanceOfClonable",
                    "file": "src/app/shared/clonable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Clonable<T>",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/array-utils.ts": [
                {
                    "name": "compare",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "contains",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "valueToSearch",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "valueToSearch",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "containsAll",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection1",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collection2",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "collection1",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collection2",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "distinct",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2"
                        }
                    ],
                    "returnType": "Array<T>",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOnTextContent",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "flatMap",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mappingFunction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<U>",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mappingFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intersection",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "firstCollection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "secondCollection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2"
                        }
                    ],
                    "returnType": "Array<T>",
                    "jsdoctags": [
                        {
                            "name": "firstCollection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondCollection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "equalityFunction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "(val1, val2) => val1 === val2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newInstance",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<T>",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "normalize",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pairwise",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<Array<T>>",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortByAndOrder",
                    "file": "src/app/shared/tools/array-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keyExtractor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reverseOrder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<T>",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyExtractor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverseOrder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/async-utils.ts": [
                {
                    "name": "delay",
                    "file": "src/app/shared/tools/async-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/bool-utils.ts": [
                {
                    "name": "disabledBoolean",
                    "file": "src/app/shared/tools/bool-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "bool",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "bool",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/validators/duration.validator.ts": [
                {
                    "name": "durationValidator",
                    "file": "src/app/shared/validators/duration.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                }
            ],
            "src/app/shared/tools/string-utils.ts": [
                {
                    "name": "escapeHtml",
                    "file": "src/app/shared/tools/string-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNullOrBlankString",
                    "file": "src/app/shared/tools/string-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNullOrEmptyString",
                    "file": "src/app/shared/tools/string-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/regexp-utils.ts": [
                {
                    "name": "escapeRegExp",
                    "file": "src/app/shared/tools/regexp-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/testing/translate-testing.module.ts": [
                {
                    "name": "fromKey",
                    "file": "src/app/testing/translate-testing.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.translate.factory.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.translate.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/model/scenario/functional-step.model.ts": [
                {
                    "name": "mapReferentialStepToFunctionalStep",
                    "file": "src/app/core/model/scenario/functional-step.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "refStep",
                            "type": "ReferentialStep",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "refStep",
                            "type": "ReferentialStep",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/tools/number-utils.ts": [
                {
                    "name": "randomIntFromInterval",
                    "file": "src/app/shared/tools/number-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/model/sql-result.model.ts": [
                {
                    "name": "sqlResultFromObject",
                    "file": "src/app/core/model/sql-result.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fromJsonObject",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromJsonObject",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/model/referential-step.model.ts": [
                {
                    "name": "stepFromObject",
                    "file": "src/app/core/model/referential-step.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fromJsonObject",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromJsonObject",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stepsFromObjects",
                    "file": "src/app/core/model/referential-step.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fromJsonObjects",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromJsonObjects",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/model/user.model.ts": [
                {
                    "name": "Authorization",
                    "childs": [
                        {
                            "name": "SCENARIO_READ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCENARIO_READ"
                        },
                        {
                            "name": "SCENARIO_WRITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCENARIO_WRITE"
                        },
                        {
                            "name": "SCENARIO_EXECUTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCENARIO_EXECUTE"
                        },
                        {
                            "name": "CAMPAIGN_READ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CAMPAIGN_READ"
                        },
                        {
                            "name": "CAMPAIGN_WRITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CAMPAIGN_WRITE"
                        },
                        {
                            "name": "CAMPAIGN_EXECUTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CAMPAIGN_EXECUTE"
                        },
                        {
                            "name": "ENVIRONMENT_ACCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ENVIRONMENT_ACCESS"
                        },
                        {
                            "name": "GLOBAL_VAR_READ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GLOBAL_VAR_READ"
                        },
                        {
                            "name": "GLOBAL_VAR_WRITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GLOBAL_VAR_WRITE"
                        },
                        {
                            "name": "DATASET_READ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DATASET_READ"
                        },
                        {
                            "name": "DATASET_WRITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DATASET_WRITE"
                        },
                        {
                            "name": "COMPONENT_READ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "COMPONENT_READ"
                        },
                        {
                            "name": "COMPONENT_WRITE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "COMPONENT_WRITE"
                        },
                        {
                            "name": "ADMIN_ACCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN_ACCESS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/model/user.model.ts"
                }
            ],
            "src/app/core/model/campaign/FREQUENCY.ts": [
                {
                    "name": "FREQUENCY",
                    "childs": [
                        {
                            "name": "HOURLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Hourly"
                        },
                        {
                            "name": "DAILY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Daily"
                        },
                        {
                            "name": "WEEKLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Weekly"
                        },
                        {
                            "name": "MONTHLY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Monthly"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/model/campaign/FREQUENCY.ts"
                }
            ],
            "src/app/core/model/scenario/scenario-index.model.ts": [
                {
                    "name": "ScenarioType",
                    "childs": [
                        {
                            "name": "FORM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FORM"
                        },
                        {
                            "name": "COMPOSED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "COMPOSED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/model/scenario/scenario-index.model.ts"
                }
            ],
            "src/app/core/model/jira-scenario.model.ts": [
                {
                    "name": "XrayStatus",
                    "childs": [
                        {
                            "name": "PASS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PASS"
                        },
                        {
                            "name": "FAIL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FAIL"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/model/jira-scenario.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "ChutneyAppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.translate.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultMissingTranslationHandler",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.translate.factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/atoms/buttons/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/atoms/buttons/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/atoms/forms/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/parent/parent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/can-deactivate.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanDeactivateGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/page.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CanDeactivatePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/agent-graphe.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Agent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/agent-graphe.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AgentGraphe",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/agent-info.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AgentInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/agent-network.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AgentNetwork",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/network-configuration.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NetworkConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/agent-network/server.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TargetId",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/backups.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Backup",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/campaign/campaign-execution-report.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CampaignExecutionReport",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/campaign/campaign-scheduling.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CampaignScheduling",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/campaign/campaign.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Campaign",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/campaign/scenario-execution-report-outline.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScenarioExecutionReportOutline",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/chutney-state.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChutneyState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ComponentTask",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Implementation",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "KeyValue",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MapInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/component-task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SimpleInput",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/dataset.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Dataset",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/entry.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Entry",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/environment.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnvironmentMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/environment.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Target",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/git-remote-config.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GitRemoteConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/git-repository.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GitRepository",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/home-page.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HomePage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/jira-plugin-configuration.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JiraPluginConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/jira-scenario.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JiraScenario",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/linkifier.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Linkifier",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/referential-step.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReferentialStep",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/referential-step.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stepFromObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/referential-step.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stepsFromObjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/example-parameters.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExampleParameter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/example-parameters.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExampleParameters",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/execution.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Execution",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/functional-step.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FunctionalStep",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/functional-step.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapReferentialStepToFunctionalStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/gwt-test-case.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GwtTestCase",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/scenario-component.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScenarioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/scenario-execution-report.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScenarioExecutionReport",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/scenario-index.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScenarioIndex",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/scenario.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Scenario",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/selectable-tags.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectableTags",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/step-execution-report.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StepExecutionReport",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/step.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Step",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/strategy-definition.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StrategyDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/strategy-parameter-definition.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParameterDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/strategy.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Strategy",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/technical-step.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TechnicalStep",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/test-case.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestCase",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/scenario/testcase-edition.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestCaseEdition",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/sql-result.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sqlresult",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/sql-result.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sqlResultFromObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/table.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Row",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/table.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Table",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InputTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/agent-network.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AgentNetworkService",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/backups.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BackupDto",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/backups.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BackupsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/campaign-scheduling.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CampaignSchedulingService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/campaign.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CampaignService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/component.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ComponentTaskDto",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/component.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScenarioComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/component.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestCaseComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ComponentService",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/database-admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatabaseAdminService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dataset.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataSetService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/edition.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestCaseEditionDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/edition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EditionService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/environment-admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EnvironmentAdminService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/git-backup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GitBackupService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/global-var.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalVariableService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/home-page.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomePageService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/jira-plugin-configuration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JiraPluginConfigurationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/jira-plugin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JiraPluginService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/linkifier.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LinkifierService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/roles.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RolesService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/scenario-execution.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScenarioExecutionService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/scenario.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScenarioService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/step.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StepService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/agent-network/components/agent-network-configuration/agent-network-configuration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentNetworkConfigurationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/agent-network/components/agent-network/agent-network.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentNetworkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/agent-network/components/agent/agent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/agent-network/components/network-graph/network-graph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NetworkGraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/backups/components/backups-admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackupsAdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/campaign.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/components/campaign-list/campaign-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CampaignListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/components/campaign-scheduling/campaign-scheduling.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CampaignSchedulingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/components/create-campaign/campaign-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CampaignEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/65",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/components/execution/execution-campaign.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CampaignExecutionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/61",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/campaign/components/execution/execution-campaign.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CampaignReport",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/component.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/action/action-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/56",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/create-component/create-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/child-panel/child-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChildPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/execution-panel/execution-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/parameters/parameters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParametersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/strategy-form/parameter-form/strategy-parameter-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StrategyParameterFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/strategy-form/strategy-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StrategyFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/component/components/sub/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/database-admin/components/database-admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatabaseAdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dataset/components/dataset-edition/dataset-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatasetEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dataset/components/dataset-edition/forms-data-grid/forms-data-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsDataGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dataset/components/dataset-edition/forms-key-value/forms-key-value.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsKeyValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dataset/components/dataset-list/dataset-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatasetListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dataset/dataset.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global-variable/components/global-variable-edition/global-variable-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GlobalVariableEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global-variable/global-variable.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home-page/components/home-page-create/home-page-create-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageCreateDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home-page/components/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/plugins/components/git-backup/git-backup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GitBackupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/plugins/components/jira/jira.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "JiraComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/plugins/components/linkifier/linkifier.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkifierComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/plugins/components/plugin-configuration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginConfigurationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/roles/components/roles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RolesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/edition/authoring-info/authoring-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthoringInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/edition/component-edition/component-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/edition/edition-info/edition-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditionInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/edition/raw/raw-edition.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RawEditionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execute/execute.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecuteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/component-read/component-read.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentReadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/execution.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioExecutionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/gwt-read/gwt-read.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GwtReadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/history/history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/step-report/step-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/execution/step/step.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/search-list/scenarios.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenariosComponent",
                "coveragePercent": 0,
                "coverageCount": "0/50",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/sub/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/components/sub/scenario-campaigns/scenario-campaigns.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioCampaignsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/scenario.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/scenarios/scenario.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/asciidoctor/asciidoctor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsciiDoctorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/dialog/delete-confirm-dialog/delete-confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/editable-badge/editable-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditableBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/editable-label/editable-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditableLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/editable-text-area/editable-text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditableTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/import-button/import-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/import-file/import-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportFileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/input-line/input-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputLineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/forms/search-field/search-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/navigation/primary/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/panel/collapsible-panel/collapsible-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapsiblePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/panel/error-panel/error-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/panel/property-table-panel/property-table-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyTablePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/panel/table-panel/table-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TablePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/toast/toast-info/toast-info.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/molecules/validation/validation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/organisms/documentation/documentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/organisms/environment-admin/add-target-dialog/add-target-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTargetDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/organisms/environment-admin/environment-admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentAdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/organisms/main-menu/main-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/organisms/profile-menu/profile-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlertService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/clonable.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Clonable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/clonable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cloneAsPossible",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/clonable.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "instanceOfClonable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/chutney-editor/chutney-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChutneyEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/component-card/component-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dataset-selection/dataset-selection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatasetSelectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/environment-combo/environment-combo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentComboComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/execution-badge/execution-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutionBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/hasAuthorization.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasAuthorizationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/implementationHost.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ImplementationHostDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/input-focus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputFocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/equals.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Equals",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/equals.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "areEquals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/equals.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "instanceOfEquals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/equals.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNotEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/error-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/event-manager.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventManagerService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/highlight/highlight.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HighLightJService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/hjson-parser/hjson-parser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HjsonParserService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/component-search.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ComponentSearchPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/dataset-search.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DataSetSearchPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/duration.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DurationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/linkify.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LinkifyPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/objectAsEntryList.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ObjectAsEntryListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/prettyPrint.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PrettyPrintPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/scenario-search-campaign.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ScenarioCampaignSearchPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/scenario-search.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ScenarioSearchPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/search-text.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SearchTextPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/sort-by-field.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortByFieldPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/pipes/stringify.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "StringifyPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/thumbnail.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ThumbnailPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/truncate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TruncatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/without-scenario-pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "WithoutScenarioPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StateService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "containsAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "distinct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "filterOnTextContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "flatMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "intersection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "newInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "normalize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "pairwise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/array-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortByAndOrder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/async-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "delay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/bool-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "disabledBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "allStepsParamsFromFunctionStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "exampleParamsExistStepParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "focusOnElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStepParamRegExp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "highlightStepParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "highlightUnknownParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "macthStepParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/function-step-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "stepsParamsFromFunctionStep",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/number-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "randomIntFromInterval",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/object-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addOptionalArrayParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/object-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addOptionalParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/regexp-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "escapeRegExp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/string-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "escapeHtml",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/string-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNullOrBlankString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tools/string-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNullOrEmptyString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/duration.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "durationValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/activated-route-stub.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ActivatedRouteStub",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/translate-testing.module.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FakeLoader",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/translate-testing.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslateServiceStub",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/translate-testing.module.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslatePipeMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/translate-testing.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "fromKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/testing/translate-testing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSLATIONS_EN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}