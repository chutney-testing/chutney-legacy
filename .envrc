# Setup a working environment without hassle using nix and direnv
# For more information, visit https://direnv.net/

# Install node, npm and geckodriver by loading .env.nix expression
use_nix .env.nix

# Run npm install if needed
[[ ! -d ./ui/node_modules ]] && echo "node_modules not found. Starting npm install" && cd ui && npm install && cd ..


## Integration with external tools ##

# Some tools (ex. Intellij) might need to configure paths to node, npm etc.
# You can use following symlinks provided in .env folder

## Create .env folder
[[ ! -d .env ]] && mkdir .env && echo "Create .env folder"

## Symlink npm home
ln -sfn $(dirname "$(dirname "$(readlink -f $(which npm))")") .env/npm_home && echo "Symlink npm home dir"


## Mimicking frontend-maven-plugin ##

# ui module relies on nodejs and npm
# Integration with maven is provided by the maven plugin "frontend-maven-plugin"
# This plugin installs nodejs and npm into a local directory ui/node
# But these binaries cannot be used under a system manage with nix package manager
# So, we need to mimic the setup made by frontend-maven-plugin

## Create node folder
[[ ! -d ./ui/node ]] && mkdir ui/node && echo "Create node folder into ./ui"

## Symlink node
ln -sf $(readlink -f $(which node)) ./ui/node/node && echo "Symlink node \"$(readlink -f $(which node))\" onto ./ui/node/node"

## Symlink npm
ln -sf $(readlink -f $(which npm)) ./ui/node/npm && echo "Symlink npm \"$(readlink -f $(which npm))\" onto ./ui/node/npm"

## Symlink node_modules
[[ ! -L ./ui/node/node_modules ]] && ln -s $(readlink -f ./ui/node_modules) ./ui/node && echo "Symlink node_modules onto ./ui/node/node_modules"
